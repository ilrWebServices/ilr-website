diff -rupN a/media_youtube.info b/media_youtube.info
--- a/media_youtube.info	2015-03-23 07:13:02.000000000 -0400
+++ b/media_youtube.info	2015-05-11 10:17:09.000000000 -0400
@@ -8,6 +8,7 @@ dependencies[] = media_internet
 files[] = includes/MediaYouTubeStreamWrapper.inc
 files[] = includes/MediaInternetYouTubeHandler.inc
 files[] = includes/MediaYouTubeBrowser.inc
+configure = admin/config/services/media-youtube

 ; Information added by Drupal.org packaging script on 2015-03-23
 version = "7.x-2.0-rc5"
diff -rupN a/media_youtube.module b/media_youtube.module
--- a/media_youtube.module	2015-03-23 06:10:08.000000000 -0400
+++ b/media_youtube.module	2015-05-11 22:38:20.000000000 -0400
@@ -12,7 +12,8 @@
  * Avoid using the gdata api url when possible. Too many calls will result in
  * throttling and 403 errors.
  */
-define('MEDIA_YOUTUBE_REST_API', 'https://gdata.youtube.com/feeds/api/videos');
+define('MEDIA_YOUTUBE_REST_API', 'https://www.googleapis.com/youtube/v3/search');
+

 // Load all YouTube file formatters.
 require_once dirname(__FILE__) . '/includes/media_youtube.formatters.inc';
@@ -137,39 +138,42 @@ function media_youtube_add($form, &$form

   $empty = FALSE;
   $files = array();
-  if (!isset($search['entry'])) {
-    $empty = TRUE;
+
+  if (!isset($search->items)) {
+  	$empty = TRUE;
   }
   else {
-    // $search['entry'] is different depending on whether there is a single
-    // result or multiple results. So normalise it.
-    $videos = isset($search['entry']['id']) ? array($search['entry']) : $search['entry'];
-    foreach ($videos as $video) {
-      try {
-        $uri = media_parse_to_uri($video['link'][0]['@attributes']['href']);
-      }
-      catch (Exception $e) {
-        // Ignore invalid videos.
-        continue;
-      }
-      // Create a temporary file object for our retrieved video.
-      $file = file_uri_to_object($uri);
-      $file->type = 'video';
-      if (!isset($file->fid)) {
-        $file->fid = 0;
-      }
-      media_browser_build_media_item($file);
-      $attributes = array(
-        'data-uri' => $uri,
-        'class' => array('media-youtube-wrapper'),
-      );
-      $form['videos'][$uri] = array(
-        '#markup' => $file->preview,
-        '#prefix' => '<li' . drupal_attributes($attributes) . '>',
-        '#suffix' => '</li>',
-      );
-      $files[$uri] = $file;
-    }
+	$videos = $search->items;
+  	foreach ($videos as $video) {
+  	  if ($video->id->kind == "youtube#video") {
+  	  	  try {
+          	$uri = 'youtube://v/' . $video->id->videoId;
+	  	  }
+	      catch (Exception $e) {
+	        // Ignore invalid videos.
+	        continue;
+	      }
+	      // Create a temporary file object for our retrieved video.
+	      $file = file_uri_to_object($uri);
+		  $file->type = 'video';
+		  $file->filemime = 'video/youtube';
+
+	      if (!isset($file->fid)) {
+	        $file->fid = 0;
+	      }
+	      media_browser_build_media_item($file);
+	      $attributes = array(
+	        'data-uri' => $uri,
+	        'class' => array('media-youtube-wrapper'),
+	      );
+	      $form['videos'][$uri] = array(
+	        '#markup' => $file->preview,
+	        '#prefix' => '<li' . drupal_attributes($attributes) . '>',
+	        '#suffix' => '</li>',
+	      );
+	      $files[$uri] = $file;
+      }
+	}
   }

   if (!count($files)) {
@@ -350,21 +354,28 @@ function media_youtube_access($op, $file
  * @TODO: Document this function.
  */
 function media_youtube_video_search($options = array()) {
-  $options['v'] = 2;
+	$options['v'] = 3;
+	$options['key'] = variable_get('media_youtube_api_key', '');
+	$options['part'] = 'snippet';
+	$options['type']= 'video';
+	$options['videoCaption']='any';
+
+	$request = drupal_http_request(url(MEDIA_YOUTUBE_REST_API, array('query' => $options)));
+	if (!isset($request->error)) {
+		$json = json_decode($request->data);
+	}
+	else {
+		throw new Exception("Error Processing Request. (Error: {$request->code}, {$request->error})");
+
+		//if request wasn't successful, create object for return to avoid errors
+//		$entry = new SimpleXMLElement();
+	}

-  $request = drupal_http_request(url(MEDIA_YOUTUBE_REST_API, array('query' => $options)));
-  if (!isset($request->error)) {
-    $entry = simplexml_load_string($request->data);
-  }
-  else {
-    throw new Exception("Error Processing Request. (Error: {$request->code}, {$request->error})");
+//	return media_youtube_unserialize_xml($entry);
+	return $json;
+}

-    //if request wasn't successful, create object for return to avoid errors
-    $entry = new SimpleXMLElement();
-  }

-  return media_youtube_unserialize_xml($entry);
-}

 /**
  * Recursively converts a SimpleXMLElement object into an array.
@@ -418,3 +429,38 @@ function media_youtube_valid_id($id, $re
   cache_set('media_youtube:id:' . $id, $ids[$id], 'cache_media_xml', media_variable_get('xml_cache_expire', 3600));
   return $ids[$id];
 }
+
+
+/**
+ * Implements hook_menu().
+ *
+ * Added to configure YouTube API KEY
+ */
+function media_youtube_menu() {
+	$items['admin/config/services/media-youtube'] = array(
+			'title' => "Media: Youtube",
+			'page callback' => 'drupal_get_form',
+			'page arguments' => array('media_youtube_settings_form'),
+			'access arguments' => array('administer media browser'), // TODO: is this permission ok here ? (come from media module)
+			'type' => MENU_NORMAL_ITEM,
+	);
+
+	return $items;
+}
+
+/**
+ * Settings form.
+ *
+ * Added to configure YouTube API KEY
+ */
+function media_youtube_settings_form($form, &$form_state) {
+	$form['media_youtube_api_key'] = array(
+			'#type' => 'textfield',
+			'#title' => t('API key'),
+			'#description' => t('The Google API key has to be requested from google website. A Google account is needed too. See https://developers.google.com/youtube/v3/getting-started'),
+			'#default_value' => variable_get('media_youtube_api_key', ''),
+	);
+
+	$form = system_settings_form($form);
+	return $form;
+}
