<?php
/**
 * @file
 * Install, update and uninstall functions for the install profile.
 */

/**
 * Implements hook_install().
 *
 * Performs actions to set up the site for this profile.
 *
 * @see system_install()
 */
function ilr_install() {
  // Enable default permissions for system roles.
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access content'));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access content'));

  // Create all the roles we'll need
  _ilr_create_roles();

  // Allow new users to register but require verification
  variable_set('user_register', 1);
  variable_set('user_email_verification', 1);

  // Enable custom theme
  system_rebuild_theme_data();
  theme_enable(array('ilr_theme'));
  variable_set('theme_default', 'ilr_theme');
  variable_set('admin_theme', 'seven');
  variable_set('node_admin_theme', '1');

  // Enable caching
  variable_set('cache', 1);
  variable_set('page_cache_maximum_age', 1800); // Allows reverse proxies (like Varnish) to store content for up to half an hour

  // Set some default values for the simplesamlphp_auth module
  variable_set('simplesamlphp_auth_activate', 1);
  variable_set('simplesamlphp_auth_authsource', 'cornell');
  variable_set('simplesamlphp_auth_forcehttps', 0);
  variable_set('simplesamlphp_auth_mailattr', 'mail');
  variable_set('simplesamlphp_auth_registerusers', 1);
  variable_set('simplesamlphp_auth_unique_id', 'uid');
  variable_set('simplesamlphp_auth_user_name', 'cn');

  // This setting will allow the automatic assignment of roles for some users
  // See http://drupal.org/node/1931394 for an explanation of this syntax.
  $admin_role = user_role_load_by_name('administrator');
  variable_set('simplesamlphp_auth_rolepopulation', "{$admin_role->rid}:uid,=,atf46|{$admin_role->rid}:uid,=,nr52|{$admin_role->rid}:uid,=,cgh2|{$admin_role->rid}:uid,=,fjp2|{$admin_role->rid}:uid,=,ddd1|{$admin_role->rid}:uid,=,tls245");

  // Deal with ENV specific settings
  if (isset($_ENV["AH_SITE_ENVIRONMENT"])) {
    $drupal_path = DRUPAL_ROOT;
    // Enable the helper module for logging emails
    if ($_ENV['AH_SITE_ENVIRONMENT'] != 'prod') {
      module_enable(array(
        'helper'
      ));
    }
  }
  else {
    $drupal_path = '/var/www/ilr-website/docroot';
    // Set the temporary path
    variable_set('file_temporary_path', '/tmp');
  }

  $simplesamlphp_installdir = str_replace(array(
    '/docroot',
  ), array(
    '/simplesamlphp-1.10.0',
  ), $drupal_path);

  variable_set('simplesamlphp_auth_installdir', $simplesamlphp_installdir);

  // Set the public file system path
  variable_set('file_public_path', 'sites/default/files');

  // Disable default email notification on user activation
  // The main reason to do this is that a user created via
  // netID login will see this message if their account is blocked
  // and then re-activated.
  variable_set('user_mail_status_activated_notify', 0);

  // Enable css and javascript aggregation by default
  variable_set('preprocess_css', 1);
  variable_set('preprocess_js', 1);

  // Set the homepage, relying on hook_menu in the profile
  variable_set('site_frontpage', 'home');

  if (isset($_ENV['AH_SITE_ENVIRONMENT']) && $_ENV['AH_SITE_ENVIRONMENT'] != 'prod') {
    module_enable(array(
      'helper'
    ));
  }

  _ilr_add_permissions();

  // Add Migrations here as necessary
}

/**
 * Enables jpanelmenu
 */
function ilr_update_7001() {
  module_enable(array(
    'jpanelmenu'
  ));
}

/**
 * Enables borealis responsive images
 */
function ilr_update_7002() {
  module_enable(array(
    'borealis_ri',
  ));
}

/**
 * Enables custom_publishing_options
 */
function ilr_update_7003() {
  module_enable(array(
    'custom_publishing_options',
  ));
}

/**
 * Enables registration_pages
 */
function ilr_update_7004() {
  module_enable(array(
    'registration_pages',
  ));
}

/**
 * Enables ilr workspan feature
 */
function ilr_update_7005() {
  module_enable(array(
    'ilr_workspan',
  ));
}

/**
 * Enables globalredirect module
 */
function ilr_update_7006() {
  module_enable(array(
    'globalredirect',
  ));
}

/**
 * Custom function for role creation
 */
function _ilr_create_roles() {
  $roles = array('administrator','contributor','neutral admin', 'neutral', 'registered user', 'wit editor', 'faculty admin');

  foreach ($roles as $name) {
    $role = new stdClass();
    $role->name = $name;
    $role->weight = 2;
    user_role_save($role);
  }
}

/**
 * Custom function for role creation
 */
function _ilr_add_permissions() {
  // Enable the permissions module
  module_enable(array(
    'ilr_permissions',
  ));

  // Assign all available permissions to admin
  $admin_role = user_role_load_by_name('administrator');
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));

  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);

  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();

}
