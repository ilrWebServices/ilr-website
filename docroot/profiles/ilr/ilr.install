<?php
/**
 * @file
 * Install, update and uninstall functions for the install profile.
 */

/**
 * Implements hook_install_tasks().
 */
function ilr_install_tasks() {
  $tasks = array(
    '_ilr_add_permissions' => array(
      'display_name' => 'Adding permissions',
    ),
  );
  return $tasks;
}

/**
 * Implements hook_install().
 *
 * Performs actions to set up the site for this profile.
 *
 * @see system_install()
 */
function ilr_install() {
  // Enable default permissions for system roles.
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access content'));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access content'));

  // Create all the roles we'll need
  _ilr_create_roles();

  // Allow new users to register but require verification
  variable_set('user_register', 1);
  variable_set('user_email_verification', 1);

  // Enable custom theme
  system_rebuild_theme_data();
  theme_enable(array('ilr_theme'));
  variable_set('theme_default', 'ilr_theme');
  variable_set('admin_theme', 'seven');
  variable_set('node_admin_theme', '1');

  // Enable caching
  variable_set('cache', 1);
  variable_set('page_cache_maximum_age', 1800); // Allows reverse proxies (like Varnish) to store content for up to half an hour

  // Set some default values for the simplesamlphp_auth module
  variable_set('simplesamlphp_auth_activate', 1);
  variable_set('simplesamlphp_auth_authsource', 'cornell');
  variable_set('simplesamlphp_auth_forcehttps', 0);
  variable_set('simplesamlphp_auth_mailattr', 'mail');
  variable_set('simplesamlphp_auth_registerusers', 1);
  variable_set('simplesamlphp_auth_unique_id', 'uid');
  variable_set('simplesamlphp_auth_user_name', 'cn');

  // This setting will allow the automatic assignment of roles for some users
  // See http://drupal.org/node/1931394 for an explanation of this syntax.
  $admin_role = user_role_load_by_name('administrator');
  variable_set('simplesamlphp_auth_rolepopulation', "{$admin_role->rid}:uid,=,atf46|{$admin_role->rid}:uid,=,nr52|{$admin_role->rid}:uid,=,cgh2|{$admin_role->rid}:uid,=,fjp2|{$admin_role->rid}:uid,=,ddd1|{$admin_role->rid}:uid,=,tls245");

  // Deal with ENV specific settings
  if (isset($_ENV["PLATFORM_ENVIRONMENT"])) {
    $drupal_path = DRUPAL_ROOT;
  }
  else {
    $drupal_path = '/var/www/ilr-website/docroot';
    // Set the temporary path
    variable_set('file_temporary_path', '/tmp');
  }

  $simplesamlphp_installdir = str_replace(array(
    '/docroot',
  ), array(
    '/simplesamlphp-1.14.3',
  ), $drupal_path);

  variable_set('simplesamlphp_auth_installdir', $simplesamlphp_installdir);

  // Set the public file system path
  variable_set('file_public_path', 'sites/default/files');

  // Disable default email notification on user activation
  // The main reason to do this is that a user created via
  // netID login will see this message if their account is blocked
  // and then re-activated.
  variable_set('user_mail_status_activated_notify', 0);

  // Enable css and javascript aggregation by default
  variable_set('preprocess_css', 1);
  variable_set('preprocess_js', 1);

  // Set the homepage, relying on hook_menu in the profile
  variable_set('site_frontpage', 'home');

  if (isset($_ENV['PLATFORM_ENVIRONMENT']) && $_ENV['PLATFORM_BRANCH'] != 'master') {
    module_enable(array(
      'helper'
    ));
  }

  // Explicitly call any hook_update_n implementations needed to run on install.
  // These hooks will be skipped by initial install but will run on updatedb of current site.
  ilr_update_7007();
  ilr_update_7008();
}

/**
 * Custom function for role creation
 */
function _ilr_create_roles() {
  $roles = array('administrator','power user','contributor','neutral admin', 'neutral', 'registered user', 'faculty admin', 'course admin', 'form admin', 'reflection admin');

  $weight = 0;
  foreach ($roles as $name) {
    if (!user_role_load_by_name($name)) {
      _ilr_create_role($name, $weight);
    }
    $weight++;
  }
}

function _ilr_create_role($name, $weight) {
  $role = new stdClass();
  $role->name = $name;
  $role->weight = $weight;
  user_role_save($role);
}

function _ilr_delete_role($name) {
  user_role_delete($role);
}

/**
 * Custom function for role creation
 */
function _ilr_add_permissions() {
  // Enable the permissions module
  module_enable(array(
    'ilr_permissions',
  ));

  // Assign all available permissions to admin
  $admin_role = user_role_load_by_name('administrator');
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));

  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);

  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();

}

function _ilr_bulk_delete_nodes_finished($success, $results, $operations) {
  $message = ($success)
    ? t('Batch node deletion successfully completed')
    : t('Batch node deletion failed.');
    drupal_set_message($message);
}

/**
 * Enables jpanelmenu
 */
function ilr_update_7001() {
  module_enable(array(
    'jpanelmenu'
  ));
}

/**
 * Enables borealis responsive images
 */
function ilr_update_7002() {
  module_enable(array(
    'borealis_ri',
  ));
}

/**
 * Enables custom_publishing_options
 */
function ilr_update_7003() {
  module_enable(array(
    'custom_publishing_options',
  ));
}

/**
 * Enables registration_pages
 */
function ilr_update_7004() {
  module_enable(array(
    'registration_pages',
  ));
}

/**
 * Enables ilr workspan feature
 */
function ilr_update_7005() {
  module_enable(array(
    'ilr_workspan',
  ));
}

/**
 * Enables globalredirect module
 */
function ilr_update_7006() {
  module_enable(array(
    'globalredirect',
  ));
}

/**
 * Enable Date format and JQuery update admin version variables.
 */
function ilr_update_7007() {
  variable_set('date_format_ilr_short_day_only', 'M j');
  variable_set('jquery_update_jquery_admin_version', '1.5');
}

/**
 * Set default date formats.
 */
function ilr_update_7008() {
  $formats_defaults = array(
    'long' =>'l, F j, Y - g:ia',
    'medium' => 'D, m/d/Y - g:ia',
    'short' => 'Y-m-d H:i',
  );

  foreach ($formats_defaults as $date_type => $formats_default) {
    variable_set("date_format_$date_type", $formats_default);
  }
}

/**
 * Enables ilr_sdc_settings
 */
function ilr_update_7009() {
  module_enable(array(
    'ilr_sdc_listings',
  ));
}

/**
 * Enables ilr_sub_pages module
 */
function ilr_update_7010() {
  module_enable(array(
    'ilr_sub_pages',
  ));
}

/**
 * Enables student_portaits feature
 */
function ilr_update_7011() {
  module_enable(array(
    'student_portraits',
  ));
}

/**
 * Adds course admin role
 */
function ilr_update_7012() {
  if (!user_role_load_by_name('course admin')) {
    $role = new stdClass();
    $role->name = 'course admin';
    $role->weight = $weight++;
    user_role_save($role);
  }
}

/**
 * Enables sub_sites custom module
 */
function ilr_update_7013() {
  module_enable(array(
    'ilr_sub_sites',
  ));
}

/**
 * Enables cul_new_books custom module
 */
function ilr_update_7014() {
  module_enable(array(
    'cul_new_books',
  ));
}

/**
 * Enables ilr_mega_menu feature
 */
function ilr_update_7015() {
  module_enable(array(
    'ilr_mega_menu',
  ));
}

/**
 * Enables ilr_bean_admin feature
 */
function ilr_update_7016() {
  module_enable(array(
    'ilr_bean_admin',
  ));
}

/**
 * Enables cul_hours feature
 */
function ilr_update_7017() {
  module_enable(array(
    'cul_hours',
  ));
}

/**
 * Enables ilr_xml_blocks feature
 */
function ilr_update_7018() {
  module_enable(array(
    'ilr_xml_blocks',
  ));
}

/**
 * Enables ilr_google_translate feature
 */
function ilr_update_7019() {
  module_enable(array(
    'ilr_google_translate',
  ));
}

/**
 * Enables ilr_alumni_events custom module
 */
function ilr_update_7020() {
  module_enable(array(
    'ilr_alumni_events',
  ));
}

/**
 * Enables elavon custom module
 */
function ilr_update_7021() {
  // Elavon removed
}

/**
 * Deletes unused fields
 */
function ilr_update_7022() {
  $fields_for_deletion = array(
    'field_date_of_birth',
    'field_dublin_acad_goals_essay',
    'field_dublin_study_abroad_essay',
    'field_school_year',
    'field_banner_image',
  );

  foreach ($fields_for_deletion as $key => $name) {
    field_delete_field($name);
  }
}

/**
 * Deletes unused labor roundtable fields
 */
function ilr_update_7023() {
  field_delete_field('field_major');
  field_delete_field('field_referral_textarea');
}

/**
 * Deletes field_mega_menu_blocks
 */
function ilr_update_7024() {
  field_delete_field('field_mega_menu_blocks');
}

/**
 * Deletes additional form fields
 */
function ilr_update_7025() {
  field_delete_field('field_passport_expiration_date');
  field_delete_field('field_year_soph_jr_sr');
}
/**
 * Enable Date format
 */
function ilr_update_7026() {
  variable_set('date_format_ilr_year_only', 'Y');
}
/**
 * Deletes field_academic_department
 */
function ilr_update_7027() {
  field_delete_field('field_academic_department');
}
/**
 * Enables block_collection feature
 */
function ilr_update_7028() {
  module_enable(array('block_collection'));
}
/**
 * Enables menu_trail_by_path feature
 */
function ilr_update_7029() {
  module_enable(array('menu_trail_by_path'));
}
/**
 * Deletes field_referenced_entity instance from promos
 */
function ilr_update_7030() {
  if ($instance = field_info_instance('node', 'field_referenced_entity', 'promo')) {
    field_delete_instance($instance);
  }
}
/**
 * Deletes unused profile fields
 */
function ilr_update_7031() {
  field_delete_field('field_ilrweb_overview');
  field_delete_field('field_ilrweb_publications');
  field_delete_field('field_ilrweb_publications_file');
  field_delete_field('field_ilrweb_vita_html');
}
/**
 * Deletes unused field_address_line_2 instance from profiles
 */
function ilr_update_7032() {
  if ($instance = field_info_instance('node', 'field_address_line_2', 'people_profile')) {
    field_delete_instance($instance);
  }
}
/**
 * Deletes defunct field_use_ai_data from profiles
 */
function ilr_update_7033() {
  field_delete_field('field_use_ai_data');
}
/**
 * Adds form admin role
 */
function ilr_update_7034() {
  _ilr_create_roles();
}
/**
 * Enables ilr_admin feature
 */
function ilr_update_7035() {
  module_enable(array('block_collection'));
}
/**
 * Enables ilr_redirects custom module
 */
function ilr_update_7036() {
  module_enable(array('ilr_redirects'));
  _ilr_redirects_create_redirects();
}
/**
 * Enables ilr_legacy_redirect custom module
 */
function ilr_update_7037() {
  // module_enable(array('ilr_legacy_redirect')); // Removing as it was causing the installer to fail
}
/**
 * Enables add date short format.
 */
function ilr_update_7038() {
  variable_set('date_format_ilr_date_short', 'm/d/Y');
}

/**
 * Enables cul_search feature
 */
function ilr_update_7039() {
  module_enable(array(
    'cul_search',
  ));
}

/**
 * Enables forms2 feature
 */
function ilr_update_7040() {
  module_enable(array(
    'forms2',
  ));
}

/**
 * Enables ilr_forms_staff feature
 */
function ilr_update_7041() {
  module_enable(array(
    'ilr_forms_staff',
  ));
}

/**
 * Enables ilr_forms_students feature
 */
function ilr_update_7042() {
  module_enable(array(
    'ilr_forms_students',
  ));
}

/**
 * Enables securepages on Acquia
 */
function ilr_update_7043() {
  if (isset($_ENV["PLATFORM_ENVIRONMENT"])) {
    module_enable(array('securepages'));
  }
}

/**
 * Enables ilr_forms_public feature
 */
function ilr_update_7044() {
  module_enable(array(
    'ilr_forms_public',
  ));
}

/**
 * Enables ilr_post feature and dependencies
 */
function ilr_update_7045() {
  module_enable(array(
    'ilr_post',
  ));
}

/**
 * Adds youtube api for media_youtube
 */
function ilr_update_7046() {
  variable_set('media_youtube_api_key', 'AIzaSyAmQHtLLBP8-AGYKxiy-Ml8w2J-W8NewBU');
}

/**
 * Adds reflection admin role
 */
function ilr_update_7047() {
  $roles = user_roles();
  _ilr_create_role('reflection admin', count($roles));
}

/**
 * Creates the power user role
 */
function ilr_update_7048() {
  $roles = user_roles();
  _ilr_create_role('power user', count($roles));

  $permissions = array(
    'administer redirects',
    'create url aliases',
    'delete any html bean',
    'delete any image files',
    'delete any news_item content',
    'delete own image files',
    'download any image files',
    'download own image files',
    'edit any image files',
    'edit own image files',
  );
  _ilr_add_permissions_to_role($permissions, 'power user');
}

/**
 * Improves cache clearing performance
 */
function ilr_update_7049() {
  variable_set('features_rebuild_on_flush',FALSE);
  variable_set('entity_rebuild_on_flush',FALSE);
}

/**
 * Enables the admin_views module
 */
function ilr_update_7050() {
  module_enable(array('admin_views'));
}

/**
 * Removes the spotlight module
 */
function ilr_update_7051() {
  $sql = 'SELECT nid FROM {node} n WHERE n.type = :type';
  $result = db_query($sql, array(':type' => 'spotlight'));
  $nids = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }
  node_delete_multiple($nids);
  foreach (field_info_instances('node', 'spotlight') as $field_name => $field) {
    field_delete_instance($field);
  }
  node_type_delete('spotlight');
  field_purge_batch(10);
}

/**
 * Removes the library-related modules and content
 */
function ilr_update_7052() {
  module_disable(array('wit','featured_book','cul_hours','cul_search','cul_new_books','microfilm_microfiche'));
  $types = array('featured_book', 'microfilm', 'microfiche', 'wit_article');
  $result = db_select('node')
    ->fields('node', array('nid'))
    ->condition('type', $types)
    ->execute()
    ->fetchAll();
  $nids = $operations = array();
  foreach ($result as $row) {
    $nids[] = $row->nid;
  }
  // Break the array into smaller sizes to eliminate timeouts
  $chunks = array_chunk($nids, 100, TRUE);
  foreach ($chunks as $key => $current_nids) {
    $operations[] = array('node_delete_multiple', array($current_nids));
  }

  // Set up the Batch API
  $batch = array(
    'operations' => $operations,
    'finished'   => '_ilr_bulk_delete_nodes_finished',
  );
  batch_set($batch);

  foreach ($types as $key => $type) {
    foreach (field_info_instances('node', $type) as $field_name => $field) {
      field_delete_instance($field);
    }
    node_type_delete($type);
  }

  field_purge_batch(10);

  if ($wit_menu = menu_load('catherwood-library')) {
    menu_delete($wit_menu);
  }

  _ilr_delete_role('wit editor');

  $vocabs = array('publications', 'wire_services');
  foreach ($vocabs as $key => $name) {
    if ($vocab = taxonomy_vocabulary_machine_name_load($name)) {
      taxonomy_vocabulary_delete($vocab->vid);
    }
  }
}

/**
 * Removes additional library-related db artifacts
 */
function ilr_update_7053() {
  $result = db_query('SELECT pid, source FROM {url_alias} WHERE alias LIKE :pattern',
    array(':pattern' => db_like('library/') . '%'));
  $aliases = $result->fetchAllKeyed();

  $nids = []; // Get ready to store the library nids
  foreach ($aliases as $pid => $source) {
    $nids[] = substr(strstr($source, '/'),1);
    path_delete($pid);
  }
  path_delete(316091); // The main library alias
  $nids[] = 255656; // The main library page
  node_delete_multiple($nids);

  // Now delete the entityforms and entityform types
  $types = array('wit_email_list_subscribe', 'library_contact_form');
  $result = db_select('entityform')
    ->fields('entityform', array('entityform_id'))
    ->condition('type', $types)
    ->execute()
    ->fetchAll();
  $eids = $operations = array();
  foreach ($result as $row) {
    $eids[] = $row->entityform_id;
  }
  entityform_delete_multiple($eids);

  foreach ($types as $key => $type) {
    foreach (field_info_instances('entityform_type', $type) as $field_name => $field) {
      field_delete_instance($field);
    }
    if ($entityform_type = entityform_type_load($type)) {
      entityform_type_delete($entityform_type);
    }
  }

  field_purge_batch(10);
}

/**
 * Enables ilr_paragraphs and ilr_experience_reports features
 */
function ilr_update_7054() {
  module_enable(array(
    'ilr_paragraphs',
    'ilr_experience_reports',
  ));
}

/**
 * Switches from Elavon to FreedomPay and creates initial HPP entities
 */
function ilr_update_7055() {
  module_enable(array('freedompay'));

  $hpp_entities = array('Forensics', 'Alumni');

  foreach ($hpp_entities as $name) {
    $entity_properties = array(
      'title' => $name,
      'store_id' => 'placeholder',
      'terminal_id' => 'placeholder',
      'checkout_path' => 'pay/checkout',
      'success_path' => 'pay/success.htm',
      'failure_path' => 'pay/failure.htm',
      'cancel_path' => 'pay/cancel.htm',
    );
    $entity = entity_create('freedompay_hpp', $entity_properties);
    $entity->save();
  }
}

/**
 * Changes machine name of field_intro_text to field_para_main_page_content
 */
function ilr_update_7056() {
  $field_name_to_change = array('field_intro_text' => 'field_para_main_page_content');
  ilr_rename_fields($field_name_to_change, $drop_first = FALSE);
}

/**
 * Enables ilr_channel_page feature
 */
function ilr_update_7057() {
  module_enable(array(
    'ilr_channel_page',
  ));
}

/**
 * Updates FreedomPay payments and invoices - Run twice if fails the first time
 */
function ilr_update_7058() {
  module_enable(array('freedompay_entityform'));
  if (property_exists('FreedomPayPayment', 'form_id')) {
    $payments = FreedomPayPayment::getPayments();
    foreach ($payments as $payment) {
      if ($invoice = FreedomPayInvoice::getInvoiceByOrderId($payment->form_id)) {
        $payment->invoice_id = $invoice->invoice_id;
        $payment->save();

        $invoice->transaction_id = $payment->transaction_id;
        $invoice->order_type = 'entityform';
        $invoice->save();
      }
    }
  }
}

/**
 * Updates the simplesamlphp_installdir
 */
function ilr_update_7059() {
  $drupal_path = (isset($_ENV["PLATFORM_ENVIRONMENT"]))
    ? DRUPAL_ROOT
    : '/var/www/ilr-website/docroot';

  $simplesamlphp_installdir = str_replace(array(
    '/docroot',
  ), array(
    '/simplesamlphp-1.14.3',
  ), $drupal_path);

  variable_set('simplesamlphp_auth_installdir', $simplesamlphp_installdir);
}

/**
 * Enables ilr_visiting_fellows feature
 */
function ilr_update_7060() {
  module_enable(array(
    'ilr_visiting_fellows',
  ));
}

/**
 * Enables ilr_certificate_programs feature
 */
function ilr_update_7061() {
  module_enable(array(
    'ilr_certificate_programs',
  ));
}

/**
 * Enables ilr_mailchimp module and dependencies
 */
function ilr_update_7062() {
  module_enable(array(
    'ilr_mailchimp',
  ));
}

/**
 * Enables ilr_memory_book module
 */
function ilr_update_7063() {
  module_enable(array(
    'ilr_memory_book',
  ));
}

/**
 * Enables microsite_nav module
 */
function ilr_update_7064() {
  module_enable(array(
    'microsite_nav',
  ));
}

/**
 * Enables the ilr_payment_forms module
 */
function ilr_update_7065() {
  module_enable(['ilr_payment_forms']);
}

/**
 * Enables the ilr_redhen module
 */
function ilr_update_7066() {
  module_enable(['ilr_redhen']);
}

/**
 * Migrates body content to paragraph field
 */
function ilr_update_7067() {
  $nodes = node_load_multiple(array(), array('type' => 'basic_page'));
  // $sliced = array_slice($nodes, 0, 3);
  foreach ($nodes as $node) {
    _ilr_migrate_body_to_paragraph_item($node);
  }
}

/**
 * Deletes body field from basic pages
 */
function ilr_update_7068() {
  if ($instance = field_info_instance('node', 'body', 'basic_page')) {
    field_delete_instance($instance);
  }
}

/**
 * Enables the ilr_mentor module
 */
function ilr_update_7069() {
  module_enable(['ilr_mentor']);
}

/**
 * Adds redirects to support navigations changes from August, 2018
 */
function ilr_update_7070() {
  $navigation_moves = array(
    ['2586', '25231', 'Academics', 0, 2, 1],
    ['22331', '25231', 'Graduate Degree Programs', 0, 2, 1],
    ['14646', '25231', 'Masters in Human Resources OLD', 1, -5, 0],
    ['16756', '25231', 'Leading Masters Degrees for HR Professionals', 1, 2, 0],
    ['2836', '25231', 'Undergraduate Degree Program', 0, 1, 1],
    ['3571', '2981', 'Credit Internships', 0, 1, 1],
    ['4296', '2981', 'Special Study Options', 0, 3, 1],
    ['4286', '2981', 'International Opportunities', 0, 2, 1],
    ['2581', '25231', 'Admissions', 0, 4, 1],
    ['2591', '2981', 'Career Path', 0, 4, 1],
    ['16616', '0', 'Public Engagement', 0, 5, 1],
    ['2601', '25231', 'Professional Programs', 0, 3, 1],
    ['2981', '0', 'Student Experience', 0, 3, 1],
    ['25231', '0', 'Programs', 0, 2, 1],
    ['25241', '0', 'Faculty & Research', 0, 4, 1],
    ['17326', '0', 'Library', 1, 0, 1],
    ['2606', '0', 'Centers & Institutes', 1, 0, 1],
  );
   foreach ($navigation_moves
    as list($mlid, $plid, $title, $hidden, $weight, $has_children)) {

    $ml = menu_link_load($mlid);
    if ($ml) {
      $changes = array(
        'link_path' => $ml['link_path'],
        'link_title' => $title,
        'menu_name' => $ml['menu_name'],
        'weight' => $weight,
        'expanded' => $ml['expanded'],
        'mlid' => $ml['mlid'],
        'plid' => $plid,
        'hidden' => $hidden,
        'has_children' => $has_children,
      );
      menu_link_save($changes);
      menu_cache_clear_all();
    }
  }
  _ilr_redirects_create_redirects('navigation-changes-redirects-2018-08-14',TRUE);
}

/**
 * Adds orphaned portraits to the menus
 */
function ilr_update_7071() {
  $query = db_select('node', 'n');
  $query->addField('n', 'nid');
  $query->condition('n.type', array('student_portrait'), 'IN');
  $nids = $query->execute()->fetchCol();
  $count = 0;
  foreach ($nids as $nid) {
    $menu_link = ilr_get_menu_item($nid);
    if (!$menu_link) {
      $node = node_load($nid);
      $item = [
        'link_path' => 'node/' . $nid,
        'link_title' => $node->title,
        'menu_name' => 'main-menu',
        'weight' => $count,
        'expanded' => 0,
        'plid' => 3361,
        'hidden' => 1,
        'has_children' => 0,
      ];
      menu_link_save($item);
      $count++;
    }
  }
}

/**
 * Triggers pathauto updates for professional programs content
 */
function ilr_update_7072() {
  $query = db_select('node', 'n');
  $query->addField('n', 'nid');
  $query->condition('n.type', array('sdc_course', 'sdc_course', 'sdc_faculty', 'certificate_programs', 'student_portrait'), 'IN');
  $nids = $query->execute()->fetchCol();

  pathauto_node_update_alias_multiple($nids, 'bulkupdate');
}

function _ilr_migrate_body_to_paragraph_item($node) {
  $body = (isset($node->body[LANGUAGE_NONE][0]['value']))
    ? $node->body[LANGUAGE_NONE][0]['value']
    : '';
  if (!empty($body)) {
    $paragraph = new ParagraphsItemEntity(array('field_name' => 'field_para_main_page_content', 'bundle' => 'just_text'));
    $paragraph->is_new = TRUE;
    $paragraph->setHostEntity('node', $node);
    $paragraph->field_text_paragraph[LANGUAGE_NONE][0]['value'] = $body;
    $paragraph->field_text_paragraph[LANGUAGE_NONE][0]['format'] = 'full_html';
    $paragraph->save();
  }
}

/**
 * Enables the ilr_instagram module
 */
function ilr_update_7073() {
  module_enable(['ilr_instagram_feed']);
}

/**
 * Reconfigure settings and modules for platform.sh
 */
function ilr_update_7074() {
  module_disable(['memcache', 'readonlymode']);
  variable_set('file_public_path', 'sites/default/files');
  variable_set('file_private_path', '/app/private');
  variable_set('file_temporary_path', '/app/tmp');
  variable_set('simplesamlphp_auth_installdir', '/app/simplesamlphp-1.14.3');
}

/**
 * Enables and configures xmlsitemap for main menu and subsite menus
 */
function ilr_update_7075() {
  module_enable(['xmlsitemap', 'xmlsitemap_menu']);

  $settings = [
    'status' => '1',
    'priority' => '0.5',
  ];

  variable_set('xmlsitemap_settings_menu_link_main-menu', $settings);

  $subsites = _ilr_sub_sites_get_sub_sites_from_menus();

  foreach ($subsites as $menu_name => $title) {
    variable_set('xmlsitemap_settings_menu_link_' . $menu_name, $settings);
  }
}

/**
 * Enable the entity_form_disabler module.
 */
function ilr_update_7076() {
  module_enable(['entity_form_disabler'], TRUE);
}

/**
 * Updates paths to Scheinman Neutrals
 */
function ilr_update_7077() {
  module_load_include('inc', 'pathauto', 'pathauto');

  $query = db_select('node', 'n');
  $query->addField('n', 'nid');
  $query->condition('n.type', 'scheinman_neutral');
  $nids = $query->execute()->fetchCol();

  foreach ($nids as $nid) {
    $node = node_load($nid);
    $alias_path = 'scheinman/roster-neutrals/' . pathauto_cleanstring($node->title);

    $path = array('source' => "node/" . $nid , 'alias' => trim($alias_path) );

    path_save($path);
  }
}

/**
 * Adds Scheinman Neutrals to the Scheinman menu.
 */
function ilr_update_7078() {
  $query = db_select('node', 'n');
  $query->addField('n', 'nid');
  $query->condition('n.type', 'scheinman_neutral');
  $nids = $query->execute()->fetchCol();
  $count = 0;

  foreach ($nids as $nid) {
    $menu_link = ilr_get_menu_item($nid);

    if (!$menu_link) {
      $node = node_load($nid);
      $item = [
        'link_path' => 'node/' . $nid,
        'link_title' => $node->title,
        'menu_name' => 'scheinman-institute',
        'weight' => $count,
        'expanded' => 0,
        'plid' => 8066,
        'hidden' => 1,
        'has_children' => 0,
      ];
      menu_link_save($item);
      $count++;
    }
  }
  menu_cache_clear_all();
}

