<?php

define('FREEDOMPAY_FAILED_TRANSACTION_MESSAGE', '<p>Sorry, but there was an error processing your request. Please return to the payment form and try again.</p>');
define('FREEDOMPAY_DEFAULT_CANCEL_MESSAGE', ''); // Defaults to no message
define('FREEDOMPAY_DEFAULT_REJECT_MESSAGE', '<p>Sorry, but there was an error processing your payment. Please try again, or contact customer support.</p>');
define('FREEDOMPAY_DEFAULT_CHECKOUT_MESSAGE', '<p>Thank you for your order. Please review your order below, then click the button to complete your payment.</p>');
define('FREEDOMPAY_PAYMENT_NOT_REQUIRED', 'No payment required');
define('FREEDOMPAY_TRANSACTION_SUCCESS', 'Please wait while we complete your transaction');
define('FREEDOMPAY_CREATE_PAYMENT_PATH', 'admin/config/services/freedompay/payment/create');
define('FREEDOMPAY_CHECK_PAYMENT_PATH', 'admin/config/services/freedompay/transaction/check');

/**
 * Checks access.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create' or
 *   'delete'.
 * @param $entity
 * @param $account
 *   The user to check for. Leave it to NULL to check for the current user.
 */
function freedompay_access($op, $entity = NULL, $account = NULL) {
  if (user_access('administer freedompay', $account)) {
    return TRUE;
  }

  if ($op == 'view' && user_access('access freedompay payments', $account)) {
    return TRUE;
  }

  if (($op == 'edit' || $op == 'create' || $op == 'delete')
    && user_access('manage freedompay portals', $account)
  ) {
    return TRUE;
  }
  return FALSE;
}

function freedompay_bundle() {
  $bundle = &drupal_static(__FUNCTION__);
  if (!isset($bundle)) {
    if ($order = freedompay_order()) {
      $bundle = $order->bundle;
    }
  }
  return $bundle;
}

/**
 * Calls a remote transaction to the FreedomPay transaction endpoint
 * @param  String $transaction_type The API action to call, ie: getTransaction
 * @param  JSON   $payload          The serialized payload being sent with the transaction
 * @return Array                    The decoded response
 */
function freedompay_call_freedompay_api($transaction_type, $payload) {
  $service_url = _freedompay_get_service_url();
  $request_headers = array(
    'Content-Type: application/json',
    'Accept: application/json',
    'Cache-Control: no-cache',
    'Content-Length: ' . strlen($payload)
  );
  $process = curl_init();
  curl_setopt($process, CURLOPT_URL, $service_url . '/' . $transaction_type);
  curl_setopt($process, CURLOPT_HTTPHEADER, $request_headers);
  curl_setopt($process, CURLOPT_POST, 1);
  curl_setopt($process, CURLOPT_POSTFIELDS, $payload);
  curl_setopt($process, CURLOPT_RETURNTRANSFER, TRUE);
  $response = curl_exec($process);
  $result = json_decode($response, TRUE);
  curl_close($process);
  return $result;
}

function freedompay_cancel_page() {
  $params = array(
    'query' => array(
      'transid' => $_GET['transid'],
      'fpr' => 'c',
    ),
  );
  _freedompay_redirect(_freedompay_get_checkout_path(), $params);
  return 'Payment Cancelled';
}

/**
 * The checkout page is where the FreedomPay payment button gets rendered
 */
function freedompay_checkout_page() {
  drupal_page_is_cacheable(FALSE);
  $markup = '';
  if (isset($_REQUEST['fpr'])) { // FPR = FreedomPay Respose. Set the cancellation/rejection message
    $markup = _freedompay_get_message($_REQUEST['fpr']);
  }
  // Confirm there is an order form first
  if ($order = freedompay_order()) {
    // Confirm that payment is required. If not, complete the checkout process
    if (!freedompay_payment_required()) {
      _freedompay_complete_checkout();
    }
    // Check for existing checkout_url, which gets stored as a cookie when a transaction is initiated
    if ($checkout_url = _freedompay_get_checkout_url()) {
      // First make sure that the transaction wasn't already completed
      if (freedompay_transaction_completed()) {
        return _freedompay_complete_checkout();
      }
      elseif (freedompay_transaction_prepared()) {
        $markup .= _freedompay_get_message('checkout');
        $markup .= _freedompay_get_order_summary();
        $markup .= _freedompay_get_complete_purchase_button($checkout_url);
      } // There is an issue with the current transaction
      else {
        _freedompay_restart_transaction();
        return _freedompay_redirect(_freedompay_get_checkout_path());
      }
    } // No checkout_url, so try to start a transaction
    elseif ($transaction = _freedompay_create_transaction()) {
      // Redirect back to this same page so that the transaction cookies load
      return _freedompay_redirect(_freedompay_get_checkout_path());
    } // Transaction fail, so send the user back to the form
    else {
      $order_url = _freedompay_cookie_get('order_url');
      drupal_set_message(t(FREEDOMPAY_FAILED_TRANSACTION_MESSAGE), 'error');
      return _freedompay_redirect($order_url);
    }
  } // Oder form failed to load
  else {
    watchdog('freedompay', "Checkout page has rendered without an order cookie", [], WATCHDOG_ERROR);
    $markup .= FREEDOMPAY_FAILED_TRANSACTION_MESSAGE;
  }
  return $markup;
}

/**
 * Gets the checkout payload and caches it
 * Calls the alter function before caching
 */
function freedompay_checkout_payload($order=NULL) {
  $payload = &drupal_static(__FUNCTION__);
  if (!isset($payload)) {
    $order = ($order) ? freedompay_order($order->id, $order) : freedompay_order();
    $transaction_total = freedompay_transaction_total();
    $invoice = freedompay_invoice($order, $transaction_total);
    $payload = array(
      'InvoiceNumber' => $invoice->formatInvoiceNumber(),
      'CaptureMode' => TRUE,
      'AddressRequired' => TRUE,
      'TransactionTotal' => $transaction_total,
      'TerminalId' => $order->hpp->terminal_id,
      'StoreId' => $order->hpp->store_id,
      'MerchantReferenceCode' => $order->entity_type . $order->id,
    );
    drupal_alter('freedompay_checkout_payload', $payload, $order, $order->bundle);
  }
  return $payload;
}

function freedompay_create_order($id, $entity_type='', $entity=NULL) {
  $transaction_id = _freedompay_get_transaction_id();
  $properties = array(
    'form' => $entity,
    'entity_type' => $entity_type,
    'id' => $id,
    'bundle' => $entity->type,
    'hpp' => FreedompayHpp::getPortalForType($entity_type, $entity->type),
    'invoice' => FreedomPayInvoice::getInvoiceByTransactionId($transaction_id),
  );
  $order = new FreedomPayOrder($properties);
  // Set the order cache with the update info
  freedompay_order($order->id, $order);
  return $order;
}

/**
 * Implements hook_entity_info().
 */
function freedompay_entity_info() {
  return array(
    'freedompay_hpp' => array(
      'label' => t('FreedomPay Portal'),
      'plural label' => t('FreedomPay Portals'),
      'controller class' => 'EntityAPIController',
      'entity class' => 'FreedompayHpp',
      'views controller class' => 'EntityDefaultViewsController',
      'base table' => 'freedompay_hpp',
      'fieldable' => FALSE,
      'entity keys' => array(
        'id' => 'hpp_id',
        'label' => 'title',
      ),
      'access callback' => 'freedompay_access',
      'admin ui' => array(
        'path' => 'admin/config/services/freedompay/hpp',
        'controller class' => 'EntityDefaultUIController',
      ),
      'uri callback' => 'entity_class_uri',
      'module' => 'freedompay',
      'label callback' => 'entity_class_label'
    ),
    'freedompay_payment' => array(
      'label' => t('FreedomPay Payment'),
      'plural label' => t('FreedomPay Payments'),
      'controller class' => 'EntityAPIController',
      'entity class' => 'FreedompayPayment',
      'views controller class' => 'EntityDefaultViewsController',
      'base table' => 'freedompay_payments',
      'fieldable' => FALSE,
      'entity keys' => array(
        'id' => 'payment_id',
        'label' => 'transaction_id',
      ),
      'access callback' => 'freedompay_access',
      'module' => 'freedompay',
      'label callback' => 'entity_class_label'
    ),
    'freedompay_invoice' => array(
      'label' => t('FreedomPay Invoice'),
      'plural label' => t('FreedomPay Invoices'),
      'controller class' => 'EntityAPIController',
      'entity class' => 'FreedompayInvoice',
      'views controller class' => 'EntityDefaultViewsController',
      'base table' => 'freedompay_invoices',
      'fieldable' => FALSE,
      'entity keys' => array(
        'id' => 'invoice_id',
        'label' => 'invoice_id',
      ),
      'access callback' => 'freedompay_access',
      'module' => 'freedompay',
      'label callback' => 'entity_class_label'
    ),
  );
}

function freedompay_failure_page() {
  $params = array(
    'query' => array(
      'transid' => $_GET['transid'],
      'fpr' => 'r',
    ),
  );
  _freedompay_redirect(_freedompay_get_checkout_path(), $params);
  return 'Payment Error';
}

/**
 *  Create the form to check a transaction
 */
function freedompay_transaction_form($form, &$form_state) {
  $form['transaction_id'] = array(
    '#title' => t('Transaction ID:'),
    '#type' => 'textfield',
    '#size' => 60,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'check',
    '#name' => '',
  );

  $form['#action'] = '/' . current_path();
  $form['#method'] = 'get';
  $form['#pre_render'][] = 'freedompay_transaction_form_modify';
  return $form;
}

function freedompay_transaction_form_modify($form){
  unset($form['form_token']);
  unset($form['form_build_id']);
  unset($form['form_id']);
  return $form;
}

/**
 * Implements hook_form_alter().
 * Removes the url redirects tab
 */
function freedompay_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'freedompay_hpp_form' || $form_id == 'freedompay_payment_form') {
    unset($form['redirect']);
  }
}

/*
 * Admin page for Portals
 */
function freedompay_hpp_admin_page() {
  return t('Administer FreedomPay Portals');
}

/**
 * Form definition for adding/editing portals
 */
function freedompay_hpp_form($form, &$form_state, $hpp = NULL) {
  $form['title'] = array(
    '#title' => t('Title'),
    '#type' => 'textfield',
    '#default_value' => isset($hpp->title) ? $hpp->title : '',
    '#required' => TRUE,
    '#weight' => -10,
  );

  $form['store_id'] = array(
    '#title' => t('Store ID'),
    '#type' => 'textfield',
    '#default_value' => isset($hpp->store_id) ? $hpp->store_id : '',
    '#required' => TRUE,
  );

  $form['terminal_id'] = array(
    '#title' => t('Terminal ID'),
    '#type' => 'textfield',
    '#default_value' => isset($hpp->terminal_id) ? $hpp->terminal_id : '',
    '#required' => TRUE,
  );

  $form['checkout_path'] = array(
    '#title' => t('Checkout Path'),
    '#type' => 'textfield',
    '#default_value' => isset($hpp->checkout_path) ? $hpp->checkout_path : '',
    '#required' => TRUE,
  );

  $form['success_path'] = array(
    '#title' => t('Success Path'),
    '#type' => 'textfield',
    '#default_value' => isset($hpp->success_path) ? $hpp->success_path : '',
    '#required' => TRUE,
  );

  $form['failure_path'] = array(
    '#title' => t('Failure Path'),
    '#type' => 'textfield',
    '#default_value' => isset($hpp->failure_path) ? $hpp->failure_path : '',
    '#required' => TRUE,
  );

  $form['cancel_path'] = array(
    '#title' => t('Cancel Path'),
    '#type' => 'textfield',
    '#default_value' => isset($hpp->cancel_path) ? $hpp->cancel_path : '',
    '#required' => TRUE,
  );

  field_attach_form('freedompay_hpp', $hpp, $form, $form_state);

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => isset($hpp->hpp_id) ? t('Update portal') : t('Save portal'),
    '#weight' => 999,
  );
  return $form;
}

/**
 * Submit handler for the portal add/edit form.
 */
function freedompay_hpp_form_submit($form, &$form_state) {
  $hpp = entity_ui_form_submit_build_entity($form, $form_state);
  $hpp->save();
  drupal_set_message(t('The portal <em>@title</em> has been saved.', array('@title' => $hpp->title)));
  $form_state['redirect'] = 'admin/config/services/freedompay/hpp';
}

function freedompay_is_production() {
  $environment = variable_get('freedompay_environment', 'production');;
  return $environment == 'production';
}

/**
 * Gets the existing invoice or creates a new one
 * Calls the alter hook
 * Checks for duplicates and modifies them
 */
function freedompay_invoice($order, $amount=NULL) {
  if ($invoice = FreedompayInvoice::getInvoiceByOrderId($order->id)) {
    return $invoice;
  } // Create a new invoice
  else {
    $properties = array(
      'transaction_id' => _freedompay_get_transaction_id(),
      'order_id' => $order->id,
      'amount' => $amount,
      'hpp_id' => $order->hpp->hpp_id,
      'order_type' => $order->entity_type,
    );
    $invoice = new FreedompayInvoice($properties);
    drupal_alter('freedompay_invoice_number', $invoice, $order, $order->bundle);
    if ($invoice->isDuplicate()) { //Once altered, check for duplicate
      $invoice->invoiceNumber($invoice->number + 1);
    }
    $invoice->save();
  }
  return $invoice;
}

/**
 * Implements hook_menu().
 * Dynamically generates paths based on the system HPP entities
 */
function freedompay_menu() {
  $items = array();

  $portals = FreedompayHpp::getPortals();
  if (!empty($portals)) {
    $path_names_and_titles = array(
      'checkout' => 'Checkout Summary',
      'success' => 'Completing Transaction', // They should get forwarded along
      'failure' => 'Payment Error',
      'cancel' => 'Payment Cancelled',
    );
    foreach ($portals as $portal) {
      foreach ($path_names_and_titles as $path_name => $title) {
        $items[$portal->{$path_name.'_path'}] = array(
          'title' => $title,
          'description' => $title . ' Page',
          'page callback' => "freedompay_{$path_name}_page",
          'access arguments' => array('access content'),
          'type' => MENU_CALLBACK,
        );
      }
    }
  }

  $items['admin/config/services/freedompay/payments'] = array(
    'title' => 'Freedompay Payments',
    'description' => 'Freedompay Payments Page',
    'page callback' => "_freedompay_payments_page",
    'access arguments' => array('access freedompay payments'),
  );

  $items[FREEDOMPAY_CREATE_PAYMENT_PATH] = array(
    'title' => 'Freedompay Create Payment',
    'description' => 'Freedompay Payments Page',
    'page callback' => "_freedompay_create_payment",
    'access arguments' => array('access freedompay payments'),
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/services/freedompay/invoices'] = array(
    'title' => 'Freedompay Invoices',
    'description' => 'Freedompay Invoices Page',
    'page callback' => "_freedompay_invoices_page",
    'access arguments' => array('access freedompay payments'),
  );

  $items[FREEDOMPAY_CHECK_PAYMENT_PATH] = array(
    'title' => 'Freedompay Transaction Information',
    'description' => 'Freedompay Transaction Info Page',
    'page callback' => "_freedompay_transaction_info",
    'access arguments' => array('access freedompay payments'),
  );

  return $items;
}

/**
 * Loads the order and typically caches it
 * @param  int              $order_id
 *         The id of the entity
 * @param  FreedomPayOrder $order
 *         The order object, which allows us to set the cache
 * @param  boolean $set_cache
 *         Because we are loading the entity from the db,
 *         we need to skip the cache when comparing
 */
function freedompay_order($order_id=NULL, $order=NULL) {
  $cached_order = &drupal_static(__FUNCTION__);
  if (!isset($cached_order)) {
    if ($order) {
      $cached_order = $order;
    }
    elseif ($order_id || $order_id = _freedompay_cookie_get('oid')) {
      $cached_order = FreedomPayOrder::load($order_id);
    }
    elseif ($transaction_id = _freedompay_get_transaction_id(FALSE)) {
      if ($order = FreedomPayOrder::getOrderByTransactionId($transaction_id)) {
        $cached_order = $order;
      }
    }
  }
  return $cached_order;
}

/**
 * Creates and stores a payment entity
 */
function freedompay_payment() {
  if ($transaction_id = _freedompay_get_transaction_id()) {
    if ($existing_payment = FreedompayPayment::getPaymentByTransactionId($transaction_id)) {
      watchdog('freedompay', "Attempt to create duplicate payment entity for transaction @id",
        array(
          '@id' => $transaction_id,
        ),
        WATCHDOG_ERROR
      );
    } // There is not yet an existing payment, so attempt to create one
    else {
      $results = freedompay_call_freedompay_api('getTransaction', $transaction_id);
      if (!empty($results) && $results['AuthResponse']['AuthorizationDecision'] == 'ACCEPT') {
        $freeway_response = $results['AuthResponse']['FreewayResponse'];
        $form_id = _freedompay_cookie_get('oid');
        $invoice = FreedomPayInvoice::getInvoiceByTransactionId($transaction_id);
        $properties = [
          'transaction_id' => $transaction_id,
          'authorization_code' => $freeway_response['AuthorizationCode'],
          'form_id' => $form_id,
          'invoice_id' => $invoice->invoice_id,
          'amount' => $freeway_response['Amount'],
          'freeway_request_id' => $freeway_response['FreewayRequestId'],
          'card_number' => $results['MaskedCardNumber'],
        ];
        $payment = new FreedompayPayment($properties);
        $payment->save();
        return $payment;
      } // There was a problem creating the payment entity
      else {
        watchdog('freedompay', "FreedomPay transaction API failure for transaction @id",
          array(
            '@id' => $transaction_id,
          ),
          WATCHDOG_ERROR
        );
      }
    }
  }
  return NULL;
}

/**
 * Checks for an existing payment
 * Or whether the form doesn't require payment (ie a free event)
 * @param  FreedomPayOrder $order
 * @return boolean
 *         Whether the payment process is considered "complete"
 */
function freedompay_payment_complete($order=NULL) {
  if (!freedompay_payment_required()) {
    return TRUE;
  }
  if ($transaction_id = _freedompay_get_transaction_id()) {
    if ($stored_payment = FreedompayPayment::getPaymentByTransactionId($transaction_id)) {
      return TRUE;
    }
    elseif ($order) {
      // First set the order cache
      freedompay_order($order->id, $order);
      if (!freedompay_payment_required()) {
        return TRUE;
      }
      elseif ($invoice = freedompay_invoice($order)) {
        return $invoice->paid;
      }
    }
  }
  return FALSE;
}

/**
 * Checks whether the transaction total is set to FREEDOMPAY_PAYMENT_NOT_REQUIRED
 * Implementing modules can set this in hook_freedompay_transaction_total_alter()
 */
function freedompay_payment_required() {
  $transaction_total = freedompay_transaction_total();
  return $transaction_total != FREEDOMPAY_PAYMENT_NOT_REQUIRED;
}

/**
 * Implements hook_permission().
 */
function freedompay_permission() {
  return array(
    'administer freedompay' => array(
      'title' => t('Administer FreedomPay Portals'),
      'description' => t('Perform administration tasks and manage FreedomPay portals.'),
    ),
    'manage freedompay portals' => array(
      'title' => t('Manage FreedomPay Portals'),
      'description' => t('Mange portals.'),
    ),
    'access freedompay payments' => array(
      'title' => t('Access payments'),
      'description' => t('View for payments.'),
    ),
  );
}

/**
 * Success callback from FreedomPay, which means the transaction was successful
 * Complete the checkout if needed, or pass them along if it's already complete
 */
function freedompay_success_page() {
  if (_freedompay_get_transaction_id() && !freedompay_payment_complete()) {
    _freedompay_complete_checkout();
  } // transid is missing or the payment was already completed
  else {
    if ($order = freedompay_order()) {
      if (freedompay_payment_complete($order)) {
        _freedompay_cookie_flush();
        module_invoke_all('freedompay_order_complete', $order, $order->entity_type, $order->bundle);
      }
      else { // Redirect to the checkout page
        $checkout_path = _freedompay_get_checkout_path();
        _freedompay_cookie_flush();
        _freedompay_redirect($checkout_path);
      }
    }
  }
  return 'Success';
}

/**
 * Checks the AuthResponse from FreedomPay's API
 */
function freedompay_transaction_completed() {
  if ($details = freedompay_transaction_details()) {
    return isset($details['AuthResponse']) && $details['AuthResponse']['AuthorizationDecision'] == 'ACCEPT';
  }
}

/**
 * Checks to see if the payload values are different from the existing transaction
 */
function freedompay_transaction_payload_changed($transaction, $payload) {
  if (isset($transaction['OriginalRequest'])) {
    $original = $transaction['OriginalRequest'];
    $changes = _freedompay_recursive_array_diff($payload, $original);
    return !empty($changes);
  }// The original request failed, so the payload is different
  return TRUE;
}

function freedompay_transaction_details($transaction_id=NULL) {
  $details = &drupal_static(__FUNCTION__);
  if (!isset($details)) {
    $transaction_id = ($transaction_id) ? $transaction_id : _freedompay_get_transaction_id();
    if ($transaction_id) {
      $details = freedompay_call_freedompay_api('getTransaction', $transaction_id);
    }
  }
  return $details;
}

/**
 * Checks that the transaction is correctly prepared
 * At times, the FreedomPay transaction API generates an error instead
 * of the JSON response body
 */
function freedompay_transaction_prepared() {
  if ($details = freedompay_transaction_details()) {
    return isset($details['OriginalRequest']);
  }
}

/**
 * Getter/setter for the transaction total, including calling the alter hook
 */
function freedompay_transaction_total() {
  $transaction_total = &drupal_static(__FUNCTION__);
  if (!isset($transaction_total)) {
    $transaction_total = 0;
    if ($order = freedompay_order()) {
      drupal_alter('freedompay_transaction_total', $transaction_total, $order, $order->bundle);
    }
  }
  return $transaction_total;
}

/**
 * Checks the original invoice amount with the new payload
 * Updates the amount based on a (possibly different) transaction total
 */
function freedompay_update_invoice($order, $data=array()) {
  if ($invoice = FreedompayInvoice::getInvoiceByOrderId($order->id)) {
    foreach ($data as $property => $value) {
      $invoice->{$property} = $value;
    }
    $invoice->save();
  }
}

/**
 * Completes the checkout process, including invoking hook_freedompay_order_complete().
 */
function _freedompay_complete_checkout() {
  $order = freedompay_order();
  if(freedompay_payment_required()) {
    _freedompay_mark_invoice_paid($order);
    $payment = freedompay_payment();
  }
  _freedompay_cookie_flush();
  module_invoke_all('freedompay_order_complete', $order, $order->entity_type, $order->bundle);
  return FREEDOMPAY_TRANSACTION_SUCCESS;
}

function _freedompay_cookie_get($name) {
  if (isset($_COOKIE['Drupal_payment_' . $name])) {
    return $_COOKIE['Drupal_payment_' . $name];
  }
  return NULL;
}

function _freedompay_cookie_flush() {
  $cookies = ['oid','order_url','checkout_url','transaction_id'];
  foreach ($cookies as $key => $name) {
    _freedompay_cookie_delete($name);
  }
}

function _freedompay_cookie_delete($cookie_name) {
  setrawcookie('Drupal.payment.' . $cookie_name, '', REQUEST_TIME - 3600, '/');
}

function _freedompay_cookie_save(array $values) {
  foreach ($values as $field => $value) {
    setrawcookie('Drupal.payment.' . $field, rawurlencode($value), REQUEST_TIME + 60 * 60 * 1.5, '/');
  }
}

function _freedompay_create_payment() {
  if ($payment = freedompay_payment()) {
    _freedompay_redirect('admin/config/services/freedompay/invoices');
  }
  else {
    drupal_set_message(t('Sorry, but there was an error processing your request. Please check the logs for additional information.'),'error');
  }
  return '';
}

/**
 * Gets the checkout path of the hpp for the current form
 * Defaults to a path that will likely result in a 404
 */
function _freedompay_get_checkout_path() {
  if($order = freedompay_order()) {
    return $order->hpp->checkout_path;
  }
  return 'payment/checkout';
}

function _freedompay_get_checkout_url() {
  $checkout_url = &drupal_static(__FUNCTION__);
  if (!isset($checkout_url)) {
    if ($checkout_url = _freedompay_cookie_get('checkout_url')) {
      return $checkout_url;
    }
  }
  return $checkout_url;
}

function _freedompay_get_complete_purchase_button($checkout_url) {
  $markup = '<a class="button" href="'.$checkout_url.'">Complete Purchase</a>';
  return $markup;
}

function _freedompay_get_message($action) {
  $bundle = freedompay_bundle();
  $message = '';
  switch ($action) {
    case 'c':
      $message = variable_get('freedompay_'.$bundle.'_cancel_message', FREEDOMPAY_DEFAULT_CANCEL_MESSAGE);
      break;
    case 'r':
      $message = variable_get('freedompay_'.$bundle.'_reject_message', FREEDOMPAY_DEFAULT_REJECT_MESSAGE);
      break;
    case 'checkout':
      $message = variable_get('freedompay_'.$bundle.'_checkout_message', FREEDOMPAY_DEFAULT_CHECKOUT_MESSAGE);
      break;
  }
  return $message;
}

function _freedompay_get_order_summary() {
  $summary = '';
  if ($payload = freedompay_checkout_payload()) {
    if (!empty($payload['PurchaseItems'])) {
      $summary = '<ul class="purchase-items">';
      foreach ($payload['PurchaseItems'] as $item) {
        $summary .= '<li class="item">'.$item['Description'].' - <span class="cost">$'.$item['Price'].'</span></li>';
      }
      $summary .= '</ul>';
    }
  }
  return $summary;
}

/**
 * The service url defaults to production
 * You can/should override this when testing by setting this variable to any other value
 */
function _freedompay_get_service_url() {
  $service_url = (freedompay_is_production())
    ? 'https://payments.freedompay.com/checkoutservice/checkoutservice.svc'
    : 'https://payments.uat.freedompay.com/checkoutservice/checkoutservice.svc';
  return $service_url;
}

/**
 * Get the transaction id
 * - first from a potential url variable (without case sensitivity)
 * - next from the cookie
 * - finally from the order
 * @param Boolean   $check_oder - Prevents recursive checking,
 *                  since freedompay_order calls this function
 */
function _freedompay_get_transaction_id($check_order=TRUE) {
  $transaction_id = &drupal_static(__FUNCTION__);
  if (!isset($transaction_id)) {
    if (isset($_REQUEST['transid'])) {
      $transaction_id = $_REQUEST['transid'];
    }
    elseif (isset($_REQUEST['transId'])) {
      $transaction_id = $_REQUEST['transId'];
    }
    elseif ($transaction_id_cookie = _freedompay_cookie_get('transaction_id')) {
      $transaction_id = $transaction_id_cookie;
    }
    elseif ($check_order && $order = freedompay_order()) {
      if ($order->transaction_id) {
        $transaction_id = $order->transaction_id;
      }
    }
  }
  return $transaction_id;
}

function _freedompay_invoices_page() {
  $output[] = FreedompayInvoice::adminPage();
  return $output;
}

/**
 * Marks the invoice as paid
 */
function _freedompay_mark_invoice_paid($order) {
  $properties = array('paid' => 1);
  freedompay_update_invoice($order, $properties);
}

function _freedompay_payments_page() {
  $output[] = FreedompayPayment::adminPage();
  return $output;
}

/**
 * Creates a transaction with the FreedomPay API if ducks are in a row
 *   - Saves the transaction_id and checkout_url cookies
 *   - Updates the transaction id for the invoice
 */
function _freedompay_create_transaction() {
  $order = freedompay_order();
  $payload = freedompay_checkout_payload();
  if (is_numeric($payload['TransactionTotal']) && $payload['TransactionTotal'] > 0) { // Make sure it's a valid transaction total
    $result = freedompay_call_freedompay_api('createTransaction', json_encode($payload));
    if (!empty($result) && !empty($result['CheckoutUrl'])) {
      _freedompay_cookie_save(['transaction_id' => $result['TransactionId']]);
      _freedompay_cookie_save(['checkout_url' => $result['CheckoutUrl']]);
      //Update the existing invoice, if there is one
      if ($existing_invoice = freedompay_invoice($order)) {
        $existing_invoice->transaction_id = $result['TransactionId'];
        $existing_invoice->save();
      }
      return $result;
    } // The transaction failed
    else {
      watchdog('freedompay', "Failure creating transaction for payment form @id",
        array(
          '@id' => $order->id,
        ),
        WATCHDOG_ERROR
      );
    }
  } // Failed to create a valid total, so send the user back to the form
  else {
    watchdog('freedompay', "Invalid transaction total for payment form @id",
      array(
        '@id' => $order->id,
      ),
      WATCHDOG_ERROR
    );
    drupal_set_message(t('There was an error with your request. Please be sure to include a valid amount.'), 'error');
  }
  return NULL;
}

/**
 * Recursively compares the values of a 2nd array from the first
 * @see freedompay_transaction_payload_changed().
 */
function _freedompay_recursive_array_diff($array1, $array2) {
  $diffs = array();
  foreach ($array1 as $key => $value) {
    if (array_key_exists($key, $array2)) {
      if (is_array($value)) {
        $recursive_diffs = _freedompay_recursive_array_diff($value, $array2[$key]);
        if (count($recursive_diffs)) { $diffs[$key] = $recursive_diffs; }
      } else {
        if ($value != $array2[$key]) {
          $diffs[$key] = $value;
        }
      }
    } else {
      $diffs[$key] = $value;
    }
  }
  return $diffs;
}

/**
 * Redirection helper function
 */
function _freedompay_redirect($url, $params=array()) {
  drupal_goto($url, $params);
}

/**
 * By clearing the stored transaction cookies, we force a new transaction
 */
function _freedompay_restart_transaction() {
  _freedompay_cookie_delete('transaction_id');
  _freedompay_cookie_delete('checkout_url');
}

function _freedompay_transaction_info() {
  $content = "<h2>Transaction Information</h2>";
  $form = drupal_get_form('freedompay_transaction_form');
  $content .= drupal_render($form);
  if (isset($_REQUEST['transaction_id'])) {
    $results = freedompay_call_freedompay_api('getTransaction', $_REQUEST['transaction_id']);
    if (!empty($results)) {
      $content .= '<pre>'.json_encode($results, JSON_PRETTY_PRINT).'</pre>';
    }
    else {
      return 'Sorry, but there was an error processing your request.';
    }
  }
  return $content;
}
