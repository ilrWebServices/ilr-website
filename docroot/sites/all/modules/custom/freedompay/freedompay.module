<?php

define('FREEDOMPAY_FAILED_TRANSACTION_MESSAGE', '<p>Sorry, but there was an error processing your request. Please return to the payment form and try again.</p>');
define('FREEDOMPAY_DEFAULT_CANCEL_MESSAGE', ''); // Defaults to no message
define('FREEDOMPAY_DEFAULT_REJECT_MESSAGE', '<p>Sorry, but there was an error processing your payment. Please try again, or contact customer support.</p>');
define('FREEDOMPAY_DEFAULT_CHECKOUT_MESSAGE', '<p>Thank you for your order. Please review your order below, then click the button to complete your payment.</p>');
define('FREEDOMPAY_PAYMENT_NOT_REQUIRED', 'No payment required');
define('FREEDOMPAY_TRANSACTION_SUCCESS', 'Please wait while we complete your transaction');

/**
 * Gets teh checkout payload and caches it
 * Calls the alter function before caching
 */
function freedompay_checkout_payload() {
  $payload = &drupal_static(__FUNCTION__);
  if (!isset($payload)) {
    $entityform = freedompay_entityform();
    $hpp = FreedompayHpp::getPortalForForm($entityform);
    $transaction_total = freedompay_transaction_total();
    $invoice = freedompay_invoice($entityform, $transaction_total);
    $payload = array(
      'InvoiceNumber' => $invoice->formatInvoiceNumber(),
      'CaptureMode' => TRUE,
      'AddressRequired' => TRUE,
      'TransactionTotal' => $transaction_total,
      'TerminalId' => $hpp->terminal_id,
      'StoreId' => $hpp->store_id,
      'MerchantReferenceCode' => 'eform' . $entityform->entityform_id,
    );
    $form_id = _freedompay_entityform_type_name();
    drupal_alter('freedompay_checkout_payload', $form_id, $payload);
  }
  return $payload;
}

/**
 * Implements hook_entity_info().
 */
function freedompay_entity_info() {
  return array(
    'freedompay_hpp' => array(
      'label' => t('FreedomPay Portal'),
      'plural label' => t('FreedomPay Portals'),
      'controller class' => 'EntityAPIController',
      'entity class' => 'FreedompayHpp',
      'views controller class' => 'EntityDefaultViewsController',
      'base table' => 'freedompay_hpp',
      'fieldable' => FALSE,
      'entity keys' => array(
        'id' => 'hpp_id',
        'label' => 'title',
      ),
      'access callback' => 'freedompay_access',
      'admin ui' => array(
        'path' => 'admin/config/services/freedompay/hpp',
        'controller class' => 'EntityDefaultUIController',
      ),
      'uri callback' => 'entity_class_uri',
      'module' => 'freedompay',
      'label callback' => 'entity_class_label'
    ),
    'freedompay_payment' => array(
      'label' => t('FreedomPay Payment'),
      'plural label' => t('FreedomPay Payments'),
      'controller class' => 'EntityAPIController',
      'entity class' => 'FreedompayPayment',
      'views controller class' => 'EntityDefaultViewsController',
      'base table' => 'freedompay_payments',
      'fieldable' => FALSE,
      'entity keys' => array(
        'id' => 'payment_id',
        'label' => 'transaction_id',
      ),
      'access callback' => 'freedompay_access',
      'module' => 'freedompay',
      'label callback' => 'entity_class_label'
    ),
    'freedompay_invoice' => array(
      'label' => t('FreedomPay Invoice'),
      'plural label' => t('FreedomPay Invoices'),
      'controller class' => 'EntityAPIController',
      'entity class' => 'FreedompayInvoice',
      'views controller class' => 'EntityDefaultViewsController',
      'base table' => 'freedompay_invoices',
      'fieldable' => FALSE,
      'entity keys' => array(
        'id' => 'invoice_id',
        'label' => 'invoice_id',
      ),
      'access callback' => 'freedompay_access',
      'module' => 'freedompay',
      'label callback' => 'entity_class_label'
    ),
  );
}

/**
 * Implements hook_permission().
 */
function freedompay_permission() {
  return array(
    'administer freedompay' => array(
      'title' => t('Administer FreedomPay Portals'),
      'description' => t('Perform administration tasks and manage FreedomPay portals.'),
    ),
    'manage freedompay portals' => array(
      'title' => t('Manage FreedomPay Portals'),
      'description' => t('Mange portals.'),
    ),
    'access freedompay payments' => array(
      'title' => t('Access payments'),
      'description' => t('View for payments.'),
    ),
  );
}

/**
 * Implements hook_menu().
 * Dynamically generates paths based on the system HPP entities
 */
function freedompay_menu() {
  $items = array();

  $portals = FreedompayHpp::getPortals();
  if (!empty($portals)) {
    $path_names_and_titles = array(
      'checkout' => 'Checkout Summary',
      'success' => 'Completing Transaction', // They should get forwarded along
      'failure' => 'Payment Error',
      'cancel' => 'Payment Cancelled',
    );
    foreach ($portals as $portal) {
      foreach ($path_names_and_titles as $path_name => $title) {
        $items[$portal->{$path_name.'_path'}] = array(
          'title' => $title,
          'description' => $title . ' Page',
          'page callback' => "freedompay_{$path_name}_page",
          'access arguments' => array('access content'),
          'type' => MENU_NORMAL_ITEM,
        );
      }
    }
  }

  $items['admin/config/services/freedompay/payments'] = array(
    'title' => 'Freedompay Payments',
    'description' => 'Freedompay Payments Page',
    'page callback' => "_freedompay_payments_page",
    'access arguments' => array('access payments'),
  );

  $items['admin/config/services/freedompay/invoices'] = array(
    'title' => 'Freedompay Invoices',
    'description' => 'Freedompay Invoices Page',
    'page callback' => "_freedompay_invoices_page",
    'access arguments' => array('access payments'),
  );

  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter().
 * form_id = ilr_editable_settings_form
 * Adds a setting for cancel and reject messages for all payment forms
 * @see ilr_editable_settings module.
 */
function freedompay_form_ilr_editable_settings_form_alter(&$form, &$form_state, $form_id) {
  $payment_forms = _freedompay_get_payment_forms();
  $form['freedompay_set'] = array(
    '#type' => 'fieldset',
    '#title' => t('FreedomPay Messages'),
  );
  $form['freedompay_set']['freedompay_default_cancel_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Default FreedomPay cancel message'),
    '#default_value' => FREEDOMPAY_DEFAULT_CANCEL_MESSAGE,
  );
  $form['freedompay_set']['freedompay_default_reject_message'] = array(
    '#type' => 'textarea',
    '#title' => t('Default FreedomPay rejected message'),
    '#default_value' => FREEDOMPAY_DEFAULT_REJECT_MESSAGE,
  );
  foreach ($payment_forms as $name => $entityform_type) {
    $replaced_name = ucfirst(str_replace('_', ' ', $name));
    $form['freedompay_set']['freedompay_'.$name.'_reject_message'] = array(
      '#type' => 'textarea',
      '#title' => t($replaced_name . ' FreedomPay rejected message'),
      '#default_value' => FREEDOMPAY_DEFAULT_REJECT_MESSAGE,
    );
    $form['freedompay_set']['freedompay_'.$name.'_cancel_message'] = array(
      '#type' => 'textarea',
      '#title' => t($replaced_name . ' FreedomPay cancel message'),
      '#default_value' => FREEDOMPAY_DEFAULT_CANCEL_MESSAGE,
    );
    $form['freedompay_set']['freedompay_'.$name.'_checkout_message'] = array(
      '#type' => 'textarea',
      '#title' => t($replaced_name . ' FreedomPay checkout message'),
      '#default_value' => FREEDOMPAY_DEFAULT_CHECKOUT_MESSAGE,
    );
  }
}

/**
 * Implements hook_entity_insert().
 */
function freedompay_entityform_insert($entityform) {
  if (freedompay_entityform_is_payment_form($entityform)) {
    _freedompay_set_entityform_cookies($entityform);
  }
}

/**
 * Implements hook_entity_presave().
 * Sets the draft status of the form
 */
function freedompay_entityform_presave($entityform) {
  if (freedompay_entityform_is_payment_form($entityform)) {
    if (!_freedompay_get_transaction_id()) {
      _freedompay_set_entityform_cookies($entityform);
    }
    // It's a draft if it's not complete
    $entityform->draft = (!empty($entityform->entityform_id))
      ? !_freedompay_payment_complete($entityform)
      : 1;
  }
}

/**
 * Implements hook_entity_update().
 * Checks to be sure that to transaction total hasn't changed
 */
function freedompay_entityform_update($entityform) {
  if (freedompay_entityform_is_payment_form($entityform) && freedompay_payment_required()) {
    if ($transaction = _freedompay_initiate_transaction('getTransaction', _freedompay_get_transaction_id())) {
      $payload = freedompay_checkout_payload();
      if (_freedompay_transaction_payload_changed($transaction, $payload)) {
        _freedompay_restart_transaction();
        $properties = array('amount' => $payload['TransactionTotal']);
        _freedompay_update_invoice($entityform, $properties);
      }
    }
  }
}

/**
 * Implements hook_entityform_previous_submission_alter().
 * Loads the entityform draft if there is one for anonymous users
 */
function freedompay_entityform_previous_submission_alter(&$entityform_submission, $entityform_type, $context) {
  if ($previous_submission = freedompay_entityform()) {
    if ($entityform_type == $previous_submission->type && $previous_submission->draft == 1) {
      $entityform_submission = $previous_submission;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter.
 *   Allows specifying the admin for the form
 *   Adds checkbox to specify NetID login requirement
 */
function freedompay_form_entityform_type_form_alter(&$form, &$form_state, $form_id) {
  $form['#validate'][] = '_freedompay_entityform_type_validate';
  $form['data']['add_payment_processing'] = array(
    '#type' => 'checkbox',
    '#title' => t('This form is used to process FreedomPay payments'),
    '#weight' => 0,
    '#default_value' => (isset($form['#entityform_type']->data['add_payment_processing']))
      ? $form['#entityform_type']->data['add_payment_processing'] : 0,
  );
  $portals = FreedompayHpp::getPortals();
  if (!empty($portals)) {
    foreach ($portals as $portal) {
      $hpp_options[$portal->hpp_id] = $portal->title;
    }
    $form['data']['hpp'] = array(
      '#title' => t('HPP'),
      '#type' => 'select',
      '#options' => $hpp_options,
      '#default_value' => isset($form['#entityform_type']->data['hpp']) ? $form['#entityform_type']->data['hpp'] : '',
      '#required' => FALSE,
      '#weight' => 0,
      '#empty_option' => '--Choose one--',
    );
  }
  else {
    $form['data']['hpp'] = array(
      '#title' => t('HPP'),
      '#type' => 'markup', // Make sure the class below matches the javascript in freedompay.js
      '#markup' => '<div class="form-item-data-hpp">'.l('Add an HPP portal now','admin/config/services/freedompay/hpp/add', array('query' => array('destination' => current_path()))).'</div>',
      '#weight' => 0,
    );
  }

  drupal_add_js(drupal_get_path('module','freedompay') . '/freedompay.js', array('type' => 'file', 'scope' => 'footer'));
}

/*
 * Admin page for Portals
 */
function freedompay_hpp_admin_page() {
  return t('Administer FreedomPay Portals');
}

/**
 * Checks access.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create' or
 *   'delete'.
 * @param $entity
 * @param $account
 *   The user to check for. Leave it to NULL to check for the current user.
 */
function freedompay_access($op, $entity = NULL, $account = NULL) {
  if (user_access('administer freedompay', $account)) {
    return TRUE;
  }

  if ($op == 'view' && user_access('access freedompay payments', $account)) {
    return TRUE;
  }

  if (($op == 'edit' || $op == 'create' || $op == 'delete')
    && user_access('manage freedompay portals', $account)
  ) {
    return TRUE;
  }
  return FALSE;
}

function freedompay_checkout_page() {
  $markup = '';
  if (isset($_REQUEST['fpr'])) { // FPR = FreedomPay Respose. Set the cancellation/rejection message
    $markup = _freedompay_get_message($_REQUEST['fpr']);
  }
  // Confirm there is an entityform first
  if ($entityform = freedompay_entityform()) {
    // Confirm that payment is required. If not, complete the checkout process
    if (!freedompay_payment_required()) {
      _freedompay_complete_checkout();
    }
    // Check for existing checkout_url, which gets stored as a cookie when a transaction is initiated
    if ($checkout_url = _freedompay_get_checkout_url()) {
      if ($transaction = _freedompay_initiate_transaction('getTransaction', _freedompay_get_transaction_id())) {
        // Add the checkout message
        $markup .= _freedompay_get_message('checkout');
        $markup .= _freedompay_get_order_summary();
        $markup .= _freedompay_get_complete_purchase_button($checkout_url);
      } // Transaction failed for some reason
      else {
        _freedompay_restart_transaction();
        return _freedompay_redirect(_freedompay_get_checkout_path());
      }
    } // No checkout_url, so try to start a transaction
    elseif ($transaction = _freedompay_create_freedompay_transaction()) {
      // Redirect so that cookies load
      return _freedompay_redirect(_freedompay_get_checkout_path());
    } // Transaction fail, so send the user back to the form
    else {
      $entityform_url = _freedompay_cookie_get('entityform_url');
      _freedompay_cookie_flush();
      drupal_set_message(t(FREEDOMPAY_FAILED_TRANSACTION_MESSAGE), 'error');
      return _freedompay_redirect($entityform_url);
    }
  } // Entityform failed to load
  else {
    watchdog('freedompay', "Checkout page has rendered without an entityform cookie", [], WATCHDOG_ERROR);
    $markup .= FREEDOMPAY_FAILED_TRANSACTION_MESSAGE;
  }
  return $markup;
}

function freedompay_success_page() {
  if (isset($_REQUEST['transid']) && !_freedompay_payment_complete()) {
    if ($payment = freedompay_payment()) {
      return _freedompay_complete_checkout();
    } // The payment didn't get created for some reason
    else {
      watchdog('freedompay', "Unexpected payment failure for transaction @transaction_id",
        array(
          '@transaction_id' => $_REQUEST['transid'],
        ),
        WATCHDOG_ERROR
      );
    }
  } // transid is missing or the payment was already completed
  else {
    // Check for an entityform
    if ($entityform = freedompay_entityform()) {
      _freedompay_cookie_flush();
      if (_freedompay_payment_complete()) {
        freedompay_redirect_to_entityform_submission($entityform);
      }
      else { // Redirect to the checkout page
        _freedompay_redirect(_freedompay_get_checkout_path());
      }
    }
  }
  return 'Success';
}

function freedompay_error_page() {
  $params = array(
    'query' => array(
      'transid' => $_GET['transid'],
      'fpr' => 'r',
    ),
  );
  _freedompay_redirect(_freedompay_get_checkout_path(), $params);
  return 'Payment Error';
}

function freedompay_cancel_page() {
  $params = array(
    'query' => array(
      'transid' => $_GET['transid'],
      'fpr' => 'c',
    ),
  );
  _freedompay_redirect(_freedompay_get_checkout_path(), $params);
  return 'Payment Cancelled';
}

/**
 * Gets the existing invoice or creates a new one
 * Calls the alter hook
 * Checks for duplicates and modifies them
 */
function freedompay_invoice($entityform, $amount) {
  if ($invoice = FreedompayInvoice::getInvoiceByOrderId($entityform->entityform_id)) {
    return $invoice;
  } // Create a new invoice
  else {
    $hpp = FreedompayHpp::getPortalForForm($entityform);
    $properties = array(
      'order_id' => $entityform->entityform_id,
      'amount' => $amount,
      'hpp_id' => $hpp->hpp_id,
    );
    $invoice = new FreedompayInvoice($properties);
    $type = _freedompay_entityform_type_name();
    drupal_alter('freedompay_invoice_number', $type, $invoice);
    if ($invoice->isDuplicate()) { //Once altered, check for duplicate
      $invoice->invoiceNumber($invoice->number + 1);
    }
    $invoice->save();
  }
  return $invoice;
}

/**
 * Creates and stores a payment entity
 */
function freedompay_payment() {
  $transaction_id = _freedompay_get_transaction_id();
  $results = _freedompay_initiate_transaction('getTransaction', _freedompay_get_transaction_id());
  if (!empty($results) && $results['AuthResponse']['AuthorizationDecision'] == 'ACCEPT') {
    $freeway_response = $results['AuthResponse']['FreewayResponse'];
    $properties = [
      'transaction_id' => $transaction_id,
      'authorization_code' => $freeway_response['AuthorizationCode'],
      'form_id' => _freedompay_cookie_get('entityform_id'),
      'amount' => $freeway_response['Amount'],
      'freeway_request_id' => $freeway_response['FreewayRequestId'],
      'card_number' => $results['MaskedCardNumber'],
    ];
    $payment = new FreedompayPayment($properties);
    $payment->save();
    return $payment;
  }
  return NULL;
}

/**
 * Getter/setter for the transaction total, including calling the alter hook
 */
function freedompay_transaction_total() {
  $transaction_total = &drupal_static(__FUNCTION__);
  if (!isset($transaction_total)) {
    $transaction_total = freedompay_default_transaction_total();
    $type = _freedompay_entityform_type_name();
    drupal_alter('freedompay_transaction_total', $type, $transaction_total);
  }
  return $transaction_total;
}

/**
 * Returns the value of field_total_cost, if it exists
 * Typically, we expect that a module providing a payment form will alter the TransactionTotal
 */
function freedompay_default_transaction_total() {
  $transaction_total = 0;
  if ($wrapper = freedompay_entityform_wrapper()) {
    if (isset($wrapper->field_total_cost)) {
      $transaction_total = $wrapper->field_total_cost->value();
    }
  }
  return $transaction_total;
}

/**
 * Loads or retrieves the entityform object
 */
function freedompay_entityform($entityform_to_set=NULL) {
  $entityform = &drupal_static(__FUNCTION__);
  if (!isset($entityform)) {
    if ($entityform_to_set) {
      $entityform = $entityform_to_set;
    }
    elseif ($entityform_id = _freedompay_cookie_get('entityform_id')) {
      $entityform = entityform_load($entityform_id);
    }
  }
  return $entityform;
}

/**
 * Creates or retrieves an entitymetadata wrapper for the form
 */
function freedompay_entityform_wrapper($entityform=NULL) {
  $wrapper = &drupal_static(__FUNCTION__);
  if (!isset($wrapper)) {
    if ($entityform) {
      $wrapper = entity_metadata_wrapper('entityform', $entityform);
    }
    elseif ($entityform = freedompay_entityform()) {
      $wrapper = entity_metadata_wrapper('entityform', $entityform);
    }
  }
  return $wrapper;
}

/**
 * Form definition for adding/editing portals
 */
function freedompay_hpp_form($form, &$form_state, $hpp = NULL) {
  $form['title'] = array(
    '#title' => t('Title'),
    '#type' => 'textfield',
    '#default_value' => isset($hpp->title) ? $hpp->title : '',
    '#required' => TRUE,
    '#weight' => -10,
  );

  $form['store_id'] = array(
    '#title' => t('Store ID'),
    '#type' => 'textfield',
    '#default_value' => isset($hpp->store_id) ? $hpp->store_id : '',
    '#required' => TRUE,
  );

  $form['terminal_id'] = array(
    '#title' => t('Terminal ID'),
    '#type' => 'textfield',
    '#default_value' => isset($hpp->terminal_id) ? $hpp->terminal_id : '',
    '#required' => TRUE,
  );

  $form['checkout_path'] = array(
    '#title' => t('Checkout Path'),
    '#type' => 'textfield',
    '#default_value' => isset($hpp->checkout_path) ? $hpp->checkout_path : '',
    '#required' => TRUE,
  );

  $form['success_path'] = array(
    '#title' => t('Success Path'),
    '#type' => 'textfield',
    '#default_value' => isset($hpp->success_path) ? $hpp->success_path : '',
    '#required' => TRUE,
  );

  $form['failure_path'] = array(
    '#title' => t('Failure Path'),
    '#type' => 'textfield',
    '#default_value' => isset($hpp->failure_path) ? $hpp->failure_path : '',
    '#required' => TRUE,
  );

  $form['cancel_path'] = array(
    '#title' => t('Cancel Path'),
    '#type' => 'textfield',
    '#default_value' => isset($hpp->cancel_path) ? $hpp->cancel_path : '',
    '#required' => TRUE,
  );

  field_attach_form('freedompay_hpp', $hpp, $form, $form_state);

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => isset($hpp->hpp_id) ? t('Update portal') : t('Save portal'),
    '#weight' => 999,
  );
  return $form;
}

/**
 * Implements hook_form_alter().
 * Removes the url redirects tab
 */
function freedompay_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'freedompay_hpp_form' || $form_id == 'freedompay_payment_form') {
    unset($form['redirect']);
  }
}

/**
 * Submit handler for the portal add/edit form.
 */
function freedompay_hpp_form_submit($form, &$form_state) {
  $hpp = entity_ui_form_submit_build_entity($form, $form_state);
  $hpp->save();
  drupal_set_message(t('The portal <em>@title</em> has been saved.', array('@title' => $hpp->title)));
  $form_state['redirect'] = 'admin/config/services/freedompay/hpp';
}

/**
 * Checks whether the form is a payment form
 * Entityform types with payment processing have already been validated
 * @see _freedompay_entityform_type_validate().
 */
function freedompay_entityform_is_payment_form($entityform) {
  freedompay_entityform_wrapper($entityform);
  $entityform_type = entityform_type_load($entityform->type);
  if (isset($entityform_type->data['add_payment_processing'])) {
    return $entityform_type->data['add_payment_processing'];
  }
  return FALSE;
}

function freedompay_redirect_to_entityform_submission($entityform) {
  $confirmation_url = _entityform_type_get_confirm_url($entityform->type);
  $params = array(
    'query' => array(
      'entityform_id' => $entityform->entityform_id,
    ),
  );
  // Keep entityform from denying access
  $_SESSION['entityform_submission'] = $entityform->entityform_id;
  drupal_goto($confirmation_url, $params);
}

/**
 * Checks whether the transaction total is set to FREEDOMPAY_PAYMENT_NOT_REQUIRED
 * Implementing modules can set this in hook_freedompay_transaction_total_alter()
 */
function freedompay_payment_required() {
  $transaction_total = freedompay_transaction_total();
  return $transaction_total != FREEDOMPAY_PAYMENT_NOT_REQUIRED;
}

/**
 * Validation callback
 * Confirms that payment forms have an assigned HPP
 */
function _freedompay_entityform_type_validate(&$form, &$form_state) {
  if ($form_state['values']['data']['add_payment_processing']) {
    $entityform = _freedompay_create_entityform_by_type($form['#entityform_type']->type);
    $wrapper = freedompay_entityform_wrapper($entityform);
    // Check for the required fields
    if (empty($form_state['values']['data']['hpp'])) {
      form_set_error('add_payment_processing', 'Payment forms require an assigned HPP.');
    } // Looks like a valid form
    else {
      // Use the hpp here
      $hpp = entity_load('freedompay_hpp', array($form_state['values']['data']['hpp']));
      $hpp = reset($hpp);
      $form_state['values']['data']['draftable'] = 1;
      $form_state['values']['data']['draft_redirect_path'] = $hpp->checkout_path;
      $form_state['values']['data']['redirect_path'] = $hpp->checkout_path;
      drupal_set_message('Your payment form settings for drafts and redirect paths were automatically set to the appropriate values.');
    }
  }
}

/**
 * Creates an empty entityform object for field checking
 */
function _freedompay_create_entityform_by_type($type) {
  $entityform = entity_create('entityform', array(
    'type' => $type,
  ));
  return $entityform;
}

/**
 * Loads or retrieves the entityform type as a string
 */
function _freedompay_entityform_type_name() {
  $entityform_type = &drupal_static(__FUNCTION__);
  if (!isset($entityform_type)) {
    if ($entityform = freedompay_entityform()) {
      $entityform_type = $entityform->type;
    }
    elseif ($type_cookie = _freedompay_cookie_get('entityform_type')) {
      $entityform_type = $type_cookie;
    }
  }
  return $entityform_type;
}

function _freedompay_get_checkout_url() {
  $checkout_url = &drupal_static(__FUNCTION__);
  if (!isset($checkout_url)) {
    if ($checkout_url = _freedompay_cookie_get('checkout_url')) {
      return $checkout_url;
    }
  }
  return $checkout_url;
}

/**
 * Get the transaction id
 * - first from a potential url variable
 * - next from the cookie
 */
function _freedompay_get_transaction_id() {
  $transaction_id = &drupal_static(__FUNCTION__);
  if (!isset($transaction_id)) {
    if (isset($_REQUEST['transid'])) {
      $transaction_id = $_REQUEST['transid'];
    }
    elseif ($transaction_id = _freedompay_cookie_get('transaction_id')) {
      return $transaction_id;
    }
  }
  return $transaction_id;
}

function _freedompay_create_freedompay_transaction() {
  $payload = freedompay_checkout_payload();
  if (is_numeric($payload['TransactionTotal']) && $payload['TransactionTotal'] > 0) { // Make sure it's a valid transaction total
    $result = _freedompay_initiate_transaction('createTransaction', json_encode($payload));
    if (!empty($result) && !empty($result['CheckoutUrl'])) {
      _freedompay_cookie_save(['transaction_id' => $result['TransactionId']]);
      _freedompay_cookie_save(['checkout_url' => $result['CheckoutUrl']]);
      return $result;
    } // The transaction failed
    else {
      $entityform = freedompay_entityform();
      watchdog('freedompay', "Failure creating transaction for payment form @entityform_id",
        array(
          '@entityform_id' => $entityform->entityform_id,
        ),
        WATCHDOG_ERROR
      );
    }
  } // Failed to create a valid total, so send the user back to the form
  else {
    $entityform = freedompay_entityform();
    watchdog('freedompay', "Invalid transaction total for payment form @entityform_id",
      array(
        '@entityform_id' => $entityform->entityform_id,
      ),
      WATCHDOG_ERROR
    );
    drupal_set_message(t('There was an error with your request. Please be sure to include a valid amount.'), 'error');
  }
  return NULL;
}

function _freedompay_initiate_transaction($transaction, $payload) {
  $service_url = _freedompay_get_service_url();
  $request_headers = array(
    'Content-Type: application/json',
    'Accept: application/json',
    'Cache-Control: no-cache',
    'Content-Length: ' . strlen($payload)
  );
  $process = curl_init();
  curl_setopt($process, CURLOPT_URL, $service_url . '/' . $transaction);
  curl_setopt($process, CURLOPT_HTTPHEADER, $request_headers);
  curl_setopt($process, CURLOPT_POST, 1);
  curl_setopt($process, CURLOPT_POSTFIELDS, $payload);
  curl_setopt($process, CURLOPT_RETURNTRANSFER, TRUE);
  $response = curl_exec($process);
  $result = json_decode($response, TRUE);
  curl_close($process);
  return $result;
}

function _freedompay_restart_transaction() {
  _freedompay_cookie_delete('transaction_id');
  _freedompay_cookie_delete('checkout_url');
}

function _freedompay_get_service_url() {
  $service_url = (ilr_is_production_site())
    ? 'https://payments.freedompay.com/checkoutservice/checkoutservice.svc'
    : 'https://payments.uat.freedompay.com/checkoutservice/checkoutservice.svc';
  return $service_url;
}

function _freedompay_get_complete_purchase_button($checkout_url) {
  $markup = '<a class="button" href="'.$checkout_url.'">Complete Purchase</a>';
  return $markup;
}

function _freedompay_payments_page() {
  $output[] = FreedompayPayment::adminPage();
  return $output;
}

function _freedompay_invoices_page() {
  $output[] = FreedompayInvoice::adminPage();
  return $output;
}

/**
 * Checks the original invoice amount with the new payload
 * Updates the amount based on a (possibly different) transaction total
 */
function _freedompay_update_invoice($entityform, $data=array()) {
  if ($invoice = FreedompayInvoice::getInvoiceByOrderId($entityform->entityform_id)) {
    foreach ($data as $property => $value) {
      $invoice->{$property} = $value;
    }
    $invoice->save();
  }
}

/**
 * Marks the invoice as paid
 */
function _freedompay_mark_invoice_paid($entityform) {
  $properties = array('paid' => 1);
  _freedompay_update_invoice($entityform, $properties);
}

function _freedompay_get_payment_forms() {
  $payment_forms = [];
  $entityform_types = entityform_get_types();
  foreach ($entityform_types as $name => $entityform_type) {
    if (!empty($entityform_type->data['add_payment_processing'])) {
      $payment_forms[$name] = $entityform_type;
    }
  }
  return $payment_forms;
}

/**
 * Sets the cookies
 */
function _freedompay_set_entityform_cookies($entityform) {
  _freedompay_cookie_save([
    'entityform_url' => current_path(),
    'entityform_id' => $entityform->entityform_id,
    'entityform_type' => $entityform->type,
  ]);
}

function _freedompay_cookie_save(array $values) {
  foreach ($values as $field => $value) {
    setrawcookie('Drupal.payment.' . $field, rawurlencode($value), REQUEST_TIME + 60 * 60 * 1.5, '/');
  }
}

function _freedompay_cookie_get($name) {
  if (isset($_COOKIE['Drupal_payment_' . $name])) {
    return $_COOKIE['Drupal_payment_' . $name];
  }
  return NULL;
}

function _freedompay_cookie_flush() {
  $cookies = ['entityform_id','entityform_type','entityform_url','transaction_id','checkout_url'];
  foreach ($cookies as $key => $name) {
    _freedompay_cookie_delete($name);
  }
}

function _freedompay_cookie_delete($cookie_name) {
  setrawcookie('Drupal.payment.' . $cookie_name, '', REQUEST_TIME - 3600, '/');
}

function _freedompay_get_message($action) {
  $entityform_type = _freedompay_entityform_type_name();
  $message = '';
  switch ($action) {
    case 'c':
      $message = variable_get('freedompay_'.$entityform_type.'_cancel_message', FREEDOMPAY_DEFAULT_CANCEL_MESSAGE);
      break;
    case 'r':
      $message = variable_get('freedompay_'.$entityform_type.'_reject_message', FREEDOMPAY_DEFAULT_REJECT_MESSAGE);
    case 'checkout':
      $message = variable_get('freedompay_'.$entityform_type.'_checkout_message', FREEDOMPAY_DEFAULT_CHECKOUT_MESSAGE);
      break;
  }
  return $message;
}

function _freedompay_redirect($url, $params=array()) {
  drupal_goto($url, $params);
}

function _freedompay_get_order_summary() {
  $summary = '';
  if ($payload = freedompay_checkout_payload()) {
    if (!empty($payload['PurchaseItems'])) {
      $summary = '<ul class="purchase-items">';
      foreach ($payload['PurchaseItems'] as $item) {
        $summary .= '<li class="item">'.$item['Description'].' - <span class="cost">$'.$item['Price'].'</span></li>';
      }
      $summary .= '</ul>';
    }
  }
  return $summary;
}
/**
 * Gets the checkout path of the hpp for the current form
 * Defaults to a path that will likely result in a 404
 */
function _freedompay_get_checkout_path() {
  if($entityform = freedompay_entityform()) {
    $hpp = FreedompayHpp::getPortalForForm($entityform);
  }
  else {
    return 'payment/checkout';
  }
  return $hpp->checkout_path;
}

/**
 * Checks for an existing payment
 * Or whether the form doesn't require payment (ie a free event)
 * @param  [Entityform] $entityform
 * @return [boolean]
 *         Whether the payment process is considered "complete"
 */
function _freedompay_payment_complete($entityform=NULL) {
  if ($transaction_id = _freedompay_get_transaction_id()) {
    return FreedompayPayment::getPaymentByTransactionId($transaction_id);
  }
  elseif ($entityform) {
    // First set the entityform cache
    freedompay_entityform($entityform);
    if (!freedompay_payment_required()) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Completes the checkout process, including invoking hook_freedompay_form_complete().
 */
function _freedompay_complete_checkout() {
  $entityform = freedompay_entityform();
  $wrapper = freedompay_entityform_wrapper($entityform);
  $wrapper->draft = 0;
  $wrapper->save();
  module_invoke_all('freedompay_form_complete', $entityform);
  if(freedompay_payment_required()) {
    _freedompay_mark_invoice_paid($entityform);
  }
  freedompay_redirect_to_entityform_submission($entityform);
  return FREEDOMPAY_TRANSACTION_SUCCESS;
}

/**
 * Checks to see if the payload values are different from the existing transaction
 */
function _freedompay_transaction_payload_changed($transaction, $payload) {
  if (isset($transaction['OriginalRequest'])) {
    $original = $transaction['OriginalRequest'];
    $changes = _freedompay_recursive_array_diff($payload, $original);
    return !empty($changes);
  }// The original request failed, so the payload is different
  return TRUE;
}

function _freedompay_recursive_array_diff($array1, $array2) {
  $diffs = array();
  foreach ($array1 as $key => $value) {
    if (array_key_exists($key, $array2)) {
      if (is_array($value)) {
        $recursive_diffs = _freedompay_recursive_array_diff($value, $array2[$key]);
        if (count($recursive_diffs)) { $diffs[$key] = $recursive_diffs; }
      } else {
        if ($value != $array2[$key]) {
          $diffs[$key] = $value;
        }
      }
    } else {
      $diffs[$key] = $value;
    }
  }
  return $diffs;
}
