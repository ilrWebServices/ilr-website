<?php

/**
 * Implements hook_admin_menu_output_alter().
 * Removes the link to manage menus for anyone without top level menu perms
 * Also removes the node/add/page link, since pages need to be added via 'create sub page'
 */
function ilr_sub_pages_admin_menu_output_alter(&$content) {
  if (!user_access('add top level menu items')) {
    if (_ilr_sub_pages_get_number_of_links_in_toolbar($content['menu'], 'admin/structure') == 1) {
      unset($content['menu']['admin/structure']);
    } // Only remove the menu link and keep the other links
    else {
      unset($content['menu']['admin/structure']['admin/structure/menu']);
    }
    unset($content['menu']['admin/content']['node/add']['node/add/basic-page']);
  }
}

/**
 * Implements hook_permission().
 *
 */
function ilr_sub_pages_permission() {
  return array(
    'add top level menu items' => array(
      'title' => t('Add top level menu items'),
    ),
    'view page advanced menu settings' => array(
      'title' => t('%type_name: View advanced menu settings', array('%type_name' => 'Page')),
    ),
    'create sub page' => array(
      'title' => t('Create sub pages')
    ),
  );
}

/**
 * Implements hook_menu().
 *
 * Add the ability to create pages subordinate to the current one
 *
 * @link http://drupal.org/project/node_clone Contrib module that generically implements this
 */
function ilr_sub_pages_menu() {
  $items = array();

  $items['admin/config/content/subpages'] = array(
    'title' => t('Sub Page Enabled Bundle Settings'),
    'description' => t('Configure content types available for creating as sub pages'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ilr_sub_pages_type_admin'),
    'file' => 'includes/ilr_sub_pages.admin.inc',
    'access arguments' => array('add top level menu items'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['node/%node/sub/type'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ilr_sub_pages_type_form'),
    'title' => 'Choose type of sub page',
    'weight' => 6,
    'type' => MENU_NORMAL_ITEM,
    'access callback' => '_ilr_sub_pages_create_sub_page_access',
    'access arguments' => array(1, 'create sub page'),
    'theme callback' => 'variable_get',
    'theme arguments' => array('admin_theme'),
  );

  $node_type = (isset($_GET['sub_page_type']))
    ? $_GET['sub_page_type']
    : 'basic_page';

  $items['node/%node/sub'] = array(
    'page callback' => 'ilr_sub_pages_create_sub_page',
    'page arguments' => array(1),
    'title' => 'Create sub page',
    'weight' => 6,
    'file' => 'ilr_sub_pages.sub_page.inc',
    'type' => MENU_LOCAL_TASK,
    'access callback' => '_ilr_sub_pages_create_sub_page_access',
    'access arguments' => array(1, 'create sub page', $node_type),
    'theme callback' => 'variable_get',
    'theme arguments' => array('admin_theme'),
  );


  return $items;
}

/**
 * Implements hook_menu_alter().
 * Adds access callback for menu pages
 * Makes order changes to the menu
 */
function ilr_sub_pages_menu_alter(&$items) {
  $items['node/%node/reorder']['title'] = 'Reorder sub pages';
  $items['node/%node/reorder']['weight'] = $items['node/%node/sub']['weight'] + 1;
  $items['node/%node/reorder']['theme callback'] = 'variable_get';
  $items['node/%node/reorder']['theme arguments'] = array('admin_theme');

  $items['admin/structure/menu']['access callback'] = 'ilr_sub_pages_check_permissions';
}

/**
 * Confirms that the user can access top level menu items b/c
 * sub pages require administer menu permissions, but we don't
 * want contributors to manage the menu at admin/structure/menu
 */
function ilr_sub_pages_check_permissions() {
  return user_access('add top level menu items');
}

/**
 * Validation callback for page node form.
 * Restricts the ability to add menu items to the top level.
 * Editing existing top level menu pages should be allowed.
 */
function ilr_sub_pages_node_form_validate($form, &$form_state) {
  $is_setting_top_menu_level = _ilr_sub_pages_is_top_menu_level($form_state);
  $is_editing_node = isset($form_state['node']->nid);
  $was_already_at_top_level = _ilr_sub_pages_was_top_menu_level($form_state);
  if (!user_access('add top level menu items')) {
    // Cannot add a new node to the top level of the menu
    // Cannot move an existing node from second or > level to the top level
    // Can edit nodes that were _already_ at the top menu level

    if (!$is_editing_node && $is_setting_top_menu_level) {
      form_set_error('menu[parent]', t('You may not add this item to the top level of the menu.'));
    }
    else if ($is_editing_node && $is_setting_top_menu_level && !$was_already_at_top_level) {
      form_set_error('menu[parent]', t('You may not move this item to the top level of the menu.'));
    }
  }
}

/**
 * Implements hook_pathauto_alias_alter().
 * Sets the path of child page if the ilr_default_menu_parent has been set
 * Or if it's a subpage enabled bundle and the alias has changed
 */
function ilr_sub_pages_pathauto_alias_alter(&$alias, array &$context) {
  if (isset($context['data']['node'])) {
    $node = $context['data']['node'];
    if ($context['op'] == 'insert' && isset($node->ilr_default_menu_parent)) {
      $alias = _ilr_sub_pages_set_child_alias($node);
    }
    elseif ($context['op'] == 'update' && _ilr_sub_pages_is_child_page($node)) {
      $alias = _ilr_sub_pages_set_child_alias($node);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds a warning notice at the top of the node menu settings form.
 *
 * @see ilr_sub_pages_form_node_form_alter().
 */
function ilr_sub_pages_form_node_type_form_alter(&$form, &$form_state) {
  $message_markup = '<div class="messages warning">';
  $message_markup .= '<p>NOTE: The ILR Sub Pages custom module overrides these settings. All menus are available for all content types.</p>';
  $message_markup .= "</div>\n";
  $form['menu'] = array(
    'options_notice' => array(
      '#markup' => $message_markup,
    )
  ) + $form['menu'];
}

/**
 * Implements hook_form_alter().
 * Sets the menu parent if present
 * Adds the checkbox to hide from the menu
 * Triggers pathauto generation when needed
 */
function ilr_sub_pages_form_node_form_alter(&$form, &$form_state, $form_id) {
  _ilr_sub_pages_override_menu_options($form);
  $view_advanced_menu = user_access('view page advanced menu settings');
  $node = $form['#node'];
  // This element is added by menu module a 'value' type. We override to let user choose.
  $form['menu']['link']['hidden'] = array(
    '#type' => 'checkbox',
    '#title' => t('Hide from menu output'),
    '#description' => t('Check if you would like the page to include the correct breadcrumbs and parent navigation, but not appear in the menu.'),
    '#default_value' => isset($node->menu['hidden']) ? $node->menu['hidden'] : 0,
  );
  // set menu parent item default value if creating sub page
  if (isset($form['#node']->ilr_default_menu_parent)) {
    $form['menu']['link']['parent']['#default_value'] = $node->ilr_default_menu_parent;
    $form['menu']['enabled']['#value'] = TRUE;
    $form['menu']['link']['link_title']['#required'] = TRUE;
  }
  if (!$view_advanced_menu) {
    $form['menu']['enabled']['#disabled'] = TRUE;
    $form['menu']['link']['parent']['#required'] = TRUE;
    // Restricts access to certain menu form fields
    $form['menu']['link']['description']['#access'] = FALSE;
    $form['menu']['link']['weight']['#access'] = FALSE;
    $form['menu']['link']['parent']['#access'] = FALSE;
  }
  // Trigger pathauto on new nodes since child pages can have a different alias than the default pattern
  if (!isset($form['#node']->vid) && _ilr_sub_pages_is_child_page($form['#node'])) {
    $form['path']['pathauto']['#default_value'] = TRUE;
  }
  // Add an additional validation callback to this form
  $form['#validate'][] = 'ilr_sub_pages_node_form_validate';
}

/**
 * Implements hook_module_implements_alter().
 * This ensures that ilr_sub_pages_form_basic_page_node_form_alter runs after
 * the menu module, which is required to alter the menu links
 */
function ilr_sub_pages_module_implements_alter(&$implementations, $hook) {
  if ($hook == 'form_alter' && isset($implementations['ilr_sub_pages'])) {
    $group = $implementations['ilr_sub_pages'];
    unset($implementations['ilr_sub_pages']);
    $implementations['ilr_sub_pages'] = $group;
  }
}

/**
 * Implements hook_node_load()
 *
 * Never allow pathauto to automatically run on existing nodes
 */
function ilr_sub_pages_node_load($nodes, $types) {
  foreach ($nodes as $id => $node) {
    if ($node->type === 'page') {
      $nodes[$id]->path['pathauto'] = FALSE;
    }
  }
}

/**
 * Admin form.
 */
function ilr_sub_pages_type_form($form, &$form_state) {
  $types = node_type_get_names();
  $enabled_bundles = variable_get('ilr_sub_pages_enabled_bundles', _ilr_sub_pages_default_bundles());
  $options = array();
  foreach ($enabled_bundles as $machine_name) {
    if (array_key_exists($machine_name, $types)) {
      $options[$machine_name] = $types[$machine_name];
    }
  }
  $form['sub_page_type'] = array(
    '#type' => 'radios',
    '#options' => $options,
    '#default_value' => 'basic_page',
    '#submit' => 'foo',
    '#title' => t('Which content type do you want for this sub page?'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Create Sub Page',
    '#name' => '',
    '#attributes' => array(
      'class' => array('button'),
    ),
  );
  $form['#action'] = url(str_replace('/type', '', current_path()));
  $form['#method'] = 'get';
  $form['#pre_render'][] = 'ilr_sub_pages_form_modify';

  return $form;
}

function ilr_sub_pages_form_modify($form){
  unset($form['form_token']);
  unset($form['form_build_id']);
  unset($form['form_id']);
  return $form;
}

function _ilr_sub_pages_default_bundles() {
  return array(
    'basic_page' => 'basic_page',
    'channel_page' => 'channel_page',
    'experience_report' => 'experience_report',
    'student_portrait' => 'student_portrait',
  );
}

/**
 * Ensure node is published and user has privileges for sub page form
 */
function _ilr_sub_pages_create_sub_page_access($node, $access_arg, $type=NULL) {
  if (user_access($access_arg)) {
    $menu_record = db_select('menu_links', 'ml')
      ->condition('ml.link_path', 'node/' . $node->nid)
      ->fields('ml', array('menu_name', 'mlid', 'plid'))
      ->execute()
      ->fetchObject();

    if (is_object($menu_record)) {
      if ($menu_record->menu_name != 'main-menu') {
        if ($menu_record->plid == 0) {
          return user_access('add top level menu items');
        }
        return TRUE;
      } // Main menu
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Overrides the menu_parent_options() to include all menus.
 *
 * @see menu_parent_options().
 */
function _ilr_sub_pages_override_menu_options(&$form) {
  $menus = menu_get_menus();
  $available_menus = array();
  foreach ($menus as $key => $menu) {
    $available_menus[$key] = $key;
  }
  $item = array('mlid' => 0);
  $options = _menu_get_options($menus, $available_menus, $item);
  $form['menu']['link']['parent']['#options'] = $options;
}

/**
 * Checks whether the node has a parent link
 * And whether it's one of the ilr_sub_pages_enabled_bundles
 */
function _ilr_sub_pages_is_child_page($node) {
  if (isset($node->plid) || isset($node->menu['plid'])) {
    $enabled_bundles = variable_get('ilr_sub_pages_enabled_bundles', _ilr_sub_pages_default_bundles());
    return in_array($node->type, $enabled_bundles);
  }
  return FALSE;
}

/**
 * Determines whether the parent is the root of the main-menu,
 * or the grandparent is at the root of the sub site menu
 */
function _ilr_sub_pages_is_top_menu_level($form_state) {
  // Menu items are always in the format [menu-name]:0 (i.e. main-menu:0)
  if (isset($form_state['values']['menu']) && $form_state['values']['menu']['enabled']) {
    $menu_info = explode(":", $form_state['values']['menu']['parent']);
    $menu = $menu_info[0];
    $plid = $menu_info[1];
    if ($menu != 'main-menu') {
      $parent = menu_link_load($plid);
      $plid = $parent['plid'];
    }
    return $plid === '0';
  }
  return FALSE;
}

function _ilr_sub_pages_set_child_alias($node) {
  $alias = '';
  if ($plid = $node->menu['plid']) {
    $menu_link = menu_link_load($plid);
    $parent_path = drupal_get_path_alias($menu_link['link_path']);
    $alias = $parent_path . '/' . pathauto_cleanstring($node->title);
  }
  return $alias;
}

/**
 * Uses the $form_state['build_info']['args'] to determine if the page
 * was already at the top level
 */
function _ilr_sub_pages_was_top_menu_level($form_state) {
  $menu = $form_state['build_info']['args'][0]->menu['menu_name'];
  $plid = $form_state['build_info']['args'][0]->menu['plid'];

  if ($menu != 'main-menu') {
    $parent = menu_link_load($plid);
    $plid = $parent['plid'];
  }
  return $plid === '0';
}

/**
 * Checks how many links point to a given path in the toolbar
 */
function _ilr_sub_pages_get_number_of_links_in_toolbar($menu_links, $menu_path) {
  $count = 0;
  foreach ($menu_links[$menu_path] as $child_path => $value) {
    if (strpos($child_path, $menu_path) === 0 && strpos($child_path,'entityforms') == FALSE) { // For some reason, admin/structure/entityforms/list is showing up, so we ignore it too
      $count++;
    }
  }
  return $count;
}
