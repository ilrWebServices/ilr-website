<?php
/**
 * @file
 * Code for the Google Ecommerce Tracking Implementation
 */

/**
 * Implements hook_freedompay_form_complete().
 * Adds the session variable we look for when the entityform loads
 */
function google_ecommerce_tracking_freedompay_form_complete($entityform) {
  if (!ilr_is_production_site()) { // Don't track when testing
    return;
  }
  $_SESSION['google_ecommerce_tracking_entityform_id'] = $entityform->entityform_id;
}

/**
 * Implements hook_entityform_view().
 * Adds the tracking datalayer for Google tag manager if payment was required
 */
function google_ecommerce_tracking_entityform_view($entityform) {
  if (isset($_SESSION['google_ecommerce_tracking_entityform_id'])) {
    // Set the entityform cache
    $entityform = freedompay_entityform($entityform);
    if (freedompay_payment_required()) {
      if ($payload = freedompay_checkout_payload()) {
        _google_ecommerce_tracking_add_datalayer($entityform, $payload);
        unset($_SESSION['google_ecommerce_tracking_entityform_id']);
      }
      else {
        watchdog('google_ecommerce_tracking', "Payload failed to load when attempting to track payment form @entityform_id",
          array(
            '@entityform_id' => $entityform->entityform_id,
          ),
          WATCHDOG_ERROR
        );
      }
    }
    else { // Payment wasn't required
      unset($_SESSION['google_ecommerce_tracking_entityform_id']);
    }
  }
}

function _google_ecommerce_tracking_add_datalayer($entityform, $payload) {
  $invoice = FreedompayInvoice::getInvoiceByOrderId($entityform->entityform_id);
  $hpp = FreedompayHpp::getPortalForForm($entityform);
  $transaction_total = freedompay_transaction_total();
  $data_layer = array();
  $data_layer[] = [
     'transactionId' => $invoice->formatInvoiceNumber(),
     'transactionAffiliation' => $hpp->title,
     'transactionTotal' => $transaction_total,
     'transactionProducts' => _google_ecommerce_tracking_get_products($payload, $invoice->prefix),
  ];

  $script = 'dataLayer=';
  $script .= json_encode($data_layer);

  drupal_add_js($script, array('scope' => 'header', 'type' => 'inline'));
}

function _google_ecommerce_tracking_get_products($payload, $prefix) {
  $products = [];
  if (isset($payload['PurchaseItems'])) {
    foreach ($payload['PurchaseItems'] as $item) {
      $products[] = _google_ecommerce_tracking_format_product($item, $prefix);
    }
  }
  return $products;
}

function _google_ecommerce_tracking_format_product($product, $prefix) {
  return array(
   'sku' => $prefix,
   'name' => $product['Description'],
   'price' => $product['Price'],
   'quantity' => $product['Quantity']
  );
}
