<?php
require_once DRUPAL_ROOT . '/../config/get_secrets.php';

/**
 * Implements hook_mailchimp_accounts_api_key().
 */
function ilr_mailchimp_mailchimp_accounts_api_key() {
  return ilr_mailchimp_api_keys();
}

function ilr_mailchimp_api_keys() {
  global $ILR_SECRETS;
  $keys = array();
  foreach ($ILR_SECRETS['mailchimp'] as $name => $aid_and_key) {
    $aid = key($aid_and_key);
    $keys[$aid] = reset($aid_and_key);
  }
  return $keys;
}

/**
 * Implements hook_mailchimp_automations_entity_options_alter().
 */
function ilr_mailchimp_mailchimp_automations_entity_options_alter(&$options, $automation_entity_label) {
  $options = array(
    '' => t('-- Select --'),
    'entityform' => 'Entityform',
  );
}

/**
 * Implements hook_mailchimp_automations_mergevars_alter().
 */
function ilr_mailchimp_mailchimp_automations_mergevars_alter(&$merge_vars, $automation, $wrapped_automation_entity) {
  if ($automation->label == "Collective Bargaining") {
    if (module_exists('forms')) {
      $first_last_name = _forms_first_last_name_from_full($wrapped_automation_entity->field_full_name->value());
      $merge_vars = array(
        'FNAME' => $first_last_name['first_name'],
        'LNAME' => $first_last_name['last_name'],
        'MMERGE3' => $wrapped_automation_entity->field_job_title->value(),
        'MMERGE4' => $wrapped_automation_entity->field_company->value()
      );
    }
  }
}

/**
 * Implements hook_mailchimp_subscribe_user().
 *
 * Automatically add alumni enews subscribers to eNews group
 */
function ilr_mailchimp_mailchimp_subscribe_user($list_id, $email, $merge_vars) {
  if ($list_id == 'e5742cd707') {
    mailchimp_update_member($list_id, $email, array(), array('cdf4c76a89' => TRUE));
  }

}

function ilr_mailchimp_subscribe_user($account_id, $list_id, $email, $merge_vars=[]) {
  mailchimp_accounts_set_current_mailchimp_context($account_id, 'user', TRUE);
  // Make sure they are not yet subscribed
  if (!mailchimp_is_subscribed($list_id, $email)) {
    $parameters = [
      'status_if_new' => 'subscribed',
      'merge_fields' => $merge_vars,
    ];
    $mc_lists = mailchimp_get_api_object('MailchimpLists');
    $mc_lists->addOrUpdateMember($list_id, $email, $parameters);
  }
}

function ilr_mailchimp_get_mailchimp_segments($list_id) {
  $segments = mailchimp_get_segments($list_id);
  return $segments;
}

function ilr_mailchimp_add_user_to_mailchimp_segment($account_id, $list_id, $email, $segment_name) {
  mailchimp_accounts_set_current_mailchimp_context($account_id, 'user', TRUE);
  $segments = ilr_mailchimp_get_mailchimp_segments($list_id);
  foreach ($segments as $segment) {
    if ($segment->name == $segment_name) {
      $mc_lists = mailchimp_get_api_object('MailchimpLists');
      $mc_lists->addSegmentMember($list_id, $segment->id, $email);
      return TRUE;
    }
  }
  return FALSE;
}
