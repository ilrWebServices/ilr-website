<?php

///////////////////
// Documentation //
///////////////////

/* The Elavon module makes a few assumptions about setting up a form for payments, such as:
  1. The form includes a field_total_cost and the field_h_credit_card_payments field collection.
  2. There is a supporting module for the form which includes at least a few required functions, such as _MODULE_get_entityform_mappings() (see full list in _elavon_get_required_functions_for_payment_processing).
  3. Add module key to _elavon_get_providing_module_by_entityform_type
  4. Add secrets.php application name to _elavon_get_ilr_secrets_key_from_type.
  5. If adding additional required functions, be sure to add them to _elavon_get_required_functions_for_payment_processing().
  6. New forms will need to add their credentials to the ILR secrets file. (secrets.php)
  7. If you've created a new module for a new payment form, enable the module.

  @todo:
    - Consider whether we need to set entityform_type specific SESSIONS. This would prevent loading the wrong entityform draft under certain edge-cases.
*/

require_once DRUPAL_ROOT . '/../config/get_secrets.php';

//////////////////
// Drupal hooks //
//////////////////

/**
 * Implements hook_entity_insert().
 */
function elavon_entityform_insert($entityform) {
  if (_elavon_entityform_is_payment_form($entityform)) {
    _elavon_set_entityform_session($entityform->entityform_id);
  }
}

/**
 * Implements hook_entity_presave().
 * Providing modules are expected to implement their own
 * _MODULE_get_draft_status().
 * @see _ilr_alumni_events_get_draft_status().
 */
function elavon_entityform_presave($entityform) {
  if (_elavon_entityform_is_payment_form($entityform)) {
    $draft_status_function = _elavon_get_modular_function('get_draft_status');
    $entityform->draft = $draft_status_function();
  }
}

/**
 * Implements hook_entityform_previous_submission_alter().
 * Loads the entityform draft if there is one for anonymous users
 */
function elavon_entityform_previous_submission_alter(&$entityform_submission, $entityform_type, $context) {
  if ($previous_submission = _elavon_get_entityform()) {
    if ($entityform_type == $previous_submission->type && $previous_submission->draft == 1) {
      $entityform_submission = $previous_submission;
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 *
 * Base form id = entityform_edit_form
 * Makes sure that the page is being served over SSL
 * Adds submit action for adding special flags to payment forms
 * Removes the Save Draft button
 */
// function elavon_form_alter(&$form, &$form_state, $form_id) {    // Aaron's
function elavon_form_entityform_edit_form_alter(&$form, &$form_state, $form_id) {
  global $is_https;
  if (isset($form['#entity_type']) && $form['#entity_type'] == 'entityform' && _elavon_entityform_type_is_payment_form($form['#bundle'], $form)) {
    if (!$is_https && module_exists('securepages')) {
      securepages_goto(TRUE);
      return FALSE;
    }
    $form['actions']['submit']['#submit'][] = '_elavon_add_payment_flag';
    // Remove the save draft button
    if (isset($form['actions']['save'])) {
      unset($form['actions']['save']);
    }
  }
}

/**
 * Adds form validation callback for payment forms
 */
function elavon_form_entityform_type_form_alter(&$form, &$form_state) {
  $form['#validate'][] = '_elavon_entityform_type_validate';
}

/**
* Implements hook_menu().
*/
function elavon_menu() {
  $items = array();
  $items['elavon/payment/iframe'] = array(
    'title' => "Pay with a Credit Card",
    'page callback' => '_elavon_payment_iframe',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_node_view().
 * Adds the iframe when there is a 'payment' flag
 * Handles payment processing when a response comes back from Elavon
 */
function elavon_node_view($node, $view_mode, $langcode) {
  if ($view_mode == 'full') {
    $response_variables = drupal_get_query_parameters();
    if (isset($response_variables['payment']) && _elavon_get_entityform()) {
      _elavon_replace_payment_form_with_iframe($node);
    } // Check for response from Elavon
    else if (isset($response_variables['ssl_txn_id'])) {
      $fixed_vars = _elavon_fix_response_vars($response_variables);
      $output = '<p>Thank you for your registration. One moment while we update your information.</p>';
      // Save the results
      _elavon_update_entityform_values($fixed_vars);
      // Complete the process
      _elavon_complete_payment_process();
    }
  }
}

//////////////////////
// Custom functions //
//////////////////////

/**
 * Adds a url parameter for triggering the iframe
 * @see elavon_node_view().
 */
function _elavon_add_payment_flag(&$form, &$form_state) {
  $form_state['redirect'][1]['query'] = array(
    'payment' => '1',
  );
}

/**
 * Triggers the form processing from forms.module
 * Initiates the redirect
 */
function _elavon_complete_payment_process($with_layout=0) {
  _forms_process_entityform(_elavon_get_entityform());
  _elavon_redirect_after_response($with_layout);
}

/**
 * Creates an empty entityform object for field checking
 */
function _elavon_create_entityform_by_type($type) {
  $entityform = entity_create('entityform', array(
    'type' => $type,
  ));
  return $entityform;
}

/**
 * Checks whether the form is a payment form
 * @see _elavon_entityform_type_validate().
 */
function _elavon_entityform_is_payment_form($entityform) {
  return _elavon_entityform_type_is_payment_form($entityform->type);
}

/**
 * Checks whether the form is a payment form
 * Entityform types with payment processing have already been validated
 * @see _elavon_entityform_type_validate().
 */
function _elavon_entityform_type_is_payment_form($entityform_type) {
  $entityform_type = entityform_type_load($entityform_type);
  if (isset($entityform_type->data['add_payment_processing'])) {
    return $entityform_type->data['add_payment_processing'];
  }
  return FALSE;
}


/**
 * Validation callback
 * Confirms that payment forms have field_h_credit_card_payments
 */
function _elavon_entityform_type_validate(&$form, &$form_state) {
  if ($form_state['values']['data']['add_payment_processing']) {
    $name = _elavon_entityform_type_name($form['type']['#default_value']);
    // Check that all required functions have been implemented
    $required_functions = _elavon_get_required_functions_for_payment_processing();
    foreach ($required_functions as $key => $function_partial) {
      if (!_elavon_get_modular_function($function_partial)) {
        return form_set_error('add_payment_processing', 'Payment forms require several functions to be implemented. Learn more in the elavon.module code documentation.');
      }
    }

    $entityform = _elavon_create_entityform_by_type($form['#entityform_type']->type);
    $wrapper = _elavon_get_entityform_wrapper($entityform);

    // Check for the required fields
    if (!isset($wrapper->field_h_credit_card_payments) || !isset($wrapper->field_total_cost)) {
      form_set_error('add_payment_processing', 'Payment forms require both the field_total_cost and the field_h_credit_card_payments field collection. You can read more documentation in the elavon.module');
    } // Looks like a valid form
    else {
      $form_state['values']['data']['draftable'] = 1;
      $form_state['values']['data']['draft_redirect_path'] = '[current-page:url]';
      $form_state['values']['data']['redirect_path'] = '[current-page:url]';
      drupal_set_message('Your payment form settings for drafts and redirect paths were automatically set to the appropriate values.');
    }
  }
}

/**
 * Fixes the ssl_approval_code query param from Elavon,
 * which breaks due to our "layout" param
 */
function _elavon_fix_response_vars($variables) {
  $approval_code = substr($variables['layout'], strpos($variables['layout'], "=") + 1);
  $variables['ssl_approval_code'] = $approval_code;
  unset($variables['layout']);
  return $variables;
}

/**
 * Generates the form markup that gets auto-posted to Elavon
 */
function _elavon_generate_elavon_form_markup() {
  $markup = '<form id="post_pf1" METHOD="POST" action="https://www.myvirtualmerchant.com/VirtualMerchant/process.do">';
  $inputs = _elavon_get_form_inputs();
  foreach ($inputs as $key => $value) {
    switch ($key) {
      case 'ssl_amount':
      case 'ssl_invoice_number':
      case 'ssl_description':
        $function = _elavon_get_modular_function($key);
        $value = $function();
        break;
      default:
        if (strpos($value, 'field_') === 0) {
          $value = _elavon_get_entityform_value($value);
        }
        break;
    }
    $markup .= '<input type="hidden" name="'.$key.'" value="'.$value.'">';
  }
  $markup .= '<input id="sendIt" type="submit" name="submit" value="One moment..." />';
  $markup .= "</form>";
  return $markup;
}

/**
 * Runs a query for all entityforms with data in field_ssl_amount
 * and a transaction id that is not the test value
 */
function _elavon_get_current_invoice_count_by_type($type) {
  $query = db_select('entityform', 'ef');
  $query->fields('ef', array('entityform_id','type'));
  $query->leftJoin('field_data_field_h_credit_card_payments', 'ftc', 'ftc.entity_id = ef.entityform_id');
  $query->leftJoin('field_data_field_ssl_amount', 'fdsa', 'fdsa.entity_id = ftc.field_h_credit_card_payments_value');
  $query->leftJoin('field_data_field_ssl_txn_id', 'fdtxid', 'fdtxid.entity_id = ftc.field_h_credit_card_payments_value');
  $query->isNotNull('field_ssl_amount_value');
  $query->condition('field_ssl_txn_id_value', '00000000-0000-0000-0000-00000000000','!=');
  $query->condition('ef.type', $type, '=');
  $results = $query->execute()->fetchAll();
  return count($results);
}

/**
 * Determines if the entityform should be in draft mode
 * APPROVED transactions are not drafts
 * Note that this function can be overridden by modules implementing elavon forms,
 * such as ilr_alumni_events (@see _ilr_alumni_events_get_draft_status())
 */
function _elavon_get_draft_status() {
  $is_draft = 1;
  if ($entityform = _elavon_get_entityform()) {
    $result = _elavon_get_field_collection_data('field_ssl_result_message');
    $is_draft = ($result == 'APPROVED') ? 0 : 1;
  }
  return $is_draft;
}

function _elavon_get_elavon_credentials() {
  global $ILR_SECRETS;
  $type = _elavon_entityform_type_name();
  $secret_key = _elavon_get_ilr_secrets_key_from_type($type);
  return array(
    "ssl_merchant_id" => $ILR_SECRETS['elavon'][$secret_key.'merchant_id'],
    "ssl_user_id" => $ILR_SECRETS['elavon'][$secret_key.'user_id'],
    "ssl_pin" => $ILR_SECRETS['elavon'][$secret_key.'pin'],
  );
}

/**
 * Loads or retrieves the entityform object
 */
function _elavon_get_entityform() {
  $entityform = &drupal_static('elavon_entityform');
  if (!isset($entityform)) {
    if (isset($_SESSION['elavon_entityform_id'])) {
      $entityform = entityform_load($_SESSION['elavon_entityform_id']);
    }
  }
  return $entityform;
}

/**
 * Maps elavon keys to field values
 */
function _elavon_get_entityform_mapping($elavon_key) {
  $mapping_function = _elavon_get_modular_function('get_entityform_mappings');
  $mappings = $mapping_function();
  // Check to see if the key is in the mapping array keys
  if (array_key_exists($elavon_key, $mappings)) {
    return $mappings[$elavon_key];
  }
  return NULL;
}

/**
 * Loads or retrieves the entityform type as a string
 */
function _elavon_entityform_type_name($name=NULL) {
  $entityform_type = &drupal_static(__FUNCTION__);
  if (!isset($entityform_type)) {
    if (isset($_SESSION['elavon_entityform_id'])) {
      $entityform = entityform_load($_SESSION['elavon_entityform_id']);
      $entityform_type = $entityform->type;
    }
    else {
      if ($name) {
        $entityform_type = $name;
      }
    }
  }
  return $entityform_type;
}

/**
 * Takes a field name key and returns its value
 */
function _elavon_get_entityform_value($key) {
  $wrapper = _elavon_get_entityform_wrapper();
  if (isset($wrapper->{$key})) {
    return $wrapper->{$key}->value();
  }
  return '';
}

/**
 * Creates or retrieves an entitymetadata wrapper for the form
 */
function _elavon_get_entityform_wrapper($entityform=NULL) {
  $wrapper = &drupal_static(__FUNCTION__);
  if (!isset($wrapper)) {
    if ($entityform) {
      $wrapper = entity_metadata_wrapper('entityform', $entityform);
    }
    else if ($entityform = _elavon_get_entityform()) {
      $wrapper = entity_metadata_wrapper('entityform', $entityform);
    }
  }
  return $wrapper;
}

/**
 * Getter for field collection data
 */
function _elavon_get_field_collection_data($field_name) {
  $wrapper = _elavon_get_entityform_wrapper();
  if ($wrapper->field_h_credit_card_payments->value()) {
    return $wrapper->field_h_credit_card_payments->{$field_name}->value();
  }
  return NULL;
}

/**
 * Creates or retrieves a field_collection wrapper
 * Required by _elavon_set_field_collection_data
 */
function _elavon_get_field_collection_wrapper() {
  $wrapper = &drupal_static(__FUNCTION__);
  if (!isset($wrapper)) {
    $collection = entity_create('field_collection_item', array('field_name' => 'field_h_credit_card_payments'));
    $collection->setHostEntity('entityform', _elavon_get_entityform());
    $wrapper = entity_metadata_wrapper('field_collection_item', $collection);
  }
  return $wrapper;
}

/**
 * Form input keys expected by elavon
 */
function _elavon_get_form_inputs() {
  $mapping_function = _elavon_get_modular_function('get_entityform_mappings');
  $credentials_function = _elavon_get_modular_function('get_elavon_credentials');

  return array_merge(
    $mapping_function(),
    $credentials_function(),
    _elavon_get_global_inputs()
  );
}

/**
 * Create an array of inputs that all elavon forms need
 * That are not also included in the entityform
 */
function _elavon_get_global_inputs() {
  return array(
    "ssl_receipt_link_method" => 'REDG',
    "ssl_receipt_apprvl_method" => 'REDG',
    "ssl_receipt_decl_method" => 'REDG',
    "ssl_receipt_link_url" => _elavon_get_response_url(),
    'ssl_test_mode' => _elavon_test_value(),
    "ssl_salestax" => '0',
    'ssl_cvv2cvc2_indicator' => '1',
    'ssl_show_form' => 'true',
    "ssl_transaction_type" => 'ccsale',
    'ssl_result_format' => 'HTML',
    'ssl_description' => 'see _elavon_ssl_description',
  );
}

/**
 * Checks for the existence of a parent_path query param
 */
function _elavon_get_iframe_parent_path() {
  $url = '';
  $params = drupal_get_query_parameters();
  if (isset($params['parent_path'])) {
    $url = $params['parent_path'];
  }
  return $url;
}

/**
 * Maps the entityform name to the credentials key in ILR_SECRETS
 */
function _elavon_get_ilr_secrets_key_from_type($type) {
  $mappings = array(
    'ilr_alumni_association_event_reg' => 'alumni_registration_',
    'forensics_debate_camp_payment' => 'forensics_registration_',
  );
  return $mappings[$type];
}

/**
 * Retrieves a function from a providing module, if it exists
 * Otherwise, returns this module's version
 * Required modular functions @see _elavon_get_required_functions_for_payment_processing():
 * _MODULE_get_entityform_mappings()
 * _MODULE_ssl_invoice_number()
 * Optional functions:
 * _MODULE_ssl_amount()
 * _MODULE_ssl_description()
 */
function _elavon_get_modular_function($partial_name) {
  $entityform_type = _elavon_entityform_type_name();
  $provider = _elavon_get_providing_module_by_entityform_type($entityform_type);
  $function = '_' . $provider . '_' . $partial_name;
  if (function_exists($function)) {
    return $function;
  } // See if it exists within this module
  else if (function_exists("_elavon_$partial_name")) {
    return "_elavon_$partial_name";
  } // Throw an error
  else {
    watchdog('elavon', "Function @function_name has not been implemented yet for this forms of type @entityform_type",
      array(
        '@function_name' => $partial_name,
        '@entityform_type' => $entityform_type,
      ),
      WATCHDOG_ERROR
    );
  }
  return NULL;
}

/**
 * Creates a string for payment details if applicable
 */
function _elavon_get_payment_details_for_email($entityform) {
  _elavon_set_entityform($entityform);
  $total = _elavon_get_field_collection_data('field_ssl_amount');
  $invoice_number = _elavon_get_field_collection_data('field_transinvoicenum');
  $details = ($total > 0)
    ? "Your credit card has been charged \$$total, and the invoice number is $invoice_number. Please retain this for your records.\n"
    : '';
  return $details;
}

/**
 * Returns the module that provides additional functionality
 * @see _elavon_get_modular_function() for required and optional functions
 */
function _elavon_get_providing_module_by_entityform_type($type) {
  switch ($type) {
    case 'ilr_alumni_association_event_reg':
      $module = 'ilr_alumni_events';
      break;
    case 'forensics_debate_camp_payment':
      $module = 'forensics_payments';
      break;
    default:
      $module = 'elavon';
  }
  return $module;
}

/**
 * Creates the response url based on the iframe parent url
 */
function _elavon_get_response_url() {
  global $base_url;
  $path = _elavon_get_iframe_parent_path();
  return $GLOBALS['base_url'] . '/' . $path .'?layout=0';
}

/**
 * A list of required functions that need to be implemented for a form to process payments
 * @see [description]
 */
function _elavon_get_required_functions_for_payment_processing() {
  return array(
    'get_entityform_mappings',
    'ssl_invoice_number',
  );
}

/**
 * Returns a boolean based on whether it should be a test
 * In order to test the form, you add ?test=1 to the url,
 * ie: http://www.ilr-website.dev/alumni/events/registration?test=1
 */
function _elavon_is_test() {
  if ( isset($_GET['test']) && $_GET['test'] == '1' ) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Default that payment forms are incomplete until
 * a successful payment has been made
 */
function _elavon_payment_form_complete() {
  return FALSE;
}

/**
 * Add any logic needed for all Elavon payment forms here.
 * Otherwise, form-specific errors are handled in the providing module
 * @see _ilr_alumni_events_payment_form_errors().
 */
function _elavon_payment_form_errors() {
  return FALSE;
}

/**
 * Page callback from hook_menu().
 */
function _elavon_payment_iframe() {
  $output = _elavon_generate_elavon_form_markup();
  drupal_add_js(
    'jQuery(document).ready(function () { jQuery("#sendIt").click(); });',
    array('type' => 'inline', 'scope' => 'footer')
  );
  return $output;
}

/**
 * Creates the iframe if there are no errors
 * and the payment form is needed.
 */
function _elavon_payment_page() {
  $output = '';
  $payment_form_errors = _elavon_get_modular_function('payment_form_errors');
  $payment_form_complete = _elavon_get_modular_function('payment_form_complete');
  if ($errors = $payment_form_errors()) {
    $output = $errors;
  } // Check whether they need the payment form (e.g. only ordering free tickets)
  else if ($payment_form_complete()) {
    _elavon_complete_payment_process(1);
  } // Load the payment page
  else {
    $parent_path = current_path();
    // Load the page that posts to virtualmerchant.do
    $url = '/elavon/payment/iframe?parent_path='.$parent_path.'&layout=0';
    if (_elavon_is_test()) {
      $url .= '&test=1';
    }
    $output = '<iframe src="'.$url.'" width="100%" height="1000" ></iframe>';
  }
  return $output;
}

/**
 * Redirects the user after the entityform values are updated
 * with their registration info from Elavon
 */
function _elavon_redirect_after_response($with_layout=0) {
  if (isset($_SESSION['elavon_entityform_id'])) {
    $eid = $_SESSION['elavon_entityform_id'];
    $wrapper = _elavon_get_entityform_wrapper();
    $confirmation_url = _entityform_type_get_confirm_url($wrapper->type->value()->type);
    $params = array(
      'query' => array(
        'entityform_id' => $eid,
        'layout' => $with_layout,
      ),
    );
    // Keep entityform from denying access
    $_SESSION['entityform_submission'] = $eid;
    unset($_SESSION['elavon_entityform_id']);
    drupal_goto($confirmation_url, $params);
  }
}

/**
 * Remove the body and the field_registration_form_type (if it exists)
 */
function _elavon_replace_payment_form_with_iframe(&$node) {
  unset($node->content['body']);
  if (isset($node->content['field_registration_form_type'])) {
    unset($node->content['field_registration_form_type']);
  }
  $node->content['iframe'] = array(
    '#markup' => _elavon_payment_page(),
    '#weight' => 10,
  );
}

/**
 * Adds the entityform to the cache
 */
function _elavon_set_entityform($entityform) {
  drupal_static_reset('elavon_entityform');
  $cached_entityform = &drupal_static('elavon_entityform');
  $cached_entityform = $entityform;
  return $cached_entityform;
}

/**
 * Sets the Sesssion id
 */
function _elavon_set_entityform_session($entityform_id) {
  $_SESSION['elavon_entityform_id'] = $entityform_id;
}

/**
 * Setter for the field collection data
 */
function _elavon_set_field_collection_data($field_name, $value) {
  $wrapper = _elavon_get_field_collection_wrapper();
  $wrapper->{$field_name}->set($value);
  $wrapper->save();
}

/**
 * Returns the value of field_total_cost
 */
function _elavon_ssl_amount() {
  $wrapper = _elavon_get_entityform_wrapper();
  return $wrapper->field_total_cost->value();
}

/**
 * Returns the node title based on the iframe parent path
 */
function _elavon_ssl_description() {
  $parent_path = _elavon_get_iframe_parent_path();
  $uri_as_array = explode('/', $parent_path);
  if (count($uri_as_array)) {
    $nid = end($uri_as_array);
    $node = node_load($nid);
    return $node->title;
  }
  return '';
}

/**
 * Elavon wants a string, which we return here
 */
function _elavon_test_value() {
  return (_elavon_is_test()) ? 'true' : 'false';
}

/**
 * Updates the entityform values based on what is returned
 * from the payment gateway
 */
function _elavon_update_entityform_values($variables) {
  $wrapper = _elavon_get_entityform_wrapper();
  foreach ($variables as $elavon_key => $value) {
    if ($field_name = _elavon_get_entityform_mapping($elavon_key)) {
      if ($field_name == 'field_ssl_card_number') {
        // Remove all but first two characters of CC #
        $value = $variables[$elavon_key] = substr($value, 0, 2);
      }
      if (isset($wrapper->{$field_name})) {
        $wrapper->{$field_name}->set($value);
      } // Check the field collection
      else if (isset($wrapper->field_h_credit_card_payments->{$field_name})) {
        _elavon_set_field_collection_data(
          $field_name,
          $value
        );
      }
    }
  }
  // Set the total cost and the response_data
  $wrapper->field_total_cost->set($variables['ssl_amount']);
  _elavon_set_field_collection_data(
    'field_ssl_response_data',
    serialize($variables)
  );
  // Remove the "draft" setting on the entityform
  $wrapper->draft = 0;
  $wrapper->save();
}
