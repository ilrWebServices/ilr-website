<?php

//////////////////
// Drupal Hooks //
//////////////////

/**
* Implements hook_block_info().
*/
function ilr_alumni_events_block_info($delta = '') {
  $blocks['alumni_event_attendees'] = array(
    'info' => "Alumni Event Attendees",
  );
  return $blocks;
}

/**
* Implements hook_block_view().
*/
function ilr_alumni_events_block_view($delta = '') {
  $block = array(
    'subject' => "See Who's Coming",
    'content' => _ilr_alumni_events_attendee_view(),
  );

  return $block;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ilr_alumni_events_form_ilr_alumni_association_event_reg_entityform_edit_form_alter(&$form, &$form_state) {

  $form['field_total_cost'][LANGUAGE_NONE][0]['#markup'] = '<label>Total Cost</label><p><span class="total-cost">0</span></p>';

  drupal_add_js(drupal_get_path('module','ilr_alumni_events') . '/ilr_alumni_events.js', array('type' => 'file', 'scope' => 'footer'));

  $wrapper = _ilr_alumni_events_node_wrapper();
  drupal_add_js(array(
    'ilr_alumni_events' => array(
      'memberPrice' => $wrapper->field_aa_member_price->value(),
    )),
    'setting'
  );

  // Figure out how many tickets remain; total_tickets = 0 means there is no limit
  $total_tickets = $wrapper->field_total_tickets->value();
  if ($total_tickets > 0) {
    $tickets_remaining = _ilr_alumni_events_get_remaining_ticket_count($total_tickets);

    // Add info to the reg page to let people know the number of remaining tickets
    $form['#groups']['group_reservations']->format_settings['instance_settings']['description'].= "<br>$tickets_remaining tickets available";

    // If number of tickets remaining is less than the max that normally shows up
    // in the dropdown, change the max in the dropdown.
    $normal_max = 10;
    if ($normal_max > $tickets_remaining) {
      for ($i=$normal_max; $i>$tickets_remaining; $i--) {
        unset($form['field_tickets_for_aa_members']['und']['#options'][$i]);
      }
    }

    // Hide the non-member tickets field in the form the user sees
    $form['field_tickets_for_non_members']['#access'] = FALSE;
  }
}

/**
 * Implements hook_preprocess_hook()
 */
function ilr_alumni_events_preprocess_node(&$variables) {
  if ($variables['type'] == 'registration_page') {
    $wrapper = _ilr_alumni_events_node_wrapper();
    // total_tickets = 0 means there is no limit
    $total_tickets = $wrapper->field_total_tickets->value();
    if ($total_tickets > 0) {
      $tickets_remaining = _ilr_alumni_events_get_remaining_ticket_count($total_tickets);
      if ($tickets_remaining < 1) {
        unset($variables['content']['field_registration_form_type']);
        $variables['content']['field_registration_form_type']['#markup'] =
          '<p>This event is sold out.</p>';
      }
    }
  }
}


///////////////////////////////
// Module-Specific functions //
///////////////////////////////

/**
* View callback for attendee block
* @see ilr_alumni_events_block_view()
*/
function _ilr_alumni_events_attendee_view() {
  $node = menu_get_object();
  if ($attendees = _ilr_alumni_events_get_event_attendees($node)) {
    $markup = "<ul class=\"attendees\">\n";
    foreach ($attendees as $key => $fields) {
      $entityform = entityform_load($key);
      $wrapper = entity_metadata_wrapper('entityform', $entityform);
      $markup .= _ilr_alumni_events_get_attendee_markup($wrapper);
      if ($wrapper->field_attendee_list_guests->value() == 1) {
        if ($guests = $wrapper->field_guests->value()) {
          $markup .= _ilr_alumni_events_get_guest_markup($wrapper);
        }
      }
    }
    $markup .= "</ul>";
    $block['content'] = array(
      '#markup' => $markup,
    );
  }
  else {
    // No one has agreed to show their info for this event, so don't render the block
    $block = array();
  }
  return $block;
}

/**
 * Adds the class year to the markup
 * @todo Consider formatting the year,
 * since it's being input as text
 */
function _ilr_alumni_events_format_attendee_class_year($wrapper) {
  $class_year = $wrapper->field_year_as_text->value(array('sanitize' => TRUE));
  if (!empty($class_year)) {
    $year = $class_year;
  }
  return (!empty($class_year)) ? ', ' . $class_year : '';
}

/**
 * Converts form first and last name to list items
 */
function _ilr_alumni_events_get_attendee_markup($wrapper) {
  $name = $wrapper->field_first_name->value(array('sanitize' => TRUE));
  $name .= ' ' . $wrapper->field_last_name->value(array('sanitize' => TRUE));
  $class_year = _ilr_alumni_events_format_attendee_class_year($wrapper);
  return "  <li>$name$class_year</li>\n";
}

/**
 * Determines if the entityform should be in draft mode
 *   - Free events are not drafts
 *   - APPROVED transactions are not drafts
 * Note: Called from elavon module, so no need to load it here
 */
function _ilr_alumni_events_get_draft_status() {
  $is_draft = 1;
  if ($wrapper = _ilr_alumni_events_get_entityform_wrapper() && _ilr_alumni_events_ordered_tickets()) {
    if (_ilr_alumni_events_is_free_event()) {
      $is_draft = 0;
    }
    else {
      $result = _elavon_get_field_collection_data('field_ssl_result_message');
      $is_draft = ($result == 'APPROVED') ? 0 : 1;
    }
  }
  return $is_draft;
}

/**
 * Maps the elavon keys to the entityform field names
 */
function _ilr_alumni_events_get_entityform_mappings() {
  $mappings = &drupal_static(__FUNCTION__);
  if (!isset($mappings)) {
    $mappings = array(
      "ssl_first_name" => 'field_first_name',
      "ssl_last_name" => 'field_last_name',
      "ssl_avs_address" => 'field_address_line_1',
      "ssl_address2" => 'field_address_line_2',
      "ssl_city" => 'field_city',
      "ssl_state" => 'field_state_province',
      'ssl_company' => 'field_company',
      "ssl_avs_zip" => 'field_zip_code',
      "ssl_phone" => 'field_phone',
      'ssl_email' => 'field_email',
      'ssl_amount' => 'field_ssl_amount',
      'ssl_approval_code' => 'field_ssl_approval_code',
      'ssl_card_number' => 'field_ssl_card_number', // Just first 2 digits
      'ssl_invoice_number' => 'field_transinvoicenum',
      'ssl_result_message' => 'field_ssl_result_message',
      'ssl_txn_id' => 'field_ssl_txn_id',
      'ssl_txn_time' => 'field_ssl_txn_time',
    );
  }
  return $mappings;
}

/**
 * Wrapper function for _elavon_get_entityform_wrapper().
 */
function _ilr_alumni_events_get_entityform_wrapper() {
  if (module_exists('elavon')) {
    return _elavon_get_entityform_wrapper();
  }
  return NULL;
}

/**
 * Creates an EntityFieldQuery to get completed registrations
 * who have agreed to be added to the form
 * **NOTE** We ignore users added guest info but not their own
 */
function _ilr_alumni_events_get_event_attendees($node) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'entityform')
    ->entityCondition('bundle', 'ilr_alumni_association_event_reg')
    ->propertyCondition('draft', 0)
    ->fieldCondition('field_attendee_list', 'value', '1', '=')
    ->fieldCondition('field_referenced_node', 'target_id', $node->nid);
  $result = $query->execute();

  if (isset($result['entityform'])) {
    $entityform_ids = array_keys($result['entityform']);
    $attendees = entity_load('entityform', $entityform_ids);
    return $attendees;
  }
  return NULL;
}

/**
 * Converts guest info from the entityform to list items
 */
function _ilr_alumni_events_get_guest_markup($wrapper) {
  $output = '';
  $guest_data = $wrapper->field_guests->value(array('sanitize' => TRUE));
  $guest_array = explode("\n", $guest_data);
  foreach ($guest_array as $key => $line) {
    $info = preg_replace("/\r|\n/", "", $line);
    $output .= "  <li>$info</li>\n";
  }
  return $output;
}

function _ilr_alumni_events_get_member_cost() {
  $node_wrapper = _ilr_alumni_events_node_wrapper();
  return $node_wrapper->field_aa_member_price->value();
}

/**
 * Get count of remaining tickets
 */
function _ilr_alumni_events_get_remaining_ticket_count($tot) {
  $node = menu_get_object();
  $tickets_sold_total = _ilr_alumni_events_get_total_tickets_sold($node);
  $tickets_remaining = $tot - $tickets_sold_total;
  return $tickets_remaining;
}

/**
 * Creates an EntityFieldQuery to get total tickets sold
 */
function _ilr_alumni_events_get_total_tickets_sold($node) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'entityform')
    ->entityCondition('bundle', 'ilr_alumni_association_event_reg')
    ->propertyCondition('draft', 0)
    ->fieldCondition('field_tickets_for_aa_members', 'value', '0', '>')
    ->fieldCondition('field_referenced_node', 'target_id', $node->nid);
  $result = $query->execute();

  $tickets_sold_total = 0;

  if (isset($result['entityform'])) {
    $entityform_ids = array_keys($result['entityform']);
    $tickets = entity_load('entityform', $entityform_ids);
    foreach ($tickets as $key => $fields) {
      $entityform = entityform_load($key);
      $wrapper = entity_metadata_wrapper('entityform', $entityform);
      $tickets_sold_total += $wrapper->field_tickets_for_aa_members->value();
    }
  }
  return $tickets_sold_total;
}

/**
 * Either a completely free event, or free for members
 * @return [type] [description]
 */
function _ilr_alumni_events_is_free_event() {
  return _ilr_alumni_events_ssl_amount() === 0;
}

function _ilr_alumni_events_member_ticket_count() {
  if ($entityform_wrapper = _ilr_alumni_events_get_entityform_wrapper()) {
    return $entityform_wrapper->field_tickets_for_aa_members->value();
  }
  return 0;
}

/**
 * Creates or retrieves an entitymetadata wrapper for the node
 * on which the entityform has been placed
 */
function _ilr_alumni_events_node_wrapper($node=NULL) {
  $wrapper = &drupal_static(__FUNCTION__);
  if (!isset($wrapper)) {
    if (!$node && $entityform_wrapper = _ilr_alumni_events_get_entityform_wrapper()) {
      if(isset($entityform_wrapper->field_referenced_node)) {
        $node = $entityform_wrapper->field_referenced_node->value();
      }
      else {
        watchdog('ilr_alumni_events', "There was an error trying to load the referenced node for @entityform_type",
            array(
              '@entityform_type' => $entityform_wrapper->type->value()->type,
            ),
            WATCHDOG_ERROR
          );
      }
    }
    else {
      $node = menu_get_object();
    }
    $wrapper = entity_metadata_wrapper('node', $node);
  }
  return $wrapper;
}

/**
 * Confirm that they ordered at least one ticket
 */
function _ilr_alumni_events_ordered_tickets() {
  return _ilr_alumni_events_member_ticket_count() > 0;
}

/**
 * Checks for the free events passthrough
 * @see _elavon_payment_page()
 */
function _ilr_alumni_events_payment_form_complete() {
  $is_complete = FALSE;
  if (_ilr_alumni_events_ordered_tickets() && _ilr_alumni_events_is_free_event()) {
    _ilr_alumni_events_process_free_event();
    $is_complete = TRUE;
  }
  return $is_complete;
}

/**
 * Confirms that they ordered tickets
 * @see _elavon_payment_page()
 */
function _ilr_alumni_events_payment_form_errors() {
  $errors = FALSE;
  if (!_ilr_alumni_events_ordered_tickets()) {
    $errors = '<p>Sorry, but there was an error processing your request. Are you sure you chose the number of tickets you wanted? Please hit your back button, choose how many tickets you want to purchase, and submit your registration again.</p>';
  }
  return $errors;
}

function _ilr_alumni_events_process_free_event() {
  $wrapper = _ilr_alumni_events_get_entityform_wrapper();
  $wrapper->draft = 0;
  $wrapper->field_total_cost->set('No payment required');
  $wrapper->save();
}

/**
 * Calculates the amount to be processed based on the values
 * set for the node upon which the form lives
 */
function _ilr_alumni_events_ssl_amount() {
  if (_ilr_alumni_events_ordered_tickets()) {
    $member_tickets = _ilr_alumni_events_member_ticket_count();
    $member_cost = _ilr_alumni_events_get_member_cost();
    return $member_tickets * $member_cost;
  }
  return NULL;
}

/**
 * Returns a unique invoice number for the registration
 * Based on the number of completed, paid registrations
 */
function _ilr_alumni_events_ssl_invoice_number() {
  $prefix = 'alev';
  $invoice_count = _elavon_get_current_invoice_count_by_type('ilr_alumni_association_event_reg');
  $offset = 700; // Incremented from the old system
  // Pad the string to 6 places
  $invoice_number = str_pad($invoice_count + $offset, 6, '0', STR_PAD_LEFT);
  return "alev$invoice_number";
}
