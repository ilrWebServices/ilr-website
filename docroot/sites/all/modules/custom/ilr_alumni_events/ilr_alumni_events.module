
<?php

require_once DRUPAL_ROOT . '/../config/get_secrets.php';

define('PAYMENT_PAGE', 'alumni/events/registration');
define('PAYMENT_IFRAME', 'alumni/events/iframe');
define('RESPONSE_PAGE', 'alumni/events/response');


/**
 * Attempts to load the entityform draft if there is a SESSION
 */
function ilr_alumni_events_node_view($node, $view_mode) {
  if ($node->type == 'registration_page' && $view_mode == 'full') {
    if (isset($_SESSION['ilr_alumni_events_entityform_id'])) {
      $wrapper = entity_metadata_wrapper('node', $node);
      if ($wrapper->field_registration_form->type->value() == 'ilr_alumni_association_event_reg') {
        unset($node->content['field_registration_form']);
        $form = _ilr_alumni_events_registration_form();
        $node->content['registration_form'] = array(
          '#markup' => drupal_render($form),
          '#weight' => 10,
        );
      }
    }
  }
}

/**
 * Implements hook_entity_presave().
 */
function ilr_alumni_events_entityform_presave($entityform) {
  if ($entityform->type == 'ilr_alumni_association_event_reg') {
    $wrapper = _ilr_alumni_events_entityform_wrapper($entityform);
    $flag = $wrapper->field_year_as_text->value();
    if (empty($flag)) {
      $entityform->draft = 1;
    }
  }
}

/**
 * Implements hook_entity_insert().
 */
function ilr_alumni_events_entityform_insert($entityform) {
  if ($entityform->type == 'ilr_alumni_association_event_reg') {
    $_SESSION['ilr_alumni_events_entityform_id'] = $entityform->entityform_id;
  }
}

/**
* Implements hook_menu().
*/
function ilr_alumni_events_menu() {
  $items = array();
  $items[PAYMENT_PAGE] = array(
    'title' => 'Step 2 of 2: Event Payment',
    'page callback' => '_ilr_alumni_events_payment_page',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items[PAYMENT_IFRAME] = array(
    'title' => "Alumni Events Payment iframe",
    'page callback' => '_ilr_alumni_events_payment_iframe',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items[RESPONSE_PAGE] = array(
    'title' => "Alumni Event Registration Complete",
    'page callback' => '_ilr_alumni_events_payment_response',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Process the response from the gateway
 * @todo
 *   - update changed values to the entityform
 *   - save additional result fields:  ssl_amount, ssl_approval_code, ssl_card_number (1st 2 digits), ssl_invoice_number (should already be saved), ssl_result_message, ssl_status, ssl_txn_id, ssl_txn_time
 *   - Display message and field results
 */
function _ilr_alumni_events_payment_response() {
  $output = '<p>Thank you for your registration. One moment while we update your information.</p>';
  $response_variables = drupal_get_query_parameters();
  // Save the results
  _ilr_alumni_events_update_entityform_values($response_variables);

  // Redirect to the entityform success page
  _ilr_alumni_events_redirect_after_response();
  return $output;
}

/**
 * Redirects the user after the entityform values are updated
 * with their registration info from Elavon
 * @see _ilr_alumni_events_payment_response()
 */
function _ilr_alumni_events_redirect_after_response() {
  // Redirect the user to the thank you page
  $wrapper = _ilr_alumni_events_entityform_wrapper();
  $confirmation_url = _entityform_type_get_confirm_url($wrapper->type->value());
  drupal_goto($confirmation_url);
}

/**
 * Sets up bare-bones template for the elavon form iframe
 * @see _ilr_alumni_events_payment_page()
 */
function ilr_alumni_events_preprocess_page(&$variables) {
  if ( isset($_GET['elavon']) && $_GET['elavon'] == 1 ) {
    $variables['theme_hook_suggestions'][] = 'page__elavon';
  }
}

/**
 * The page callback function defined in hook_menu().
 */
function _ilr_alumni_events_payment_page() {
  $output = '';
  if (!empty($_SESSION['ilr_alumni_events_entityform_id'])) {
    // Load the page that posts to virtualmerchant.do
    $output = '<iframe src="/alumni/events/iframe?elavon=1" width="100%" height="1000" />';
  }
  return $output;
}

function _ilr_alumni_events_payment_iframe() {
  $output = '';
  if (!empty($_SESSION['ilr_alumni_events_entityform_id'])) {
    $output = _ilr_alumni_events_generate_elavon_form_markup();
    drupal_add_js(
      'jQuery(document).ready(function () { jQuery("#sendIt").click(); });',
      array('type' => 'inline', 'scope' => 'footer')
    );
  }
  return $output;
}

/**
 * Loads the entityform draft if it can find one
 */
function _ilr_alumni_events_registration_form() {
  module_load_include('inc', 'entityform', 'entityform.admin');
  $entityform_type = entityform_get_types('ilr_alumni_association_event_reg');
  if (isset($_SESSION['ilr_alumni_events_entityform_id'])) {
    $wrapper = _ilr_alumni_events_entityform_wrapper();
    if ($wrapper->draft->value() == 1) {
      return entityform_form_wrapper(entityform_load($_SESSION['ilr_alumni_events_entityform_id']), 'submit', 'embedded');
    }
  }
  return entityform_form_wrapper(entityform_empty_load($entityform_type->type), 'submit', 'embedded');
}

/**
 * Form input keys expected by elavon
 */
function _ilr_alumni_events_get_elavon_form_inputs() {
  global $ILR_SECRETS;

  $inputs = array (
    "ssl_receipt_link_method" => 'REDG',
    "ssl_receipt_apprvl_method" => 'REDG',
    "ssl_receipt_decl_method" => 'REDG',
    "ssl_receipt_link_url" => "alumni/events/response",
    'ssl_test_mode' => 'true',
    "ssl_merchant_id" => $ILR_SECRETS['elavon']['alumni_registration_merchant_id'],
    "ssl_user_id" => $ILR_SECRETS['elavon']['alumni_registration_user_id'],
    "ssl_pin" => $ILR_SECRETS['elavon']['alumni_registration_pin'],
    "ssl_invoice_number" => '1testing2', # How are we going to get this?
    "ssl_salestax" => '0',
    'ssl_cvv2cvc2_indicator' => '1',
    'ssl_show_form' => 'true',
    "ssl_transaction_type" => 'ccsale',
    "ssl_amount" => 'see _ilr_alumni_events_calculate_amount()',
    'ssl_description' => 'Testing the payment form',
    'ssl_result_format' => 'HTML',
    "ssl_customer_code" => 'atf-testing', # need to figure out how to do this
  );
  return array_merge(
    _ilr_alumni_events_get_entityform_mappings(),
    $inputs // order here matters, since some fields (ie ssl_amount) are in both arrays
  );
}

/**
 * Maps the elavon keys to the entityform field names
 */
function _ilr_alumni_events_get_entityform_mappings() {
  $mappings = &drupal_static(__FUNCTION__);
  if (!isset($mappings)) {
    $mappings = array(
      "ssl_first_name" => 'field_first_name',
      "ssl_last_name" => 'field_last_name',
      "ssl_avs_address" => 'field_address_line_1',
      "ssl_address2" => 'field_address_line_2',
      "ssl_city" => 'field_city',
      "ssl_state" => 'field_state_province',
      "ssl_avs_zip" => 'field_zip_code',
      "ssl_phone" => 'field_phone',
      'ssl_email' => 'field_email',
      'ssl_amount' => 'field_ssl_amount',
      'ssl_approval_code' => 'field_ssl_approval_code',
      'ssl_card_number' => 'field_ssl_card_number', // Just first 2 digits
      'ssl_invoice_number' => 'field_transinvoicenum',
      'ssl_result_message' => 'field_ssl_result_message',
      'ssl_txn_id' => 'field_ssl_txn_id',
      'ssl_txn_time' => 'field_ssl_txn_time',
    );
  }
  return $mappings;
}

/**
 * Takes a field name key and returns its value
 */
function _ilr_alumni_events_get_entityform_value($key) {
  $wrapper = _ilr_alumni_events_entityform_wrapper();
  if (isset($wrapper->{$key})) {
    return $wrapper->{$key}->value();
  }
  return '';
}

/**
 * Updates the entityform values based on what is returned
 * from the payment gateway
 */
function _ilr_alumni_events_update_entityform_values($variables) {
  $wrapper = _ilr_alumni_events_entityform_wrapper();
  foreach ($variables as $elavon_key => $value) {
    if ($field_name = _ilr_alumni_events_get_entityform_mapping($elavon_key)) {
      if ($field_name == 'field_ssl_card_number') {
        // Remove all but first two characters of CC #
        $value = $variables[$elavon_key] = substr($value, 0, 2);
      }
      $entityform_wrapper->{$field_name}->set($value);
    }
  }
  $entityform_wrapper->field_ssl_response_data->set($variables);
  // Remove the session and draft
  unset($_SESSION['ilr_alumni_events_entityform_id']);
  $wrapper->draft = 0;
  $wrapper->save();
}

/**
 * Generates the form markup that gets auto-posted to Elavon
 */
function _ilr_alumni_events_generate_elavon_form_markup() {
  $markup = '<form id="post_pf1" METHOD="POST" action="https://www.myvirtualmerchant.com/VirtualMerchant/process.do">';
  $inputs = _ilr_alumni_events_get_elavon_form_inputs();
  foreach ($inputs as $key => $value) {
    if ($key == 'ssl_amount') {
      $value = _ilr_alumni_events_calculate_amount();
    }
    else if ($key == 'ssl_invoice_number') {
      $value = _ilr_alumni_events_generate_invoice_number();
    }
    else if (strpos($value, 'field') === 0) {
      $value = _ilr_alumni_events_get_entityform_value($value);
    }
    $markup .= '<input type="hidden" name="'.$key.'" value="'.$value.'">';
  }
  $markup .= '<input id="sendIt" type="submit" name="submit" value="One moment..." />';
  $markup .= "</form>";
  return $markup;
}

/**
 * Maps keys to values depending on the key_or_value passsed in
 */
function _ilr_alumni_events_get_entityform_mapping($key_or_value) {
  $mappings = _ilr_alumni_events_get_entityform_mappings();
  // Check to see if the key is in the mapping array keys
  if (array_key_exists($key_or_value, $mappings)) {
    return $mappings[$key_or_value];
  } // Check to see if the value is in the array values
  else if ($key = array_search($value, $mappings)) {
    return $key;
  }
  return NULL;
}

/**
 * Calculates the amount to be processed based on the values
 * set for the node upon which the form lives
 */
function _ilr_alumni_events_calculate_amount() {
  $entityform_wrapper = _ilr_alumni_events_entityform_wrapper();
  $node = $entityform_wrapper->field_referenced_node->value();
  $node_wrapper = entity_metadata_wrapper('node', $node);
  $member_tickets = $entityform_wrapper->field_tickets_for_aa_members->value();
  $member_cost = $node_wrapper->field_aa_member_price->value();
  $non_member_tickets = $entityform_wrapper->field_tickets_for_non_members->value();
  $non_member_cost = $node_wrapper->field_aa_non_member_price->value();

  return ($member_tickets * $member_cost) + ($non_member_tickets * $non_member_cost);
}

/**
 * Returns a unique invoice number for the registration
 * @todo Figure out how to appropriately generate the invoice #
 */
function _ilr_alumni_events_generate_invoice_number() {
  $wrapper = _ilr_alumni_events_entityform_wrapper();
  $eid = $wrapper->entityform_id->value();
  return "invoice$eid";
}

/**
 * Creates or retrieves an entitymetadata wrapper
 */
function _ilr_alumni_events_entityform_wrapper($entityform=NULL) {
  $wrapper = &drupal_static(__FUNCTION__);
  if (!isset($wrapper)) {
    if (!$entityform) {
      $entityform = entityform_load($_SESSION['ilr_alumni_events_entityform_id']);
    }
    $wrapper = entity_metadata_wrapper('entityform', $entityform);
  }
  return $wrapper;
}
