<?php

//////////////////
// Drupal Hooks //
//////////////////

/**
* Implements hook_block_info().
*/
function ilr_alumni_events_block_info($delta = '') {
  $blocks['alumni_event_attendees'] = array(
    'info' => "Alumni Event Attendees",
  );
  return $blocks;
}

/**
* Implements hook_block_view().
*/
function ilr_alumni_events_block_view($delta = '') {
  $block = array(
    'subject' => "See Who's Coming",
    'content' => _ilr_alumni_events_attendee_view(),
  );

  return $block;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ilr_alumni_events_form_ilr_alumni_association_event_reg_entityform_edit_form_alter(&$form, &$form_state) {
  // Add form validation
  $form['#validate'][] = '_ilr_alumni_events_form_validate';
  $form['field_total_cost'][LANGUAGE_NONE][0]['#markup'] = '<label>Total Cost</label><p><span class="total-cost">0</span></p>';
  // Hide the non-member tickets field in the form the user sees
  $form['field_tickets_for_non_members']['#access'] = FALSE;

  drupal_add_js(drupal_get_path('module','ilr_alumni_events') . '/ilr_alumni_events.js', array('type' => 'file', 'scope' => 'footer'));

  $existing_entityform = (!empty($form['#entity']->entityform_id)) ? $form['#entity'] : null;
  $wrapper = _ilr_alumni_events_node_wrapper(null, $existing_entityform);

  drupal_add_js(array(
    'ilr_alumni_events' => array(
      'memberPrice' => $wrapper->field_aa_member_price->value(),
      'nonMemberPrice' => 0
    )),
    'setting'
  );

  // Figure out how many tickets remain; total_tickets = 0 means there is no limit
  $total_tickets = $wrapper->field_total_tickets->value();
  if ($total_tickets > 0) {
    $tickets_remaining = _ilr_alumni_events_get_remaining_ticket_count($total_tickets);

    // Add info to the reg page to let people know the number of remaining tickets
    $form['#groups']['group_reservations']->format_settings['instance_settings']['description'].= "<br>$tickets_remaining tickets available";

    // If number of tickets remaining is less than the max that normally shows up
    // in the dropdown, change the max in the dropdown.
    $normal_max = 10;
    if ($normal_max > $tickets_remaining) {
      for ($i=$normal_max; $i>$tickets_remaining; $i--) {
        unset($form['field_tickets_for_aa_members']['und']['#options'][$i]);
      }
    }
  }
}


/**
 * Implements hook_form_FORM_ID_alter().
 */
function ilr_alumni_events_form_ilr_sports_summit_event_registra_entityform_edit_form_alter(&$form, &$form_state) {
  // Add form validation
  $form['#validate'][] = '_ilr_alumni_events_form_validate';
  $form['field_total_cost'][LANGUAGE_NONE][0]['#markup'] = '<label>Total Cost</label><p><span class="total-cost">0</span></p>';

  drupal_add_js(drupal_get_path('module','ilr_alumni_events') . '/ilr_alumni_events.js', array('type' => 'file', 'scope' => 'footer'));

  $existing_entityform = (!empty($form['#entity']->entityform_id)) ? $form['#entity'] : null;
  $wrapper = _ilr_alumni_events_node_wrapper(null, $existing_entityform);

  drupal_add_js(array(
    'ilr_alumni_events' => array(
      'memberPrice' => $wrapper->field_aa_member_price->value(),
      'nonMemberPrice' => $wrapper->field_aa_non_member_price->value(),
    )),
    'setting'
  );

  // Figure out how many tickets remain; total_tickets = 0 means there is no limit
  $total_tickets = $wrapper->field_total_tickets->value();
  if ($total_tickets > 0) {
    $tickets_remaining = _ilr_alumni_events_get_remaining_ticket_count($total_tickets);

    // Add info to the reg page to let people know the number of remaining tickets
    $form['#groups']['group_reservations']->format_settings['instance_settings']['description'].= "<br>$tickets_remaining tickets available";

    // If number of tickets remaining is less than the max that normally shows up
    // in the dropdown, change the max in the dropdown.
    $normal_max = 10;
    if ($normal_max > $tickets_remaining) {
      for ($i=$normal_max; $i>$tickets_remaining; $i--) {
        unset($form['field_tickets_for_aa_members']['und']['#options'][$i]);
      }
    }
  }
}

/**
 * Implements hook_preprocess_hook()
 */
function ilr_alumni_events_preprocess_node(&$variables) {
  if ($variables['type'] == 'registration_page') {
    $wrapper = _ilr_alumni_events_node_wrapper(menu_get_object());
    if (ilr_alumni_events_is_alumni_payment_form($wrapper->field_registration_form_type->value()->type)) {
      // total_tickets = 0 means there is no limit
      $total_tickets = $wrapper->field_total_tickets->value();
      if ($total_tickets > 0) {
        $tickets_remaining = _ilr_alumni_events_get_remaining_ticket_count($total_tickets);
        if ($tickets_remaining < 1) {
          unset($variables['content']['field_registration_form_type']);
          $variables['content']['field_registration_form_type']['#markup'] =
            '<p>This event is sold out.</p>';
        }
      }
    }
  }
}

/**
 * Implements hook_freedompay_checkout_payload_alter().
 */
function ilr_alumni_events_freedompay_checkout_payload_alter(&$payload, $order, $form_id) {
  if (ilr_alumni_events_is_alumni_payment_form($order->bundle)) {
    $payload['PurchaseItems'] = _ilr_alumni_events_get_purchase_items();
    $payload['BillingAddress'] = _ilr_alumni_events_get_billing_address();
  }
}

/**
 * Implements hook_freedompay_transaction_total_alter().
 */
function ilr_alumni_events_freedompay_transaction_total_alter(&$transaction_total, $order, $form_id) {
  if (ilr_alumni_events_is_alumni_payment_form($order->bundle)) {
    // Set the wrapper to the referenced node
    $node_wrapper = _ilr_alumni_events_node_wrapper(null, $order->form);
    $transaction_total = _ilr_alumni_events_get_total_cost();
  }
}

/**
 * Implements hook_freedompay_invoice_prefix().
 */
function ilr_alumni_events_freedompay_invoice_prefix($order) {
  if (ilr_alumni_events_is_alumni_payment_form($order->bundle)) {
    return 'alev';
  }
}

/**
 * Implements hook_freedompay_order_complete().
 * Sets the total_cost field value based on the transaction total
 */
function ilr_alumni_events_freedompay_order_complete($order, $entity_type, $bundle) {
  if (ilr_alumni_events_is_alumni_payment_form($order->bundle)) {
    $wrapper = $order->formWrapper();
    if (!empty($order->invoice)) {
      $total_cost = $order->invoice->amount;
      $wrapper->field_total_cost->set($total_cost);
      $wrapper->save();
    }
  }
}

function ilr_alumni_events_is_alumni_payment_form($type) {
  return $type == 'ilr_alumni_association_event_reg' || $type == 'ilr_sports_summit_event_registra';
}

///////////////////////////////
// Module-Specific functions //
///////////////////////////////

/**
* View callback for attendee block
* @see ilr_alumni_events_block_view()
*/
function _ilr_alumni_events_attendee_view() {
  $node = menu_get_object();
  if ($attendees = _ilr_alumni_events_get_event_attendees($node)) {
    $markup = "<ul class=\"attendees\">\n";
    foreach ($attendees as $key => $fields) {
      $entityform = entityform_load($key);
      $wrapper = entity_metadata_wrapper('entityform', $entityform);
      $markup .= _ilr_alumni_events_get_attendee_markup($wrapper);
      if ($wrapper->field_attendee_list_guests->value() == 1) {
        if ($guests = $wrapper->field_guests->value()) {
          $markup .= _ilr_alumni_events_get_guest_markup($wrapper);
        }
      }
    }
    $markup .= "</ul>";
    $block['content'] = array(
      '#markup' => $markup,
    );
  }
  else {
    // No one has agreed to show their info for this event, so don't render the block
    $block = array();
  }
  return $block;
}

/**
 * Adds the class year to the markup
 * @todo Consider formatting the year,
 * since it's being input as text
 */
function _ilr_alumni_events_format_attendee_class_year($wrapper) {
  $class_year = $wrapper->field_year_as_text->value(array('sanitize' => TRUE));
  if (!empty($class_year)) {
    $year = $class_year;
  }
  return (!empty($class_year)) ? ', ' . $class_year : '';
}

/**
 * Converts form first and last name to list items
 */
function _ilr_alumni_events_get_attendee_markup($wrapper) {
  $name = $wrapper->field_first_name->value(array('sanitize' => TRUE));
  $name .= ' ' . $wrapper->field_last_name->value(array('sanitize' => TRUE));
  $class_year = _ilr_alumni_events_format_attendee_class_year($wrapper);
  return "  <li>$name$class_year</li>\n";
}

/**
 * Maps the entityform fields to the expected FreedomPay billing address fields
 */
function _ilr_alumni_events_get_billing_address() {
  $wrapper = _ilr_alumni_events_get_entityform_wrapper();
  return array(
    "Street1" => $wrapper->field_address_line_1->value(),
    "Street2" => $wrapper->field_address_line_2->value(),
    "City" => $wrapper->field_city->value(),
    "State" => _freedompay_entityform_get_state_abbreviation($wrapper->field_state_province->value()),
    "PostalCode" => $wrapper->field_zip_code->value(),
    'Name' => $wrapper->field_first_name->value() . ' ' . $wrapper->field_last_name->value(),
  );
}

/**
 * Checks to see whether tickets have been ordered
 */
function _ilr_alumni_events_form_validate(&$form, &$form_state) {
  $entityform_wrapper = entity_metadata_wrapper('entityform', $form_state['entityform']);
  $details = _ilr_alumni_events_ticket_details($entityform_wrapper);
  if (empty($details['total'])) {
    form_set_error('field_tickets_for_aa_members', 'Please select your tickets.');
  }
}

function _ilr_alumni_events_ticket_details($entityform_wrapper=NULL) {
  if (!$entityform_wrapper) {
    $entityform_wrapper = _ilr_alumni_events_get_entityform_wrapper();
  }
  return (!empty($entityform_wrapper->field_tickets_for_aa_members) || !empty($entityform_wrapper->field_tickets_for_non_members))
    ? [
        'total' => _ilr_alumni_events_form_ticket_count($entityform_wrapper),
        'member' => $entityform_wrapper->field_tickets_for_aa_members->value(),
        'non-member' => $entityform_wrapper->field_tickets_for_non_members->value(),
      ]
    : 0;
}

function _ilr_alumni_events_form_ticket_count($entityform_wrapper) {
  return $entityform_wrapper->field_tickets_for_aa_members->value() + $entityform_wrapper->field_tickets_for_non_members->value();
}

/**
 * Creates an EntityFieldQuery to get completed registrations
 * who have agreed to be added to the form
 * **NOTE** We ignore users added guest info but not their own
 */
function _ilr_alumni_events_get_event_attendees($node) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'entityform')
    ->entityCondition('bundle', 'ilr_alumni_association_event_reg')
    ->propertyCondition('draft', 0)
    ->fieldCondition('field_attendee_list', 'value', '1', '=')
    ->fieldCondition('field_referenced_node', 'target_id', $node->nid);
  $result = $query->execute();

  if (isset($result['entityform'])) {
    $entityform_ids = array_keys($result['entityform']);
    $attendees = entity_load('entityform', $entityform_ids);
    return $attendees;
  }
  return NULL;
}

/**
 * Converts guest info from the entityform to list items
 */
function _ilr_alumni_events_get_guest_markup($wrapper) {
  $output = '';
  $guest_data = $wrapper->field_guests->value(array('sanitize' => TRUE));
  $guest_array = explode("\n", $guest_data);
  foreach ($guest_array as $key => $line) {
    $info = preg_replace("/\r|\n/", "", $line);
    $output .= "  <li>$info</li>\n";
  }
  return $output;
}

function _ilr_alumni_events_get_member_cost() {
  $node_wrapper = _ilr_alumni_events_node_wrapper();
  return (!empty($node_wrapper->field_aa_member_price))
    ? $node_wrapper->field_aa_member_price->value()
    : 0;
}

function _ilr_alumni_events_get_non_member_cost() {
  $node_wrapper = _ilr_alumni_events_node_wrapper();
  return (!empty($node_wrapper->field_aa_non_member_price))
    ? $node_wrapper->field_aa_non_member_price->value()
    : 0;
}

/**
 * Get count of remaining tickets
 */
function _ilr_alumni_events_get_remaining_ticket_count($tot) {
  $wrapper = _ilr_alumni_events_node_wrapper();
  $tickets_sold_total = _ilr_alumni_events_get_total_tickets_sold($wrapper->getIdentifier());
  $tickets_remaining = $tot - $tickets_sold_total;
  return $tickets_remaining;
}

/**
 * Creates an EntityFieldQuery to get total tickets sold
 */
function _ilr_alumni_events_get_total_tickets_sold($nid) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'entityform')
    ->entityCondition('bundle', 'ilr_alumni_association_event_reg')
    ->propertyCondition('draft', 0)
    ->fieldCondition('field_tickets_for_aa_members', 'value', '0', '>')
    ->fieldCondition('field_referenced_node', 'target_id', $nid);
  $result = $query->execute();

  $tickets_sold_total = 0;

  if (isset($result['entityform'])) {
    $entityform_ids = array_keys($result['entityform']);
    $tickets = entity_load('entityform', $entityform_ids);
    foreach ($tickets as $key => $fields) {
      $entityform = entityform_load($key);
      $wrapper = entity_metadata_wrapper('entityform', $entityform);
      $tickets_sold_total += $wrapper->field_tickets_for_aa_members->value();
    }
  }
  return $tickets_sold_total;
}

/**
 * Calculates the amount to be processed based on the values
 * set for the node upon which the form lives
 */
function _ilr_alumni_events_get_total_cost() {
  $member_cost = _ilr_alumni_events_get_member_cost();
  $non_member_cost = _ilr_alumni_events_get_non_member_cost();
  $ticket_details = _ilr_alumni_events_ticket_details();
  $alumni_total = $ticket_details['member'] * $member_cost;
  $discount_cost = $remaining = 0;
  if ($ticket_details['non-member'] >= $ticket_details['member']) {
    if ($ticket_details['non-member'] > $ticket_details['member']) {
      $remaining = ($ticket_details['non-member'] - $ticket_details['member']) * $non_member_cost;
    }
    $discount_cost = $alumni_total;
  } // Check if there are non-member tickets
  elseif (!empty($ticket_details['non-member'])) {
    $remaining = ($ticket_details['non-member'] > $ticket_details['member'])
      ? ($ticket_details['non-member'] - $ticket_details['member']) * $non_member_cost
      : $ticket_details['non-member'] * $member_cost;
  }
  $ticket_cost = $alumni_total + $discount_cost + $remaining;
  $transaction_total = ($ticket_cost == 0)
    ? FREEDOMPAY_PAYMENT_NOT_REQUIRED
    : $ticket_cost;
  return $transaction_total;
}

/**
 * Returns an array of ticket info to pass to FreedomPay
 */
function _ilr_alumni_events_get_purchase_items() {
  $wrapper = _ilr_alumni_events_node_wrapper();
  return array(
    array(
      "Price" => _ilr_alumni_events_get_total_cost(),
      "DisplayOrder" => 1,
      "Description" => 'Tickets for ' . $wrapper->label(),
      "Quantity" => _ilr_alumni_events_ticket_details()['total'],
    ),
  );
}

/**
 * Wrapper function for freedompay_entityform_wrapper().
 */
function _ilr_alumni_events_get_entityform_wrapper($entityform=NULL) {
  return freedompay_entityform_wrapper($entityform);
}

/**
 * Creates or retrieves an entitymetadata wrapper for the node
 * on which the entityform has been placed
 */
function _ilr_alumni_events_node_wrapper($node=NULL,$entityform=NULL) {
  $wrapper = &drupal_static(__FUNCTION__);
  if (!isset($wrapper)) {
    if (!$node && $entityform_wrapper = _ilr_alumni_events_get_entityform_wrapper($entityform)) {
      if(isset($entityform_wrapper->field_referenced_node)) {
        $node = $entityform_wrapper->field_referenced_node->value();
      }
      else {
        watchdog('ilr_alumni_events', "There was an error trying to load the referenced node for @entityform_type",
            array(
              '@entityform_type' => $entityform_wrapper->type->value()->type,
            ),
            WATCHDOG_ERROR
          );
      }
    }
    else {
      $node = menu_get_object();
    }
    $wrapper = entity_metadata_wrapper('node', $node);
  }
  return $wrapper;
}
