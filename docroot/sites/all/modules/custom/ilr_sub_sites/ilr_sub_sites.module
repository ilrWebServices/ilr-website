<?php

//////////////////
// Drupal hooks //
//////////////////

/**
* Implements hook_block_info().
*/
function ilr_sub_sites_block_info($delta = '') {
  $blocks['ilr_sub_site_header'] = array(
    'info' => 'ILR SubSite Header'
  );
  return $blocks;
}

/**
 * Implements hook_block_view_alter().
 */
function ilr_sub_sites_sub_site_header_alter(&$block, $subsite) {
  if ($subsite->menu == 'sports-leadership-camp') {
    $block['content'] = theme('slc_header');
  }
}

function ilr_sub_sites_theme() {
  return array(
    'slc_header' => array(
      'variables' => array(),
      'template' => 'ilr-sports-leadership-camp-header',
    ),
  );
}

/**
 *
* Implements hook_block_view().
*/
function ilr_sub_sites_block_view($delta = '') {
  $block = ['content' => ''];
  $subsite_name = _ilr_sub_sites_get_current_subsite_name();
  $href = '/' . drupal_get_path_alias(_ilr_sub_sites_get_subsite_homepage_alias());
  $menu_name = _ilr_sub_sites_get_menu_name();
  // If custom logo, add the seal
  if (_ilr_sub_sites_get_site_logo($menu_name, $subsite_name)) {
    $reversed = ilr_sub_sites_use_reverse_seal($menu_name);
    $seal_path = ($reversed)
      ? "/images/logos/cornell-seal--reversed.svg"
      : "/images/logos/cornell-seal.svg";
    $seal = file_create_url(drupal_get_path('theme', 'ilr_theme') . $seal_path);
    $block['content'] .= '<a href="https://cornell.edu" class="cornell-seal__link"><img src="'.$seal.'" alt="Link to Cornell University" /></a>';
  }

  $block['content'] .= '<div class="subsite-header">';

  $block['content'] .= "<h2 class='subsite__heading subsite__heading--$menu_name'>$subsite_name</h2>";
  if ($subtitle = _ilr_sub_sites_get_menu_description($menu_name)) {
    if ($subtitle != "SubSite menu") {
      $block['content'] .= "<h3 class='subsite__subheading subsite__subheading--$menu_name'>$subtitle</h3>";
    }
  }

  $block['content'] .= '</div>';
  $subsite = (object) [
    'menu' => $menu_name,
    'name' => $subsite_name
  ];
  drupal_alter('sub_site_header', $block, $subsite);
  return $block;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Form id = basic_page_node_form
 * Add form elements for create a submenu
 */
function ilr_sub_sites_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['#node_edit_form']) && $form['#node_edit_form'] === TRUE && in_array($form['#bundle'], variable_get('subsite_home_enabled_bundles', array('basic_page','channel_page','registration_page')))) {
    /*
     * Only alter form if
     *  1. Not ILR Sub Page. @see ilr_sub_pages_create_sub_page.
     *  2. User can administer content types(might want 'administer sub site' permission in future).
     *  3. $form['menu'] has been set by menu module.
     *  4. The node is new
     */
    if (empty($form_state['#ilr_sub_page']) && user_access('administer content types') && isset($form['menu']) && !isset($form['nid']['#value'])) {
      if (_ilr_sub_sites_is_sub_site_homepage($form['#node'])) {
        $form['menu']['#access'] = FALSE;
        // Inform administrators how to remove as sub site.
        drupal_set_message('This page is currently a sub site homepage. To change this you must use the menu administration screens.');
      }
      else {
        // This page is not currently a sub site.
        $form['menu']['create_subsite'] = array(
          '#type' => 'checkbox',
          '#title' => t('Create Subsite Menu'),
          '#description' => t('Create a new sub site menu and add a link to this node at the top level.'),
          '#states' => array(
            'invisible' => array(
              'input[name="menu[enabled]"]' => array(
                'checked' => TRUE,
              ),
            ),
          ),
        );
        $form['menu']['subsite_title'] = array(
          '#type' => 'textfield',
          '#title' => t('Menu Title'),
          '#description' => t('If blank then the page title will be used.'),
          '#states' => array(
            'invisible' => array(
              'input[name="menu[create_subsite]"]' => array(
                'checked' => FALSE,
              ),
            ),
          ),
        );
        $form['menu']['enabled']['#states'] = array(
          'invisible' => array(
            'input[name="menu[create_subsite]"]' => array(
              'checked' => TRUE,
            ),
          ),
        );
        $form['#validate'][] = '_ilr_sub_sites_basic_page_validate';
      }
    }
  }
}

/**
 * Implements hook_init().
 */
function ilr_sub_sites_init() {
  if(!menu_get_item($_GET['q']) && _ilr_sub_sites_current_page_is_sub_site()) {
    $path_array = arg();
    $subsite_url = array_shift($path_array);
    $path_to_check = implode('/', $path_array);
    if ($path = drupal_lookup_path("source", $path_to_check)) {
      $path_array = explode('/', $path);
      $nid = $path_array[1];
      $current_nid = _ilr_sub_sites_current_nid($nid);
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 *
 * Form alter has to run after menu module's implementation.
 */
function ilr_sub_sites_module_implements_alter(&$implementations, $hook) {
  switch ($hook) {
    case 'form_alter':
      if (isset($implementations['ilr_sub_sites'])) {
        $group = $implementations['ilr_sub_sites'];
        unset($implementations['ilr_sub_sites']);
        $implementations['ilr_sub_sites'] = $group;
      }
      break;
  }
}

/**
 * Implements hook_node_insert().
 */
function ilr_sub_sites_node_insert($node) {
  _ilr_sub_sites_create_sub_menu_for_node($node);
}

/**
 * Implements hook_page_build().
 */
function ilr_sub_sites_page_build(&$page) {
  if (isset($page['header']) &&_ilr_sub_sites_current_page_is_sub_site()) {
    $block_view = module_invoke("ilr_sub_sites", "block_view", 'ilr_sub_site_header');
    $subsite_block = array();
    $subsite_block['subsite'] = array(
      '#markup' => $block_view['content'],
      '#weight' => -1,
    );
    $page['header'] = $subsite_block + $page['header'];

    if($nid = _ilr_sub_sites_current_nid()) {
      $node = node_load($nid);
      unset($page['content']['system_main']['main']);
      $node_view = node_view($node);
      $page['content']['system_main']['nodes'] = array(
        $nid => $node_view,
      );
      drupal_set_title($node->title);
      $headers = &drupal_static('drupal_http_headers', array());
      unset($headers['status']);
      drupal_add_http_header('Status','200 OK', TRUE);
      if (module_exists('context')) {
        // Add relevant context block reactions for wrapped nodes
        if ($plugin = context_get_plugin('reaction', 'block')) {
          $plugin->execute($page);
        }
      }
      // Run the node through region view modes
      // Certificate programs, for example, are using them
      _ilr_subs_sites_region_view_modes_page_build($page, $node);
    }
  }
}

/**
 * We rely on region view modes for some node displays
 * This is derived from region_view_modes.module
 */
function _ilr_subs_sites_region_view_modes_page_build(&$page, $node) {
  global $theme;
  $region_view_modes = _region_view_modes_get_view_modes();
  $view_mode_settings = field_view_mode_settings('node', $node->type);

  foreach ($region_view_modes as $region_view_mode_name => $region_view_mode_info) {
    $visible = !empty($view_mode_settings[$region_view_mode_name]['custom_settings']);

    if ($visible && ($region_view_mode_info['theme_name'] === $theme)) {
      $node_render_array = node_view($node, $region_view_mode_name);

      $rendered = render($node_render_array);

      if ($rendered) {
        unset($node_render_array['#printed']);
        if (!isset($page[$region_view_mode_info['region_name']])) {
          $page[$region_view_mode_info['region_name']] = array();
        }
        if (variable_get('region_view_modes_placement__' . $region_view_mode_name, 'above') == 'above') {
          array_unshift($page[$region_view_mode_info['region_name']], $node_render_array);
        }
        else {
          array_push($page[$region_view_mode_info['region_name']], $node_render_array);
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 * Adds a class to sub site homepages
 */
function ilr_sub_sites_preprocess_html(&$variables) {
  if (_ilr_sub_sites_current_page_is_sub_site()) {
    // Add subsite classes
    $site = _ilr_sub_sites_get_menu_name();
    $variables['classes_array'][] = "subsite $site";
    if ($node = _ilr_sub_sites_get_current_node()) {
      $type = str_replace('_', '-', $node->type);
      $variables['classes_array'][] = "node-type-$type";
    }
    if (_ilr_sub_sites_is_sub_site_homepage()) {
      // front or not-front is the 2nd element
      $variables['classes_array'][1] = 'subsite-front';
    }
  }
}

/**
 * Removes the title if it is a full view of a wrapped node
 */
function ilr_sub_sites_preprocess_node(&$variables) {
  if (_ilr_sub_sites_is_wrapped_node() && $variables['view_mode'] == 'full') {
    $variables['title'] = '';
  }
}

/**
 * Handles custom page template processing
 */
function ilr_sub_sites_preprocess_page(&$variables) {
  $logo = file_create_url(drupal_get_path('theme', 'ilr_theme') . "/images/logos/ilr-cornell-lockup.svg");

  if (_ilr_sub_sites_current_page_is_sub_site()) {
    $subsite_name = _ilr_sub_sites_get_current_subsite_name();
    $menu_name = _ilr_sub_sites_get_menu_name();
    if ($logo_filename = _ilr_sub_sites_get_site_logo($menu_name, $subsite_name)) {
      $logo = file_create_url(drupal_get_path('theme', 'ilr_theme') . "/images/logos/" . $logo_filename);
      $href = '/' . drupal_get_path_alias(_ilr_sub_sites_get_subsite_homepage_alias());
      $variables['front_page'] = $href;

      $variables['logo_link'] = '<a class="cornell cornell--ilr" title="Visit ilr.cornell.edu" href="https://www.ilr.cornell.edu"></a>';
    }
  }

  $variables['logo'] = $logo;
}



//////////////////////
// Custom functions //
//////////////////////

/**
 * Validate callback for basic page form.
 *
 * Don't allow adding a menu item and setting a subsite.
 */
function _ilr_sub_sites_basic_page_validate($form, &$form_state) {
  $menu_values = $form_state['values']['menu'];
  if (!empty($menu_values['create_subsite'])) {
    // This shouldn't happen because of JS but just in case.
    if (!empty($menu_values['enabled'])) {
      form_error($form['menu'], t('You cannot create both a menu link and a sub site menu.'));
      return;
    }
  }

}

/**
 * Create sub site menu.
 *
 * It will also be added as a menu option for basic pages
 * @param $title
 * @param null $uri
 *  If not provided it will be generated.
 * @return string
 *  Menu machine name.
 */
function _ilr_sub_sites_create_menu($title, $uri = NULL) {
  if (!$uri) {
    $uri = drupal_clean_css_identifier($title);
  }
  // Look the table first if the data does exist
  $machine_name = _ilr_sub_sites_get_menu_name_from_uri($uri);

  $menu_name = _ilr_sub_sites_check_for_menu_by_name($machine_name);
  // Save the record if the data does not exist
  if (!$menu_name) {
    $menu = array(
      'menu_name' => $machine_name,
      'title' => $title,
      'description' => t('SubSite menu'),
    );
    menu_save($menu);

    // Add as a menu option for basic page and registration page.
    _ilr_sub_sites_create_menu_options_for_relevant_content_types($machine_name);

  }
  return $machine_name;
}

/**
 * Sets menu options for relevant content types.
 * @see basic_page.info for what to exclude, and be sure
 * to remove the menu_options from the strongarm.inc files
 */
function _ilr_sub_sites_create_menu_options_for_relevant_content_types($new_menu) {
  $menu_options = variable_get('menu_options_basic_page', array());
  $menu_options[] = $new_menu;

  $relevant_content_types = variable_get('subsite_home_enabled_bundles', array('basic_page','channel_page','registration_page'));
  foreach ($relevant_content_types as $key => $machine_name) {
    variable_set('menu_options_' . $machine_name, $menu_options);
  }
}

/**
 * Workaround b/c pathauto_create_alias() not setting the alias
 * @todo Debug so this function is not required
 */
function _ilr_sub_sites_create_pathauto_alias($node) {
  module_load_include('inc', 'pathauto');
    $alias = preg_replace('@[^a-z0-9-]+@','-', strtolower($node->title));
    $path = array(
      'source' => 'node/' . $node->nid,
      'alias' => $alias,
      'language' => LANGUAGE_NONE,
    );
    _pathauto_set_alias($path, NULL, 'insert');
}

/**
 * Create subsite menu for a node.
 *
 * Creates menu and adds link to node to menu
 * @param $node
 */
function _ilr_sub_sites_create_sub_menu_for_node($node) {
  if (in_array($node->type, variable_get('subsite_home_enabled_bundles', array('basic_page','channel_page','registration_page'))) && !empty($node->menu['create_subsite'])) {
    $menu_title = empty($node->menu['subsite_title']) ? $node->title : $node->menu['subsite_title'];
    $menu_name = _ilr_sub_sites_create_menu($menu_title);
    // Create node link on new menu
    $link = array(
      'link_path' => 'node/' . $node->nid,
      'link_title' => $node->title,
      'menu_name' => $menu_name,
    );
    menu_link_save($link);
    _ilr_sub_sites_create_pathauto_alias($node);
    return;
  }
}

function _ilr_sub_sites_current_nid($nid=NULL) {
  $current_nid = &drupal_static('ilr_sub_site_current_nid');
  if ($nid) { // Setter
    $current_nid = $nid;
  }
  return $current_nid;
}

function _ilr_sub_sites_current_page_is_sub_site() {
  if (_ilr_sub_sites_homepage_uri()) {
    return TRUE;
  }
  if ($node = _ilr_sub_sites_get_current_node()) {
    return _ilr_sub_sites_get_menu_name() != 'main-menu';
  } // Check for a path-based subsite
  elseif (_ilr_sub_sites_get_subsite_homepage_alias() == arg(0)) {
    _ilr_sub_sites_homepage_uri(arg(0));
    return TRUE;
  }
  return FALSE;
}

/**
 * Gets the menu assignment of the current page.
 * See ilr_menu_block_blocks() in the profile.
 */
function _ilr_sub_sites_get_menu_name($node=NULL) {
  $node = ($node) ? $node : _ilr_sub_sites_get_current_node();
  if ($node && !_ilr_sub_sites_is_wrapped_node()) {
    $menu_name = db_select('menu_links', 'ml')
      ->condition('ml.link_path', 'node/' . $node->nid)
      ->fields('ml', array('menu_name'))
      ->execute()
      ->fetchField();
    return strlen($menu_name) ? $menu_name : 'main-menu';
  }
  elseif ($menu_name = _ilr_sub_sites_check_for_menu_by_top_path(arg(0))) {
    return $menu_name;
  }
  return 'main-menu';
}

/**
 * Gets the menu assignment of the current page.
 * See ilr_menu_block_blocks() in the profile.
 */
function _ilr_sub_sites_get_menu_description($menu_name) {

  $menu_description = db_select('menu_custom', 'mc')
    ->condition('mc.menu_name', $menu_name)
    ->fields('mc', array('description'))
    ->execute()
    ->fetchField();
  return strlen($menu_description) ? $menu_description : NULL;
}


/**
 * Check if a path is the top link for a subsite menu.
 *
 * @todo Are there any other menus to ignore beside main-menu and user-menu
 * @param $path
 *
 * @return bool
 */
function _ilr_sub_sites_check_for_menu_by_top_path($path) {
  $normal_path = drupal_get_normal_path($path);
  $menu_name = db_query('SELECT menu_name FROM {menu_links} WHERE link_path =:link_path and plid = 0', array(':link_path' => $normal_path))->fetchField();
  if ($menu_name && $menu_name != 'user-menu' && $menu_name != 'main-menu' && $menu_name != 'navigation') {
    return $menu_name;
  }
  return FALSE;
}
function _ilr_sub_sites_get_current_node() {
  $node = &drupal_static(__FUNCTION__);
  if (empty($node)) {
    $node = ($nid = _ilr_sub_sites_current_nid())
      ? node_load($nid)
      : menu_get_object();
  }
  return $node;
}

function _ilr_sub_sites_check_for_menu_by_name($path) {
  $menu_name = db_query("SELECT menu_name FROM {menu_custom} WHERE menu_name=:menu_name", array(':menu_name' => $path))->fetchField();
  return $menu_name;
}

function _ilr_sub_sites_get_current_subsite_name() {
  $machine_name = _ilr_sub_sites_get_menu_name();
  $subsite_name = db_query("SELECT title FROM {menu_custom} WHERE menu_name=:menu_name", array(':menu_name' => $machine_name))->fetchField();
  return $subsite_name;
}

function _ilr_sub_sites_get_header_for_subsite() {
  $block = block_load('ilr_sub_sites', 'ilr_sub_site_header');
  return $block;
}
/**
 * Concatenates menu names since they're limited to 32 characters.
 * See ilr_sub_sites_enable().
 */
function _ilr_sub_sites_get_menu_name_from_uri($uri) {
  $name = strtolower($uri);
  if (strlen($name) > 30) {
    $name = substr($name, 0, 30);
  }
  return $name;
}

function _ilr_sub_sites_get_site_logo($menu_name, $subsite_name) {
  $filenames = array(
    'cheri' => 'ilr-cheri.svg',
    'ics' => 'ilr-ics.svg',
    'iws' => 'ilr-iws.svg',
    'ldi' => 'ilr-ldi.svg',
    'scheinman-institute' => 'ilr-scheinman-institute.svg',
    'smithers-institute' => 'ilr-smithers.svg',
    // 'uli' => 'ilr-uli.svg', // Worker-institute cohort
    'worker-institute' => 'ilr-worker-institute.svg',
    'ilr-at-70' => 'logo-ilr-at-70.svg',
    // 'sustainable-labor-practices' => 'logo-new-conversations.svg',
    'sports-leadership' => 'ILR-wordmark-reversed.svg',
  );
  if (array_key_exists($menu_name, $filenames)) {
    return $filenames[$menu_name];
  }
  elseif ($cohort = _ilr_sub_sites_get_cohort($menu_name)) {
    return $filenames[$cohort];
  }
  return NULL;
}

function _ilr_sub_sites_get_subsite_homepage_alias() {
  $menu_name = _ilr_sub_sites_get_menu_name();
  $path = db_select('menu_links', 'ml')
    ->condition('ml.plid', '0')
    ->condition('ml.menu_name',$menu_name)
    ->fields('ml', array('link_path'))
    ->execute()
    ->fetchField();
  return drupal_get_path_alias($path);
}

function _ilr_sub_sites_homepage_uri($uri=NULL) {
  $subsite_uri = &drupal_static('ilr_sub_site_homepage_uri');
  if ($uri) { // Setter
    $subsite_uri = $uri;
  }
  return $subsite_uri;
}

/**
 * Determines whether the current node is a sub site homepage
 * This currently works because all sub sites are at ilr.cornell.edu/subsite.
 */
function _ilr_sub_sites_is_sub_site_homepage($node=NULL) {
  $node = ($node) ? $node : _ilr_sub_sites_get_current_node();
  if (empty($node->nid)) {
    return FALSE;
  }
  $plid = db_select('menu_links', 'ml')
    ->condition('ml.link_path', 'node/' . $node->nid)
    ->fields('ml', array('plid'))
    ->execute()
    ->fetchField();
  return $plid === '0' || $plid === 0;
}

/**
 * Only wrapped nodes will have ilr_sub_site_current_nid set
 * Wrapped nodes are when an existing node is skinned
 * with a subsite theme, @see ilr_sub_sites_init()
 */
function _ilr_sub_sites_is_wrapped_node() {
  if (_ilr_sub_sites_current_nid()) {
    return TRUE;
  }
  return FALSE;
}

function _ilr_sub_sites_get_cohort($name) {
  $cohorts = [
    'worker-institute' => [
      'men-and-women-as-allies' => 'Men and Women as Allies',
      'mobilizing-against-inequality' => 'Mobilizing Against Inequality',
      'uli' => 'Union Leadership Institute',
      'national-labor-leadership-initiative' => 'The National Labor Leadership Initiative',
      'uale-2013-ne' => 'UALE 2018 NE',
    ]
  ];
  foreach ($cohorts as $key => $subsites) {
    if (array_key_exists($name, $subsites)) {
      return $key;
    }
  }
  return NULL;
}

function ilr_sub_sites_use_reverse_seal($menu_name) {
  if ($menu_name == 'sports-leadership') {
    return TRUE;
  }
  return false;
}
