<?php

//////////////////
// Drupal hooks //
//////////////////

/**
* Implements hook_block_info().
*/
function ilr_sub_sites_block_info($delta = '') {
  $blocks['ilr_sub_site_header'] = array(
    'info' => 'ILR SubSite Header'
  );
  return $blocks;
}

/**
* Implements hook_block_view().
*/
function ilr_sub_sites_block_view($delta = '') {
  $block = array();
  $subsite_name = _ilr_sub_sites_get_current_subsite_name();
  $href = '/' . drupal_get_path_alias(_ilr_sub_sites_get_subsite_homepage_alias());
  $block['content'] = '<div class="subsite-header">';
  $menu_name = _ilr_sub_sites_get_current_menu_name();
  if ($logo = _ilr_sub_sites_get_site_logo($menu_name, $subsite_name)) {
    $block['content'] .= "<h2 class='$subsite_name image'><a href='$href'>$logo</a></h2>";
  }
  else {
    $block['content'] .= "<h2><a href='$href'>$subsite_name</a></h2>";
  }

  $block['content'] .= '</div>';
  return $block;
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Form id = basic_page_node_form
 * Add form elements for create a submenu
 */
function ilr_sub_sites_form_basic_page_node_form_alter(&$form, &$form_state, $form_id) {
  /*
   * Only alter form if
   *  1. Not ILR Sub Page. @see ilr_sub_pages_create_sub_page.
   *  2. User can administer content types(might want 'administer sub site' permission in future).
   *  3. $form['menu'] has been set by menu module.
   *  4. The node is new
   */
  if (empty($form_state['#ilr_sub_page']) && user_access('administer content types') && isset($form['menu']) && !isset($form['nid']['#value'])) {
    if (_ilr_sub_sites_is_sub_site_homepage($form['#node'])) {
      $form['menu']['#access'] = FALSE;
      // Inform administrators how to remove as sub site.
      drupal_set_message('This page is currently a sub site homepage. To change this you must use the menu administration screens.');
    }
    else {
      // This page is not currently a sub site.
      $form['menu']['create_subsite'] = array(
        '#type' => 'checkbox',
        '#title' => t('Create Subsite Menu'),
        '#description' => t('Create a new sub site menu and add a link to this node at the top level.'),
        '#states' => array(
          'invisible' => array(
            'input[name="menu[enabled]"]' => array(
              'checked' => TRUE,
            ),
          ),
        ),
      );
      $form['menu']['subsite_title'] = array(
        '#type' => 'textfield',
        '#title' => t('Menu Title'),
        '#description' => t('If blank then the page title will be used.'),
        '#states' => array(
          'invisible' => array(
            'input[name="menu[create_subsite]"]' => array(
              'checked' => FALSE,
            ),
          ),
        ),
      );
      $form['menu']['enabled']['#states'] = array(
        'invisible' => array(
          'input[name="menu[create_subsite]"]' => array(
            'checked' => TRUE,
          ),
        ),
      );
      $form['#validate'][] = '_ilr_sub_sites_basic_page_validate';
    }
  }
}

/**
 * Implements hook_module_implements_alter().
 *
 * Form alter has to run after menu module's implementation.
 */
function ilr_sub_sites_module_implements_alter(&$implementations, $hook) {
  switch ($hook) {
    case 'form_alter':
      if (isset($implementations['ilr_sub_sites'])) {
        $group = $implementations['ilr_sub_sites'];
        unset($implementations['ilr_sub_sites']);
        $implementations['ilr_sub_sites'] = $group;
      }

  }
}

/**
 * Implements hook_node_insert().
 */
function ilr_sub_sites_node_insert($node) {
  _ilr_sub_sites_create_sub_menu_for_node($node);
}

/**
 * Implements hook_page_build().
 */
function ilr_sub_sites_page_build(&$page) {
  if (isset($page['header']) &&_ilr_sub_sites_current_page_is_sub_site()) {
    $block_view = module_invoke("ilr_sub_sites", "block_view", 'ilr_sub_site_header');
    $subsite_block = array();
    $subsite_block['subsite'] = array(
      '#markup' => $block_view['content'],
      '#weight' => -1,
    );
    $page['header'] = $subsite_block + $page['header'];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 * Adds a class to sub site homepages
 */
function ilr_sub_sites_preprocess_html(&$variables) {
  if (_ilr_sub_sites_current_page_is_sub_site()) {
    // Add subsite classes
    $site = _ilr_sub_sites_get_current_menu_name();
    $variables['classes_array'][] = "subsite $site";

    if (_ilr_sub_sites_is_sub_site_homepage()) {
      $variables['classes_array'][] = 'subsite-front';
    }
  }
}

//////////////////////
// Custom functions //
//////////////////////

/**
 * Validate callback for basic page form.
 *
 * Don't allow adding a menu item and setting a subsite.
 */
function _ilr_sub_sites_basic_page_validate($form, &$form_state) {
  $menu_values = $form_state['values']['menu'];
  if (!empty($menu_values['create_subsite'])) {
    // This shouldn't happen because of JS but just in case.
    if (!empty($menu_values['enabled'])) {
      form_error($form['menu'], t('You cannot create both a menu link and a sub site menu.'));
      return;
    }
  }

}

/**
 * Create sub site menu.
 *
 * It will also be added as a menu option for basic pages
 * @param $title
 * @param null $uri
 *  If not provided it will be generated.
 * @return string
 *  Menu machine name.
 */
function _ilr_sub_sites_create_menu($title, $uri = NULL) {
  if (!$uri) {
    $uri = drupal_clean_css_identifier($title);
  }
  // Look the table first if the data does exist
  $machine_name = _ilr_sub_sites_get_menu_name_from_uri($uri);

  $menu_name = db_query("SELECT menu_name FROM {menu_custom} WHERE menu_name=:menu_name", array(':menu_name' => $machine_name))->fetchField();
  // Save the record if the data does not exist
  if (!$menu_name) {
    $menu = array(
      'menu_name' => $machine_name,
      'title' => $title,
      'description' => t('SubSite menu'),
    );
    menu_save($menu);

    // Add as a menu option for basic page and registration page.
    _ilr_sub_sites_create_menu_options_for_relevant_content_types($machine_name);

  }
  return $machine_name;
}

/**
 * Sets menu options for relevant content types.
 * @see basic_page.info for what to exclude, and be sure
 * to remove the menu_options from the strongarm.inc files
 */
function _ilr_sub_sites_create_menu_options_for_relevant_content_types($new_menu) {
  $menu_options = variable_get('menu_options_basic_page', array());
  $menu_options[] = $new_menu;

  $relevant_content_types = array('basic_page','registration_page');
  foreach ($relevant_content_types as $key => $machine_name) {
    variable_set('menu_options_' . $machine_name, $menu_options);
  }
}

/**
 * Workaround b/c pathauto_create_alias() not setting the alias
 * @todo Debug so this function is not required
 */
function _ilr_sub_sites_create_pathauto_alias($node) {
  module_load_include('inc', 'pathauto');
    $alias = preg_replace('@[^a-z0-9-]+@','-', strtolower($node->title));
    $path = array(
      'source' => 'node/' . $node->nid,
      'alias' => $alias,
      'language' => LANGUAGE_NONE,
    );
    _pathauto_set_alias($path, NULL, 'insert');
}

/**
 * Create subsite menu for a node.
 *
 * Creates menu and adds link to node to menu
 * @param $node
 */
function _ilr_sub_sites_create_sub_menu_for_node($node) {
  if ($node->type == 'basic_page' && !empty($node->menu['create_subsite'])) {
    $menu_title = empty($node->menu['subsite_title']) ? $node->title : $node->menu['subsite_title'];
    $menu_name = _ilr_sub_sites_create_menu($menu_title);
    // Create node link on new menu
    $link = array(
      'link_path' => 'node/' . $node->nid,
      'link_title' => $node->title,
      'menu_name' => $menu_name,
    );
    menu_link_save($link);
    _ilr_sub_sites_create_pathauto_alias($node);
    return;
  }
}

function _ilr_sub_sites_current_page_is_sub_site() {
  if ($node = _ilr_sub_sites_get_current_node()) {
    return _ilr_sub_sites_get_current_menu_name() != 'main-menu';
  }
  return FALSE;
}

/**
 * Gets the menu assignment of the current page.
 * See ilr_menu_block_blocks() in the profile.
 */
function _ilr_sub_sites_get_current_menu_name() {
  $node = _ilr_sub_sites_get_current_node();
  if ($node) {
    $menu_name = db_select('menu_links', 'ml')
      ->condition('ml.link_path', 'node/' . $node->nid)
      ->fields('ml', array('menu_name'))
      ->execute()
      ->fetchField();

    return strlen($menu_name) ? $menu_name : 'main-menu';
  }
  return 'main-menu';
}

function _ilr_sub_sites_get_current_node() {
  $node = &drupal_static(__FUNCTION__);
  if (!isset($node)) {
    $node = menu_get_object();
  }
  return $node;
}

function _ilr_sub_sites_get_current_subsite_name() {
  $machine_name = _ilr_sub_sites_get_current_menu_name();
  $subsite_name = db_query("SELECT title FROM {menu_custom} WHERE menu_name=:menu_name", array(':menu_name' => $machine_name))->fetchField();
  return $subsite_name;
}

function _ilr_sub_sites_get_header_for_subsite() {
  $block = block_load('ilr_sub_sites', 'ilr_sub_site_header');
  return $block;
}
/**
 * Concatenates menu names since they're limited to 32 characters.
 * See ilr_sub_sites_enable().
 */
function _ilr_sub_sites_get_menu_name_from_uri($uri) {
  $name = strtolower($uri);
  if (strlen($name) > 30) {
    $name = substr($name, 0, 30);
  }
  return $name;
}

function _ilr_sub_sites_get_site_logo($menu_name, $subsite_name) {
  $logos = array(
    'worker-institute' => 'logo-worker-institute',
  );
  if (array_key_exists($menu_name, $logos)) {
    $image = '<img src="/' . drupal_get_path('theme', 'ilr_theme') . '/images/'.$logos[$menu_name].'.svg"';
    $alt = "Cornell University | ILR School | $subsite_name";
    $image .= " alt='$alt' title='$alt'>";
    return $image;
  }
  return NULL;
}



function _ilr_sub_sites_get_subsite_homepage_alias() {
  $menu_name = _ilr_sub_sites_get_current_menu_name();
  $path = db_select('menu_links', 'ml')
    ->condition('ml.plid', '0')
    ->condition('ml.menu_name',$menu_name)
    ->fields('ml', array('link_path'))
    ->execute()
    ->fetchField();
  return drupal_get_path_alias($path);
}

/**
 * Determines whether the current node is a sub site homepage
 * This currently works because all sub sites are at ilr.cornell.edu/subsite.
 */
function _ilr_sub_sites_is_sub_site_homepage($node=NULL) {
  $node = ($node) ? $node : _ilr_sub_sites_get_current_node();
  if (empty($node->nid)) {
    return FALSE;
  }
  $plid = db_select('menu_links', 'ml')
    ->condition('ml.link_path', 'node/' . $node->nid)
    ->fields('ml', array('plid'))
    ->execute()
    ->fetchField();
  return $plid === '0' || $plid === 0;
}
