<?php

/**
 * Implements hook_freedompay_checkout_payload_alter().
 */
function forensics_payments_freedompay_checkout_payload_alter($form_id, &$payload) {
  if ($form_id == 'forensics_debate_camp_payment') {
    $payload['InvoiceNumber']= _forensics_payments_generate_invoice_number();
    $payload['PurchaseItems'] = _forensics_payments_get_purchase_items();
    $payload['BillingAddress'] = _forensics_payments_get_billing_address();
    $payload['AllowInternationalAddresses'] = TRUE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter
 * Adds form validation callback for forensics payment forms
 */
function forensics_payments_form_forensics_debate_camp_payment_entityform_edit_form_alter(&$form, &$form_state) {
  $form['#validate'][] = '_forensics_payment_form_validate';
}

function _forensics_payment_form_validate(&$form, &$form_state) {
  $wrapper = entity_metadata_wrapper('entityform', $form_state['entityform']);
  if (!_forensics_payments_amount_is_valid($wrapper)) {
    form_set_error('field_total_cost', 'Please enter an amount.');
  }
}

/**
 * Confirm that user entered a valid amount to pay: numeric and greater than 0
 */
function _forensics_payments_amount_is_valid($wrapper) {
  $amnt = $wrapper->field_total_cost->value();
  return is_numeric($amnt) && $amnt > 0;
}

function _forensics_payments_get_billing_address() {
  $wrapper = _forensics_payments_get_entityform_wrapper();
  return array(
    "Street1" => $wrapper->field_address_line_1->value(),
    "Street2" => $wrapper->field_address_line_2->value(),
    "City" => $wrapper->field_city->value(),
    "State" => $wrapper->field_state_as_text->value(),
    "PostalCode" => $wrapper->field_zip_code->value(),
    'CountryCode' => $wrapper->field_country_for_forensics->value(),
  );
}

/**
 * Wrapper function for _freedompay_get_entityform_wrapper().
 */
function _forensics_payments_get_entityform_wrapper() {
  if (module_exists('freedompay')) {
    return _freedompay_get_entityform_wrapper();
  }
  return NULL;
}

/**
 * @todo
 * remove this example function once alunni events tickets implements
 */
function _forensics_payments_get_purchase_items() {
  $wrapper = _forensics_payments_get_entityform_wrapper();
  return array(
    array(
      "Price" => $wrapper->field_total_cost->value(),
      "DisplayOrder" => 1,
      "Description" => "Cornell International Debate Camp",
      "Quantity" => 1,
    ),
  );
}

/**
 * Returns a unique invoice number for the registration
 * Based on the number of completed, paid registrations
 */
function _forensics_payments_generate_invoice_number() {
  $prefix = 'debate';
  $invoice_count = _freedompay_get_current_invoice_count_by_type('forensics_debate_camp_payment');
  $offset = 200; // Incremented from the old system
  // Pad the string to 6 places
  $invoice_number = str_pad($invoice_count + $offset, 6, '0', STR_PAD_LEFT);
  return "$prefix$invoice_number";
}
