<?php

///////////////////////////////
// Module-Specific functions //
///////////////////////////////

/**
 * Implements hook_freedompay_checkout_payload_alter().
 */
function forensics_payments_freedompay_checkout_payload_alter($form_id, &$payload) {
  if ($form_id == 'forensics_debate_camp_payment') {
    $payload['InvoiceNumber']= _forensics_payments_generate_invoice_number();
    $payload['PurchaseItems'] = _forensics_payments_get_purchase_items();
    $payload['BillingAddress'] = forensics_payments_get_billing_address();
    $payload['AllowInternationalAddresses'] = TRUE;
  }
}

function forensics_payments_get_billing_address() {
  $wrapper = _forensics_payments_get_entityform_wrapper();
  return array(
    "Street1" => $wrapper->field_address_line_1->value(),
    "Street2" => $wrapper->field_address_line_2->value(),
    "City" => $wrapper->field_city->value(),
    "State" => $wrapper->field_state_as_text->value(),
    "PostalCode" => $wrapper->field_zip_code->value(),
    'CountryCode' => $wrapper->field_country_for_forensics->value(),
  );
}
/**
 * Confirm that user entered a valid amount to pay: numeric and greater than 0
 */
function _forensics_payments_amount_is_valid() {
  $amnt = _forensics_payments_get_total_cost_entered();
  return is_numeric($amnt) && $amnt > 0;
}

/**
 * Wrapper function for _freedompay_get_entityform_wrapper().
 */
function _forensics_payments_get_entityform_wrapper() {
  if (module_exists('freedompay')) {
    return _freedompay_get_entityform_wrapper();
  }
  return NULL;
}

/**
 * Get total cost that user entered
 */
function _forensics_payments_get_total_cost() {
  if ($entityform_wrapper = _forensics_payments_get_entityform_wrapper()) {
    return $entityform_wrapper->field_total_cost->value();
  }
  return 0;
}

/**
 * @todo
 * remove this example function once alunni events tickets implements
 */
function _forensics_payments_get_purchase_items() {
  return [];
  return array(
    array(
      "Price" => 2490,
      "DisplayOrder" => 1,
      "Description" => "A description provided by forensics_payments",
      "Quantity" => 1,
    ),
  );
}

/**
 * Lets user know if he didn't enter a valid amount
 * @see _freedompay_payment_page()
 */
function _forensics_payments_payment_form_errors() {
  $errors = FALSE;
  if (!_forensics_payments_amount_is_valid()) {
    $errors = '<p>Sorry, but there was an error processing your request. Are you sure you entered an amount in US dollars? Please hit your back button, enter the amount you were instructed to pay, and submit your registration again.</p>';
  }
  return $errors;
}

/**
 * Returns a unique invoice number for the registration
 * Based on the number of completed, paid registrations
 */
function _forensics_payments_generate_invoice_number() {
  $prefix = 'debate';
  $invoice_count = _freedompay_get_current_invoice_count_by_type('forensics_debate_camp_payment');
  $offset = 200; // Incremented from the old system
  // Pad the string to 6 places
  $invoice_number = str_pad($invoice_count + $offset, 6, '0', STR_PAD_LEFT);
  return "$prefix$invoice_number";
}
