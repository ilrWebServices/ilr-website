<?php

//////////////////
// Drupal Hooks //
//////////////////

// No drupal hooks right now


///////////////////////////////
// Module-Specific functions //
///////////////////////////////

/**
 * Confirm that user entered a valid amount to pay: numeric and greater than 0
 */
function _forensics_payments_amount_is_valid() {
  $amnt = _forensics_payments_get_total_cost_entered();
  return is_numeric($amnt) && $amnt > 0;
}

/**
 * Determines if the entityform should be in draft mode
 *   - APPROVED transactions are not drafts
 * Note: Called from elavon module, so no need to load it here
 */
function _forensics_payments_get_draft_status() {
  $is_draft = 1;
  if ($wrapper = _forensics_payments_get_entityform_wrapper() && _forensics_payments_amount_is_valid()) {
    $result = _elavon_get_field_collection_data('field_ssl_result_message');
    $is_draft = ($result == 'APPROVED') ? 0 : 1;
  }
  return $is_draft;
}

/**
 * Maps the elavon keys to the entityform field names - REQUIRED
 */
function _forensics_payments_get_entityform_mappings() {
  $mappings = &drupal_static(__FUNCTION__);
  if (!isset($mappings)) {
    $mappings = array(
      "ssl_customer_code" => 'field_full_name',
      "ssl_first_name" => 'field_first_name',
      "ssl_last_name" => 'field_last_name',
      "ssl_avs_address" => 'field_address_line_1',
      "ssl_address2" => 'field_address_line_2',
      "ssl_city" => 'field_city',
      "ssl_state" => 'field_state_as_text',
      'ssl_country' => 'field_country_for_forensics',
      "ssl_avs_zip" => 'field_zip_code',
      "ssl_phone" => 'field_phone',
      'ssl_email' => 'field_email',
      'ssl_amount' => 'field_ssl_amount',
      'ssl_approval_code' => 'field_ssl_approval_code',
      'ssl_card_number' => 'field_ssl_card_number', // Just first 2 digits
      'ssl_invoice_number' => 'field_transinvoicenum',
      'ssl_result_message' => 'field_ssl_result_message',
      'ssl_txn_id' => 'field_ssl_txn_id',
      'ssl_txn_time' => 'field_ssl_txn_time',
    );
  }
  return $mappings;
}

/**
 * Wrapper function for _elavon_get_entityform_wrapper().   DONE
 */
function _forensics_payments_get_entityform_wrapper() {
  if (module_exists('elavon')) {
    return _elavon_get_entityform_wrapper();
  }
  return NULL;
}

/**
 * Get total cost that user entered
 */
function _forensics_payments_get_total_cost_entered() {
  if ($entityform_wrapper = _forensics_payments_get_entityform_wrapper()) {
    return $entityform_wrapper->field_total_cost->value();
  }
  return 0;
}

/**
 * Lets user know if he didn't enter a valid amount
 * @see _elavon_payment_page()
 */
function _forensics_payments_payment_form_errors() {
  $errors = FALSE;
  if (!_forensics_payments_amount_is_valid()) {
    $errors = '<p>Sorry, but there was an error processing your request. Are you sure you entered an amount in US dollars? Please hit your back button, enter the amount you were instructed to pay, and submit your registration again.</p>';
  }
  return $errors;
}

/**
 * Returns a unique invoice number for the registration
 * Based on the number of completed, paid registrations - REQUIRED, DONE
 */
function _forensics_payments_ssl_invoice_number() {
  $prefix = 'debate';
  $invoice_count = _elavon_get_current_invoice_count_by_type('forensics_debate_camp_payment');
  $offset = 200; // Incremented from the old system
  // Pad the string to 6 places
  $invoice_number = str_pad($invoice_count + $offset, 6, '0', STR_PAD_LEFT);
  return "$prefix$invoice_number";
}
