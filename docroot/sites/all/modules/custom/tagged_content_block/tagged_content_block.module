<?php

//////////////////
// Drupal Hooks //
//////////////////

/**
 * Implements hook_bean_types().
 */
function tagged_content_block_bean_types() {
  $plugins = array();
  $plugins['tagged_content'] = array(
    'label' => t('Tagged content'),
    'description' => t('Provides a listing of teasers for chosen content types that are tagged.'),
    'handler' => array(
      'class' => 'TaggedContentBean',
      'parent' => 'bean',
      'path' => drupal_get_path('module', 'tagged_content_block') . '/plugins/bean',
      'file' => 'tagged_content.inc',
    ),
  );
  return $plugins;
}

/**
 * Implements hook_bean_types_api_info().
 */
function tagged_content_block_bean_types_api_info() {
  return array('api' => 4);
}

/**
 * Implements hook_form_alter
 * Adds a validator for tagged content blocks
 */
function tagged_content_block_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == "basic_page_node_form") {
    $form['#validate'][] = '_tagged_content_block_reference_validator';
  }
}

/**
* Implements hook_menu().
*/
function tagged_content_block_menu() {
  $items = array();
  $items['admin/config/content/tagged_content'] = array(
    'title' => t('Tagged Content Block Settings'),
    'description' => t('Configure content types available to tagged content blocks'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tagged_content_block_admin'),
    'file' => 'includes/tagged_content_block.admin.inc',
    'access arguments' => array('administer tagged content block configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_permission()
 */
function tagged_content_block_permission() {
  return array(
    'administer tagged content block configuration' => array(
      'title' => t('Administer Tagged Content Blocks'),
      'description' => t('Configure content types available to tagged content blocks.'),
    ),
  );
}

/**
 * Implements hook_preprocess_hook()
 * Adds category headings on appropriate teasers
 * Updates links from promos
 * Adds default thumbnails when appropriate
 * Removes the read more link
 */
function tagged_content_block_preprocess_node(&$variables) {
  $variables['title_link'] = '';
  $tagged_content_types = variable_get('tagged_content_block_enabled_bundles');
  if ($variables['view_mode'] == 'teaser' && in_array($variables['type'], $tagged_content_types)) {
    _tagged_content_block_add_category_heading($variables);
    if ($variables['type'] == 'promo') {
      _tagged_content_block_update_promo_links($variables);
    }
    if (isset($variables['field_image']) && !count($variables['field_image'])) {
      _tagged_content_block_add_thumbnail($variables);
    }
    // Remove the read more links
    unset($variables['content']['links']['node']['#links']['node-readmore']);
  }
}

/**
 * Implementation of hook_query_TAG_alter
 */
function tagged_content_block_query_random_alter($query) {
  $query->orderRandom();
}

//////////////////////
// Custom functions //
//////////////////////

function _tagged_content_block_add_category_heading(&$variables) {
  $type = $variables['type'];
  $category = _tagged_content_block_get_category_by_type($type);
  $content_type = _tagged_content_block_get_hyphened_type($type);
  $primary_tag = _tagged_content_block_get_primary_term_for_node($variables['node']);
  $variables['content']['category']['#markup'] = "<h3 class='category $content_type'>$category / $primary_tag</h3>";
}

function _tagged_content_block_add_thumbnail(&$variables) {
  $drop_cap = $variables['title'][0];
  $content_type = _tagged_content_block_get_hyphened_type($variables['type']);
  $url = $variables['node_url'];
  $variables['content']['field_image']['#markup'] = "<div class='drop-cap $content_type'><a href='$url'><span>$drop_cap</span></a></div>";
}

/**
 * Enables default content types for tagged content blocks
 * @return array The default content types, needed by
 * _tagged_content_block_default_bundles() of admin.inc
 */
function _tagged_content_block_enable_default_bundles() {
  $enabled_content_types = array(
    'basic_page'          => 'basic_page',
    'news_item'           => 'news_item',
    'promo'               => 'promo',
    'spotlight'           => 'spotlight',
    'student_portrait'    => 'student_portrait',
    'workspan'            => 'workspan',
    'youtube_video'       => 'youtube_video',
  );

  variable_set(
    'tagged_content_block_enabled_bundles',
    $enabled_content_types
  );

  return $enabled_content_types;
}

function _tagged_content_block_get_category_by_type($type) {
  $categories = array(
    'basic_page'          => 'content',
    'news_item'           => 'news',
    'promo'               => 'highlights',
    'spotlight'           => 'spotlight',
    'student_portrait'    => 'student portrait',
    'youtube_video'       => 'video',
  );
  return $categories[$type];
}

function _tagged_content_block_get_hyphened_type($type) {
  return str_replace('_', '-', $type);
}

function _tagged_content_block_get_primary_term_for_node($node) {
  $wrapper = entity_metadata_wrapper('node',$node);
  $tag_array = $wrapper->field_tags->value();
  if (count($tag_array)) {
    return $tag_array[0]->name;
  }
  watchdog('taged_content_block', "Primary term for node '@node' was not found.",
    array(
      '@node' => $wrapper->label(),
      '@entityform_type' => $entityform_type,
    ),
    WATCHDOG_ERROR
  );
  return '';
}

function _tagged_content_block_get_promo_link_from_node($node) {
  $wrapper = entity_metadata_wrapper('node', $node);
  // Internal links
  if (!empty($wrapper->field_referenced_entity) && $wrapper->field_referenced_entity->value()) {
    $nid = $wrapper->field_referenced_entity->value()->nid;
    $url = drupal_get_path_alias("node/$nid");
  } // External links
  else {
    $wrapped_url = $wrapper->field_website_url->value();
    $url = $wrapped_url['url'];
  }
  return $url;
}

/**
 * Loads a block by block id
 */
function _tagged_content_block_load_block($bid) {
  return db_query("SELECT * FROM block WHERE bid = :bid", array(':bid' => $bid))->fetchAssoc();
}

/**
 * Validator for referencing blocks
 *   - Confirms that highlighted blocks have the featured flag
 */
function _tagged_content_block_reference_validator($form, &$form_state) {
  if(count($form_state['values']['field_blocks'][LANGUAGE_NONE][0]['field_highlighted_region'])
    && $bid = $form_state['values']['field_blocks'][LANGUAGE_NONE][0]['field_highlighted_region'][LANGUAGE_NONE][0]['bid']) {
    $block = _tagged_content_block_load_block($bid);
    $bean = bean_load_delta($block['delta']);
    if (empty($bean->data['featured'])) {
      form_set_error('state', t("Only featured blocks can be added to the highlighted region."));
    }
  }
}


function _tagged_content_block_update_promo_links(&$variables) {
  $url = _tagged_content_block_get_promo_link_from_node($variables['node']);
  $variables['node_url'] = $url;

  if (count($variables['content']['field_image'])) {
    $variables['content']['field_image'][0]['#path']['path'] = $url;
  }
}
