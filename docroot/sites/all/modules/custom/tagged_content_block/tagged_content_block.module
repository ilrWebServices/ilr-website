<?php

//////////////////
// Drupal Hooks //
//////////////////

/**
 * Implements hook_bean_types().
 */
function tagged_content_block_bean_types() {
  $plugins = array();
  $plugins['tagged_content'] = array(
    'label' => t('Tagged content'),
    'description' => t('Provides a listing of teasers for chosen content types that are tagged.'),
    'handler' => array(
      'class' => 'TaggedContentBean',
      'parent' => 'bean',
      'path' => drupal_get_path('module', 'tagged_content_block') . '/plugins/bean',
      'file' => 'tagged_content.inc',
    ),
  );
  return $plugins;
}

/**
 * Implements hook_bean_types_api_info().
 */
function tagged_content_block_bean_types_api_info() {
  return array('api' => 4);
}

/**
 * Implements hook_form_alter
 * Adds a validator for tagged content blocks
 */
function tagged_content_block_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == "basic_page_node_form") {
    $form['#validate'][] = '_tagged_content_block_reference_validator';
  }
}

/**
* Implements hook_menu().
*/
function tagged_content_block_menu() {
  $items = array();
  $items['admin/config/content/tagged_content'] = array(
    'title' => t('Tagged Content Block Settings'),
    'description' => t('Configure content types available to tagged content blocks'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tagged_content_block_admin'),
    'file' => 'includes/tagged_content_block.admin.inc',
    'access arguments' => array('administer tagged content block configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_permission()
 */
function tagged_content_block_permission() {
  return array(
    'administer tagged content block configuration' => array(
      'title' => t('Administer Tagged Content Blocks'),
      'description' => t('Configure content types available to tagged content blocks.'),
    ),
  );
}

/**
 * Implements hook_preprocess_hook()
 * Adds category headings on appropriate teasers
 * Updates links from promos
 * Adds default thumbnails when appropriate
 * Removes the read more link
 */
function tagged_content_block_preprocess_node(&$variables) {
  $variables['title_link'] = '';
  $tagged_content_types = array_filter(variable_get('tagged_content_block_enabled_bundles'));
  if ($variables['view_mode'] == 'teaser' && in_array($variables['type'], $tagged_content_types)) {
    if (isset($variables['tagged_content'])) {
      // Use a different image style when just one item
      if (empty($variables['siblings']) || (drupal_is_front_page() && $variables['position'] == 1)) {
        if (!empty($variables['position'])) {
          $variables['content']['field_image'][0]['#image_style'] = 'focussed_hero';
        }
      }
    }

    if ($variables['type'] == 'promo') {
      _tagged_content_block_update_promo_links($variables);
    }

    if (isset($variables['field_image'])) {
      // Add url parameter
      $variables['content']['field_image'][0]['#path']['options']['query'] = ['link_type' => 'image'];
      // Hide the image from screen readers
      $variables['content']['field_image'][0]['#path']['options']['attributes'] = ['aria-hidden' => 'true'];
      if (empty($variables['field_image'])) {
        _tagged_content_block_add_thumbnail($variables);
      }
    }
    // Remove the read more links
    unset($variables['content']['links']['node']['#links']['node-readmore']);
  }
}

/**
 * Implementation of hook_query_TAG_alter
 */
function tagged_content_block_query_random_alter($query) {
  $query->orderRandom();
}

//////////////////////
// Custom functions //
//////////////////////

function _tagged_content_block_add_thumbnail(&$variables) {
  $content_type = _tagged_content_block_get_hyphened_type($variables['type']);
  $url = $variables['node_url'];
  $variables['content']['field_image']['#markup'] = _tagged_content_block_generate_thumbnail_markup($url, $content_type);
}

/**
 * Enables default content types for tagged content blocks
 * @return array The default content types, needed by
 * _tagged_content_block_default_bundles() of admin.inc
 */
function _tagged_content_block_enable_default_bundles() {
  $enabled_content_types = array(
    'basic_page'          => 'basic_page',
    'news_item'           => 'news_item',
    'promo'               => 'promo',
    'post'                => 'post',
    'reflection'          => 'reflection',
    'student_portrait'    => 'student_portrait',
    'wit_article'         => 'wit_article',
    'workspan'            => 'workspan',
    'youtube_video'       => 'youtube_video',
  );

  variable_set(
    'tagged_content_block_enabled_bundles',
    $enabled_content_types
  );

  return $enabled_content_types;
}

function _tagged_content_block_generate_thumbnail_markup($url, $content_type, $text=NULL) {
  $markup = "<div class='thumbnail custom $content_type'><a href='$url'></a></div>";
  return $markup;
}

function _tagged_content_block_get_hyphened_type($type) {
  return str_replace('_', '-', $type);
}

function _tagged_content_block_get_primary_term_for_node($node) {
  $wrapper = _tagged_content_get_wrapper($node);
  if (isset($wrapper->field_tags)) {
    $tag_array = $wrapper->field_tags->value();
    if (count($tag_array)) {
      return $tag_array[0]->name;
    }
  }

  watchdog('tagged_content_block', "Primary term for node '@node' was not found.",
    array(
      '@node' => $wrapper->label(),
    ),
    WATCHDOG_ERROR
  );
  return '';
}

function _tagged_content_block_get_promo_link_from_node($node) {
  $url = &drupal_static(__FUNCTION__ . $node->nid); // nid added since there can be multiple per page, but not per node
  if (!isset($url)) {
    $wrapper = _tagged_content_get_wrapper($node);
    // Internal links
    if (!empty($wrapper->field_internal_link) && $wrapper->field_internal_link->value()) {
      $nid = $wrapper->field_internal_link->value()->nid;
      $url = '/' . drupal_get_path_alias("node/$nid");
    } // External links
    else {
      $wrapped_urls = $wrapper->field_website_url->value();
      $wrapped_url = reset($wrapped_urls);
      $url = $wrapped_url['url'];
    }
  }
  return $url;
}

/**
 * Loads a block by block id
 */
function _tagged_content_block_load_block($bid) {
  return db_query("SELECT * FROM block WHERE bid = :bid", array(':bid' => $bid))->fetchAssoc();
}

/**
 * Validator for referencing blocks
 *   - Confirms that highlighted blocks have the featured flag
 */
function _tagged_content_block_reference_validator($form, &$form_state) {
  global $user;
  if (!in_array('administrator', $user->roles)) {
    if(count($form_state['values']['field_blocks'][LANGUAGE_NONE][0]['field_highlighted_region'])
      && $bid = $form_state['values']['field_blocks'][LANGUAGE_NONE][0]['field_highlighted_region'][LANGUAGE_NONE][0]['bid']) {
      $block = _tagged_content_block_load_block($bid);
      $bean = bean_load_delta($block['delta']);
      if (empty($bean->data['featured'])) {
        form_set_error('state', t("Only featured blocks can be added to the highlighted region."));
      }
    }
  }
}

function _tagged_content_block_is_event($url) {
  return strpos($url, 'events.cornell.edu') !== FALSE;
}

function _tagged_content_block_update_promo_links(&$variables) {
  $url = _tagged_content_block_get_promo_link_from_node($variables['node']);
  $variables['node_url'] = $url;
  if (isset($variables['content']['field_image']) && count($variables['content']['field_image'])) {
    $variables['content']['field_image'][0]['#path']['path'] = ltrim($url, '/');
    // Append the query parameter
    $variables['content']['field_image'][0]['#path']['options']['query'] = ['link_type' => 'image'];
    // Hide the image from screen readers
    $variables['content']['field_image'][0]['#path']['options']['attributes'] = ['aria-hidden' => 'true'];
  }
}

function _tagged_content_get_wrapper($node) {
  return ilr_get_node_wrapper($node);
}

/**
 * Add the relevant content to the group for the 2018 design
 * Currenty: Date, Title, Teaser, Read more
 */
function tagged_content_block_field_group_pre_render_alter(&$element, $group, & $form) {
  $node = isset($form['#node']) ? $form['#node'] : NULL;
  if ($node) {
    if ($group->group_name == 'group_content') {
      $wrapper = _tagged_content_get_wrapper($form['#node']);
      $contents = ['pub_date', 'title','teaser', 'more_link'];
      foreach ($contents as $key => $name) {
        _tagged_content_add_markup_to_group($element, $wrapper, $name, $key);
      }
    }
  }
}

function _tagged_content_add_markup_to_group(&$element, $wrapper, $name, $count) {
  $markup = '';
  $url = ilr_get_wrapper_alias($wrapper);
  switch ($name) {
    case 'pub_date':
      if (!empty($wrapper->field_published_date)) {
        $timestamp = $wrapper->field_published_date->value();
        if (!empty($timestamp)) {
          $pub_date = format_date($timestamp ,'custom','M j, Y');
          $markup = ilr_get_bem_markup($pub_date, 'news', 'date');
        }
      }
      break;
    case 'title':
      // @todo refactor to make this clearer, since tagged content !== news
      $title = news_get_news_title($wrapper);
      $markup = ilr_get_bem_markup($title, 'news', 'title',[],'<h2><a href="'.$url.'?link_type=title">','</a></h2>');
      break;
    case 'teaser':
      $summary = _tagged_content_get_summary($wrapper);
      $markup = ilr_get_bem_markup($summary, 'news', 'teaser');
      break;
    case 'more_link':
      $title = $wrapper->label();
      $node_title_stripped = strip_tags($title);
      $link = '<a href="'.$url.'?link_type=read-more" aria-hidden="true" rel="tag" title="'.$title.'">Read more<span class="element-invisible"> about '. $title .'</span></a>';
      $markup = ilr_get_bem_markup($link, 'news', 'more-link');
      break;
    default:
      $markup = '';
      break;
  }
  if (!empty($markup)) {
    $element[$name] = [
      '#markup' => $markup,
      '#weight' => $count += 3,
    ];
  }
}

function _tagged_content_get_summary($wrapper) {
  $summary = '<!-- SUMMARY MISSING FROM CONTENT -->';

  $fields_to_check = ['field_description', 'field_teaser'];

  foreach ($fields_to_check as $field) {
    if (isset($wrapper->$field) && !empty($wrapper->$field->value())) {
      if (isset($wrapper->$field->value()['value'])) {
        return $wrapper->$field->value()['value'];
      }
      return "<p>" . $wrapper->$field->value() . "</p>";
    }
  }

  if (isset($wrapper->body)) {
    $summary = _tagged_content_create_summary($wrapper->body->value()['value']);
  }

  return $summary;
}

function _tagged_content_create_summary($string) {
  $alter = array(
    'max_length' => 200,
    'ellipsis' => TRUE,
    'word_boundary' => TRUE,
    'html' => TRUE,
    );
  $trimmed_text = views_trim_text($alter, $string);
  return $trimmed_text;
}
