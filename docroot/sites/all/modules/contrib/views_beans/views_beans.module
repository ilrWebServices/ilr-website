<?php
/**
 * @file views_beans.module
 * This module allows Views Content Panes to be used as Bean types.
 */
/**
 * Implements hook_menu().
 */
function views_beans_menu() {
  $items = array();

  $items['admin/structure/block-types/views'] = array(
    'title' => 'View Panes Bean Types',
    'type' => MENU_LOCAL_TASK,
    'weight' => -10,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('views_beans_settings'),
    'access arguments' => array('administer bean types'),
    'file' => 'views_beans.admin.inc',
  );

  return $items;
}
/**
 * Implements hook_bean_types_api_info().
 */
function views_beans_bean_types_api_info() {
  return array('api' => 4);
}

/**
 * Implements hook_bean_types().
 */
function views_beans_bean_types() {
  $bean_types = &drupal_static(__FUNCTION__);
  if (!isset($bean_types)) {
    // Getting Views information causes recursion
    // So check if static variable is set.
    $bean_types = array();
    $bean_types = _views_beans_get_bean_types();
  }
  if (empty($bean_types)) {
    return;
  }
  $plugins = array();
  $bean_type_num = 1;
  foreach ($bean_types as $bean_type_name => $subtypes) {
    $plugins['views_beans_type_' . $bean_type_num++] = array(
      'label' => $bean_type_name,
      'subtypes' => $subtypes,
      'handler' => array(
        'class' => 'ViewBean',
        'parent' => 'bean',
        'path' => drupal_get_path('module', 'views_beans') . '/plugins/bean',
        'file' => 'view_bean.inc',
      ),
    );
  }


  return $plugins;
}

/**
 * Utility Function to get bean types.
 *
 * A Bean Type is made for each View Pane Category selected on the admin form.
 * @return array
 */
function _views_beans_get_bean_types() {
  $used_views = _views_beans_get_used_displays();
  $used_displays = array();
  $bean_types = array();
  if ($used_views) {
    foreach ($used_views as $view_name => $display_ids) {
      $view = views_get_view($view_name);
      if ($view) {
        // Ensure displays are actually on View
        $displays = array_intersect_key($view->display, array_flip($display_ids));
        foreach ($displays as $display_id => $display) {
          if (isset($display->display_options['pane_category'])) {
            $bean_type_name = $display->display_options['pane_category']['name'];
          }
          else {
            $bean_type_name = 'View Panes';
          }
          $bean_types[$bean_type_name]["$view_name-$display_id"] = $view->human_name . ' : ' . $display->display_title;
        }
      }
    }
  }
  return $bean_types;
}

/**
 * Separate out used displays
 * @return array
 */
function _views_beans_get_used_displays() {
  $used_views = array();
  module_load_include('inc', 'views_content', 'plugins/content_types/views_panes');
  $displays = views_content_views_panes_content_type_content_types('views_panes');
  $views_beans_bean_types = variable_get('views_beans_bean_types', array());
  $views_beans_bean_types = array_filter($views_beans_bean_types);
  foreach ($displays as $subtype => $content_type) {
    $bean_type = $content_type['category'][0];
    if (isset($views_beans_bean_types[$bean_type])) {
      list($view_name, $display_id) = explode('-', $subtype);
      $used_views[$view_name][] = $display_id;
    }


  }
  return $used_views;
}

/**
 * Ajax Callback for selecting View Display.
 *
 * Return fieldset for View Pane config form.
 */
function _ilr_bean_view_ajax_select_display($form, $form_state) {
  $form['view_pane'] += views_content_views_panes_content_type_edit_form(array(), $form_state);
  return $form['view_pane'];

}