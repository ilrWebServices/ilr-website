<?php
/**
 * @file
 * Code for the ILR Reflection feature.
 */

include_once 'ilr_reflection.features.inc';

/**
 * Implements hook_block_info().
 */
function ilr_reflection_block_info() {
  $blocks['reflection_node_form'] = array(
    'info' => t('Add a reflection'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 * Creates a block for the add reflection form
 */
function ilr_reflection_block_view($delta = ''){
  $block = array();

  switch ($delta) {
    case 'reflection_node_form':
      module_load_include('inc', 'node', 'node.pages');
      $title = drupal_get_title(); // Store the original title
      $form = node_add('reflection');
      drupal_set_title($title, PASS_THROUGH); // Restore the original title
      $block['subject'] = t('Share a Memory');
      $block['content']['form'] = $form;

      // Hide the vertical tabs in the block version
      $tabs = array('revision_information','author','options','menu','path');
      foreach ($tabs as $key => $name) {
        if (isset($form[$name])) {
          $form[$name]['#access'] = false;
        }
      }
  }
  return $block;
}

/**
 * Implements hook_form_alter().
 * Removes the youtube_video field for most roles
 * Updates the button text for the add reflection form
 */
function ilr_reflection_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'reflection_node_form') {
    if (!_ilr_user_has_role(array('administrator','contributor'))) {
      $form['field_tags']['#access'] = FALSE;
      $form['#validate'][] = '_ilr_reflection_spam_handler';
    }
    $form['disclaimer']['#markup'] = '<p class="disclaimer">ILR reserves the right to edit submissions for grammar, punctuation and other editorial considerations, and to repost submissions on additional school channels.</p>';
    $form['disclaimer']['#weight'] = 12;
    $form['actions']['submit']['#value'] = 'Add my reflection';
  }
}


/**
 * Implements hook_node_insert()
 * Looks for reflection node creation
 *   - Sends email to reflection admins
 *   - Sets the message for the user
 */
function ilr_reflection_node_insert($node) {
  if($node->type == "reflection") {

    drupal_set_message(t('Thank you for sharing a part of your ILR story. We hope you will join us for an upcoming <a href="http://events.cornell.edu/search/events/1?event_types%5B%5D=41672">event</a> and please stay connected with us on <a href="https://www.facebook.com/ILRSchool">Facebook</a>, <a href="https://instagram.com/cornellilr">Instagram</a> and <a href="https://www.linkedin.com/edu/cornell-university-ilr-school-50020">Linked In</a>.'));
    _ilr_reflection_admin_notification($node);
    if ($node = menu_get_object()) {
      drupal_goto('node/'. $node->nid);
    }
  }
}

/**
 * Implements hook_node_presave().
 * Makes sure that reflections are tagged "reflection"
 * Adds the terms from the "parent" page
 */
function ilr_reflection_node_presave($node) {
  if ($node->type == 'reflection') {
    $term_present = FALSE;
    _ilr_reflection_add_terms_to_node($node);
  }
}

/**
 * Implements hook_node_view().
 * Calls required formatting function(s) for reflections
 * Adds javascript
 * Checks for redirection of reflection to parent page
 */
function ilr_reflection_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'reflection') {
    _ilr_reflection_format_class_year($node);
    $js_added = drupal_static(__FUNCTION__);
    if (!$js_added) {
      drupal_add_js(drupal_get_path('module','ilr_reflection') . '/ilr_reflection.js', array('type' => 'file', 'scope' => 'footer'));
      drupal_add_js(drupal_get_path('module','ilr_social_sharing') . '/ilr_social_sharing.js', array('type' => 'file', 'scope' => 'footer'));

      if ($view_mode == 'teaser') {
        $current_node = menu_get_object();
        $setting = array('ilr_social_sharing' => array('currentNid' => $current_node->nid));
        $node->content['#attached']['js'][] = array(
          'data' => $setting,
          'type' => 'setting',
        );
      }
      $js_added = TRUE;
    }
    if ($view_mode == 'full' && isset($_GET['p'])) {
      _ilr_reflection_redirect_to_parent($_GET['p']);
    }
  }
}

/**
 * Implements hook_preprocess_node().
 * Moves the social share markup to the end of the content array
 * Sets a dummy value in field_image so that tagged_content_block doesn't add bogus markup
 */
function ilr_reflection_preprocess_node(&$variables) {
  if ($variables['type'] == 'reflection') {
    if (isset($variables['content']['social_share'])) {
      $variables['content']['social_share']['#weight'] = $variables['content']['field_full_name']['#weight'] + 1;
    }
    if (isset($variables['field_image']) && empty($variables['field_image'])) {
      $variables['field_image'] = array('keep_empty');
    }
  }
}

/**
 * Implements hook_mail().
 * This is the email sent to the admin
 */
function ilr_reflection_admin_notification_mail($key, &$message, $params) {
  $sitename = variable_get('site_name', 'Drupal');

  $message['headers']['MIME-Version'] = '1.0';
  $message['headers']['Content-Type'] = 'text/plain;charset=utf-8';
  $message['subject'] = t("A new reflection has been submitted");
  $message['body'][] = $params['content'];
  $message['body'][] = "\n--\r";
  $message['body'][] = t("This is an automatic e-mail from $sitename.");
}

/**
 * Adds the "reflection" tag to reflections,
 * as well as the terms from the "parent" page
 */
function _ilr_reflection_add_terms_to_node(&$node) {
  $wrapper = ilr_get_node_wrapper($node);
  $term = taxonomy_get_term_by_name('reflection');
  $reflection_tid = array(key($term));
  $parent_tids = _ilr_reflection_get_parent_tids();
  $tids = array_merge($reflection_tid, $parent_tids);
  $wrapper->field_tags->set($tids);
  $node = $wrapper->raw();
  return $node;
}
/**
 * Custom function to get the reflection admins
 */
function _ilr_reflection_admin_emails() {
  if ($admins = ilr_get_users_by_rolename('reflection admin')){
    $admin_emails = array();
    foreach ($admins as $admin) {
      $admin_emails[] = "{$admin->name} <{$admin->mail}>";
    }
    return $admin_emails;
  }
  return FALSE;
}

/**
 * Custom function to send the notification
 */
function _ilr_reflection_admin_notification($node) {
  if ($admins = _ilr_reflection_admin_emails()) {
    $recipients = join(', ', $admins);
    $url = url('node/' . $node->nid . '/edit', array('absolute' => TRUE));
    $params = array(
      'content' => "A new reflection has been submitted. Edit and/or publish it at <a href='$url'>$url</a>.",
    );
    drupal_mail(
      'ilr_reflection_admin_notification',
      'node_update',
      $recipients,
      LANGUAGE_NONE,
      $params,
      'Cornell University ILR School <ilr-noreply@cornell.edu>'
    );
  }
}

/**
 * Returns the last two digits of the class year
 * prepended with an apostrophe
 */
function _ilr_reflection_format_class_year(&$node) {
  if (count($node->field_year_as_list_text) && count($node->field_full_name)) {
    $year = $node->content['field_year_as_list_text'][0]['#markup'];
    unset($node->content['field_year_as_list_text']);
    $node->content['field_full_name'][0]['#markup'] .= ", '" . substr($year, -2);
  }
}

function _ilr_reflection_get_parent_tids() {
  if ($node = menu_get_object()) {
    if ($node->type != "reflection") {
      $wrapper = ilr_get_node_wrapper($node);
      if (isset($wrapper->field_tags)) {
        $tids = array();
        foreach ($wrapper->field_tags->getIterator() as $delta => $term_wrapper) {
          $tids[] = $term_wrapper->tid->value();
        }
        return $tids;
      }
    }
  }
  return array();
}

/**
 * Redirects to the parent page
 */
function _ilr_reflection_redirect_to_parent($parent_nid) {
  if ($parent_wrapper = ilr_get_node_wrapper($parent_nid)) {
    if ($parent_wrapper->status->value() == 1 && $node = menu_get_object()) {
      $nid = $node->nid;
      drupal_goto('node/'. $parent_nid, array('fragment' => $nid));
    }
  }
}

/**
 * Custom function to remove spam
 * Some bots are getting past the honeypot, and they all appear to use a
 * pipe (|) in the title.  6/15/2015
 */
function _ilr_reflection_spam_handler($form, &$form_state) {
  if (strpos($form_state['values']['title'], "|")) {
    form_set_error('title', t('Sorry, the title contains an invalid character'));
  }
}
