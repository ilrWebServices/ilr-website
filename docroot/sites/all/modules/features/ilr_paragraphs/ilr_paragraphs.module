<?php
/**
 * @file
 * Code for the ILR Paragraphs feature.
 */

include_once 'ilr_paragraphs.features.inc';

/**
 * Implements hook_preprocess_entity().
 *
 * Prepares variables for the template(s).
 *
 */
function ilr_paragraphs_preprocess_entity(&$variables) {
  if ($variables['entity_type'] == 'paragraphs_item') {
    $preprocessFunction = '_ilr_paragraphs_preprocess_' . $variables['paragraphs_item']->bundle;
    if (function_exists($preprocessFunction)) {
      $preprocessFunction($variables);
    }
  }
}

/**
 * Implements hook_entity_presave().
 *
 * Ensures that the hex codes on paragraph bundles
 * do not include the "#"
 */
function ilr_paragraphs_entity_presave($entity, $type) {
  if ($type == 'paragraphs_item') {
    switch ($entity->bundle) {
      case 'action_callout':
      case 'social_callout':
        _ilr_paragraphs_check_fields_for_hash($entity);
      default:
        break;
    }
  }
}

/**
 * Implements hook_preprocess_field().
 *
 */
function ilr_paragraphs_preprocess_field(&$variables) {
  // Preprocess select fields in select paragraph bundle types
  $paragraph_bundles = [
    'compare_three',
    'featured_promo',
    'field_people_list',
    'sponsor_message',
    'unit_contact_info',
  ];
  if (in_array($variables['element']['#bundle'], $paragraph_bundles)) {
    _ilr_paragraphs_process_fields($variables);
  }

  // Add paragraph bundle type to the class of every item contained in a paragraph field.
  if ($variables['element']['#field_type'] == 'paragraphs') {
    foreach ($variables['items'] as $key => $item) {
      $bundle = array_values($item['entity']['paragraphs_item'])[0]['#bundle'];
      $variables['items'][$key]['#classes'] = drupal_html_class("paragraph-type-$bundle");
    }
  }
}

/**
 * Performs field-level alterations to sepcific fields in specific paragraph bundles
 */
function _ilr_paragraphs_process_fields(&$variables) {
  switch ($variables['element']['#field_name']) {
    case 'field_image': case 'field_youtube_video':
      switch ($variables['element']['#bundle']) {
        case 'featured_promo':
          _ilr_paragraphs_add_class_to_field($variables,
            _ilr_paragraphs_field_has_value($variables, 'field_align_left_right', 'right') ?
            'image-right' :
            'image-left');
          break;
      }
      break;
    case 'field_animated_text_card':
      switch ($variables['element']['#bundle']) {
        case 'compare_three':
          drupal_add_js(drupal_get_path('module','ilr_paragraphs') . '/ilr_paragraphs_compare_three.js', array('type' => 'file', 'scope' => 'footer'));
          break;
      }
      break;
    case 'field_comments':
      switch ($variables['element']['#bundle']) {
        case 'sponsor_message':
          _ilr_paragraphs_add_class_to_field($variables, 'centered-blurb');
          if (_ilr_paragraphs_field_has_value($variables, 'field_title_icon_none', 'Icon')) {
            _ilr_paragraphs_add_class_to_field($variables, 'tower');
          }
          break;
      }
      break;
    case 'field_full_name':
      switch ($variables['element']['#bundle']) {
        case 'field_people_list':
          _ilr_paragraphs_link_person_to_profile($variables);
          break;
      }
      break;
    case 'field_social_channels':
      switch ($variables['element']['#bundle']) {
        case 'unit_contact_info':
          _ilr_paragraphs_add_class_to_field($variables, 'social');
          break;
      }
      break;
  }
}

/**
 * Adds a class to a field
 */
function _ilr_paragraphs_add_class_to_field(&$variables, $class) {
  $variables['classes_array'][] = $class;
  $variables['attr'] = drupal_attributes(array(
    'class' => $variables['classes_array'],
  ));
}

/**
 * Returns true if a field has a specific value
 */
function _ilr_paragraphs_field_has_value(&$variables, $field, $value) {
  $result = false;
  if ($variables['element']['#object']->{$field}['und'][0]['value'] == $value) {
    $result = true;
  }
  return $result;
}

/**
 * Links people in field_people_list's to their ilr profile page.
 * Uses the /directory/{$netid} pattern to specify the alias to the profile page.
 */
function _ilr_paragraphs_link_person_to_profile(&$variables) {
  $net_id = $variables['element']['#object']->field_netid['und'][0]['value'];
  if ($net_id != '') {
    $full_name = $variables['element']['#object']->field_full_name['und'][0]['value'];
    $markup = '<a href="/directory/'.$net_id.'">'.$full_name.'</a>';
    $variables['items'][0]['#markup'] = $markup;
  }
}

function _ilr_paragraphs_preprocess_action_callout(&$variables) {
  $wrapper = entity_metadata_wrapper('paragraphs_item', $variables['paragraphs_item']);
  $variables['background_image'] = file_create_url($wrapper->field_image->value()['uri']);
  $variables['overlay'] = $wrapper->field_description->value();
  $variables['tagline'] = $wrapper->field_headline->value();
  $variables['cta'] = $wrapper->field_short_title->value();
  if ($wrapper->field_callout_action->value() == 1) {
    $url_array = $wrapper->field_website_url->value();
    $href = (isset($url_array['url']))
      ? $url_array['url']
      : $url_array[0]['url'];
  }
  else {
   $href = '#';
  }
  $variables['href'] = $href;
}

function _ilr_paragraphs_preprocess_social_callout(&$variables) {
  $wrapper = entity_metadata_wrapper('paragraphs_item', $variables['paragraphs_item']);
  $variables['heading'] = $wrapper->field_headline->value();
  $variables['channels'] = _ilr_paragraphs_prepare_social_callout_channels($wrapper->field_website_url->value());
  $variables['hashtag'] = $wrapper->field_short_title->value();
  $variables['bg_color'] = $wrapper->field_description->value();
}

/**
 * Checks for customized urls for our 5 potential social channels
 * Updates the link url if a matching url is found
 */
function _ilr_paragraphs_prepare_social_callout_channels($urls) {
  $included_channels = [];
  $channels = [ // Multi-dimensional so that we can render correct casing
    'linkedin' => ['LinkedIn' => 'https://www.linkedin.com/company/cornell-university-ilr-school'],
    'facebook' => ['Facebook' => 'https://facebook.com/ilrschool'],
    'twitter' => ['Twitter' => 'https://twitter.com/CornellILR'],
    'instagram' => ['Instagram' => 'https://instagram.com/cornellilr'],
    'snapchat' => ['Snapchat' => 'https://www.snapchat.com/add/cornellilr']
  ];

  foreach ($urls as $url) {
    $channel = strtolower($url['title']);
    if (array_key_exists($channel, $channels)) {
      $channel_info = $channels[$channel];
      $key = key($channel_info);
      $included_channels[$key] = (!empty($url['url']) && strpos($url['url'], $channel) > 0)
        ? $url['url']
        : $channel_info[$key];
    }
  }
  return $included_channels;
}

function _ilr_paragraphs_check_fields_for_hash(&$entity) {
  $fields_to_check = ['field_description', 'field_short_title'];

  foreach ($fields_to_check as $field_name) {
    if (!empty($entity->{$field_name})) {
      $submitted_value = $entity->{$field_name}[LANGUAGE_NONE][0]['value'];
      if (strpos($submitted_value, '#') === 0) {
        $entity->{$field_name}[LANGUAGE_NONE][0]['value'] = ltrim($submitted_value, '#');
      }
    }
  }
}
