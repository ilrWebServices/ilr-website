<?php
/**
 * @file
 * Code for the ilr_sdc_listings feature.
 *
 * @todo How should the placement for calendar nav view block should be handled.
 */

include_once 'ilr_sdc_listings.features.inc';


/**
 * Implements hook_playlist_feeds_after_import().
 *
 * Automatically run other imports after course import is run.
 * Run faculty/class assigner.
 */
function ilr_sdc_listings_feeds_after_import(FeedsSource $source) {
  $chained_importers = _ilr_sdc_listings_get_importer_ids();
  $importer_index = array_search($source->importer->id, $chained_importers);
  if ($importer_index !== FALSE) {
    if ($importer_index < count($chained_importers) - 1) {
      // Run the next importer automatically.
      $source = feeds_source($chained_importers[$importer_index + 1]);
      if ($source) {
        $source->startImport();
      }
    }
    else {
      module_load_include('inc', 'ilr_sdc_listings', 'ilr_sdc_listings.feeds');
      // Last importer assign faculty to classes
      _ilr_sdc_listings_set_faculty_for_classes();
    }
  }
}

/**
 * Implements hook_feeds_after_parse().
 *
 * Loop through all results from feed and prepare for import.
 */
function ilr_sdc_listings_feeds_after_parse(FeedsSource $source, FeedsParserResult $result) {
  module_load_include('inc', 'ilr_sdc_listings', 'ilr_sdc_listings.feeds');
  $importer_ids = _ilr_sdc_listings_get_importer_ids();

  if (in_array($source->importer->id, $importer_ids)) {
    foreach ($result->items as &$item) {
      _ilr_sdc_listings_prepare_source_item($item, $source);
    }
  }
}

/**
 * Get importer files.
 * @return array
 *  Key are importer ids. Values are names of import files.
 */
function _ilr_sdc_listings_get_importer_files() {
  $importer_files = array(
    'sdc_course_importer' => 'ncourse',
    'sdc_class_importer' => 'nclass',
    'sdc_faculty_importer' => 'facultyFromSDC',
  );
  return $importer_files;
}

/**
 * Implements hook_menu().
 *
 * Provide callback for redirecting from catalog number to node.
 */
function ilr_sdc_listings_menu() {
  $items = array();

  $items['catalog-course/%'] = array(
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'page callback' => '_ilr_sdc_listings_catalog_redirect',
    'page arguments' => array(1),
  );
  return $items;
}

/**
 * Redirect to the node page the matches the catalog number.
 * @param $catalog_num
 * @return int
 */
function _ilr_sdc_listings_catalog_redirect($catalog_num) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'sdc_course')
    ->fieldCondition('field_catalog_prefix', 'value', $catalog_num);
  $results = $query->execute();
  if (!empty($results['node'])) {
    $nid = array_pop(array_keys($results['node']));
    drupal_goto("node/$nid");
    return;
  }
  return MENU_NOT_FOUND;
}

/**
 * Implements hook_node_view().
 */
function ilr_sdc_listings_node_view($node, $view_mode, $langcode) {

  switch ($node->type) {
    case 'sdc_course':
      _ilr_sdc_listings_course_add_classes($node, $view_mode);
  }
}

/**
 * Add class listing form to node course view.
 * @param $course_node
 * @param $view_mode
 */
function _ilr_sdc_listings_course_add_classes($course_node, $view_mode) {

  if ($view_mode == 'full') {
    $class_nids = _ilr_sdc_listings_get_classes_for_course($course_node);
    $class_selected = _ilr_sdc_listings_get_class_from_url();
    if ($class_selected && !in_array($class_selected, $class_nids)) {
      drupal_set_message(t('The class you selected is no longer available.'));
    }
    if ($class_nids) {
      $class_nodes = node_load_multiple($class_nids);
      $has_override_price = _ilr_sdc_listings_class_has_override_price($class_nodes, $course_node);
      $form = drupal_get_form('ilr_sdc_listings_class_reg_form', $class_nodes, $has_override_price);
      $course_node->content['classes'] = $form;
      if ($has_override_price) {
        // If there is any class that has a different price we don't show price on course level
        unset($course_node->content['field_price']);
      }
    }
    else {
      $course_node->content['classes'] = array(
        '#type' => 'markup',
        // @todo Decide on exact wording for no classes. Should this be configurable?
        '#markup' => t('There are currently no sessions offered.'),
      );
    }
    $course_node->content['classes']['#weight'] = 2;
  }
}

/**
 * Form function to create class registration form.
 * @param $form
 * @param $form_state
 * @param $class_nodes
 * @param $has_override_price
 * @return array
 */
function ilr_sdc_listings_class_reg_form($form, &$form_state, $class_nodes, $has_override_price) {
  $render_arrays = node_view_multiple($class_nodes, 'teaser');
  foreach (element_children($render_arrays['nodes']) as $nid) {
    // Remove title because it is the same as the course
    $render_array = & $render_arrays['nodes'][$nid];
    $render_array['#node']->title = '';
    unset($render_array['links']);
    if (!$has_override_price) {
      unset($render_array['field_price']);
    }
    $options[$nid] = drupal_render($render_arrays['nodes'][$nid]);
  }

  $form['class'] = array(
    '#title' => t('Select the session you\'d like to attend'),
    '#type' => 'radios',
    '#options' => $options,
    '#required' => TRUE,
    '#default_value' => _ilr_sdc_listings_get_class_from_url(),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Register'),
  );
  return $form;
}

/**
 * Retrieve the class nid from the url.
 * @return int|null
 */
function _ilr_sdc_listings_get_class_from_url() {
  if (!empty($_GET['class'])) {
    $class_selected = $_GET['class'];
    if (is_numeric($class_selected)) {
      return $class_selected;
    }
  }
  return NULL;
}

/**
 * Determines if any of the classes for course have different prices.
 * @param $class_nodes
 * @param $course_node
 * @return bool
 */
function _ilr_sdc_listings_class_has_override_price($class_nodes, $course_node) {
  $course_wrapper = entity_metadata_wrapper('node', $course_node);
  $course_price = $course_wrapper->field_price->value();
  foreach ($class_nodes as $class_node) {
    $class_wrapper = entity_metadata_wrapper('node', $class_node);
    if ($course_price != $class_wrapper->field_price->value()) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Get class nids for this course.
 * @param $course_node
 * @return array
 *  nids for classes
 */
function _ilr_sdc_listings_get_classes_for_course($course_node) {
  $today = date('Y-m-d');
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'sdc_class')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_course', 'target_id', $course_node->nid)
    ->fieldCondition('field_registration_end_date', 'value', $today, '>=');
  $results = $query->execute();
  if (!empty($results['node'])) {
    return array_keys($results['node']);
  }
  return array();
}

/**
 * Implements hook_preprocess_hook()
 *
 * Remove node URL from SDC Faculty nodes.
 */
function ilr_sdc_listings_preprocess_node(&$variables) {
  if ($variables['type'] == 'sdc_faculty' && $variables['view_mode'] == 'teaser') {
    $variables['remove_title_link'] = TRUE;
  }
}

/**
 * Alter the default value for a Views date argument.
 *
 * @param object $argument
 *   The argument object.
 * @param string $value
 *   The default value created by the argument handler.
 */
function ilr_sdc_listings_date_default_argument_alter(&$argument, &$value) {
  $view = $argument->view;
  if ($view->name == 'sdc_class_calendar' && $view->current_display == 'block_nav') {
    if ($url_month = _ilr_sdc_listings_get_url_month_arg()) {
      $value = $url_month;
    }
  }
}

/**
 * Get Views Month Arg from URL.
 *
 * @return string
 *  Month in format YYYY-MM
 */
function _ilr_sdc_listings_get_url_month_arg() {
  if ($url_date = arg(1)) {
    $value = substr($url_date, 0, 7);
    return $value;
  }
  return NULL;
}

/**
 * Implements hook_views_pre_render().
 *
 * Attach month select form to Calender Nav Block.
 * @param $view
 *   The view object about to be processed.
 */
function ilr_sdc_listings_views_pre_render(&$view) {
  if ($view->name == 'sdc_class_calendar' && $view->current_display == 'block_nav') {
    $view->attachment_before = drupal_render(drupal_get_form('_ilr_listings_sdc_select_month_form'));
  }
}

/**
 * Form to select month in Calendar Nav.
 *
 * Form redirects via javascript.
 */
function _ilr_listings_sdc_select_month_form($form, &$form_state) {
  if ($url_month = _ilr_sdc_listings_get_url_month_arg()) {
    $start_month = $url_month;
  }
  else {
    $start_month = date('Y-m');
  }
  $base_path = '/sdc-course-catalog/';
  $month_options = _ilr_sdc_listings_get_month_options($start_month, 15, $base_path);

  $form['ilr_sdc_month_redirect'] = array(
    '#type' => 'select',
    '#options' => $month_options,
    '#default_value' => $base_path .$start_month,
  );
  $form['#attached']['js'] = array(
    drupal_get_path('module', 'ilr_sdc_listings') . '/js/ilr_sdc_listings.js',
  );
  return $form;
}

/**
 * Get month options for dropdown.
 * @param $start_month
 * @param $month_count
 * @param $key_prefix
 * @return array
 *  key - URL to redirect to will include month Views argument.
 *  values - Label for month. "August 2014"
 */
function _ilr_sdc_listings_get_month_options($start_month, $month_count, $key_prefix = '') {
  $month_options = array();
  $half_count = round($month_count/2);
  $month = date('Y-m', strtotime("-3 months", strtotime($start_month)));
  $i = 0;
  while ($i++ < $month_count) {
    $month_options[$key_prefix . $month] = date('M Y', strtotime($month));
    $month = date('Y-m', strtotime("+1 months", strtotime($month)));
  }
  return $month_options;
}