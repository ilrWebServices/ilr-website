<?php
/**
 * @file
 * Code for the People Profiles feature.
 */

include_once 'people_profiles.features.inc';

require_once DRUPAL_ROOT . '/../config/get_departments.php';

/**
 * Implements hook_init().
 */
function people_profiles_init() {
  global $theme;
  if ($theme == 'ilr_theme') {
    drupal_add_js(drupal_get_path('module', 'people_profiles') . '/people_profiles.js', array(
        'type' => 'file',
        'scope' => 'footer'
      ));
  }

}

/**
 * Implements hook_user_insert()
 * Looks for a profile with matching netID
 * If found, assigns new user as the owner
 */
function people_profiles_user_insert(&$edit, $account, $category) {
  if($account->is_new) {
    // Check to see if there is a profile page connected to this netID
    if ($profile_page = _people_profiles_find_profile_by_netid($account->name)) {
      $profile_page->uid = $account->uid;
      node_save($profile_page);
    }
  }
}

/**
 * Implements hook_node_presave().
 */
function people_profiles_node_presave($node) {
  if ($node->type == 'people_profile' && !$node->is_new) {
    $wrapper = _people_profiles_node_wrapper($node);
    $name_array = _people_profiles_get_first_and_last_names($node);
    $wrapper->field_first_name->set($name_array[0]);
    $last_name = (count($name_array) == 2) // last names may be more than 1 word
      ? $name_array[1]
      : implode(' ', array_slice($name_array, 1));
    $wrapper->field_last_name->set($last_name);
  }
}

function _people_profiles_get_first_and_last_names($node) {
  return explode(' ', $node->title);
}

/**
 * Implements hook_preprocess_node
 *   Checks to see whether the Use AI flag has been set
 *   Removes appropriate columns based on the flag
 */
function people_profiles_preprocess_node(&$variables) {
  if($variables['type'] == 'people_profile' && $variables['view_mode'] == 'full') {
    $wrapper = _people_profiles_node_wrapper($variables['node']);
    $type = $wrapper->field_profile_type->value();
    $variables['classes_array'][] = "profile-type-$type";

    // Move title to correct location
    if (isset($variables['content']['field_working_title'])) {
      $title = $wrapper->title->value();
      $markup = "<div class='crumb'> profiles / $type</div>";
      $markup .= "<h1 class='title'>$title</h1>";
      $markup .= $wrapper->field_working_title->value();
      $variables['content']['field_working_title'][0]['#markup'] = $markup;

    }
  }
}

/**
 * Implements hook_form_alter
 * Calls the appropriate form alter depending on profile type
 */
function people_profiles_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'people_profile_node_form') {
    // Check to see whether the profile is for faculty
    if (count($form['field_profile_type']['und']['#default_value']) && $form['field_profile_type']['und']['#default_value'][0] == 'faculty') {
      _people_profiles_render_ai_tab_contents($form);
    } // Remove the AI tab and other fields
    else {
      _people_profiles_process_staff_form($form);
    }

    // Remove editing the profile type except for admins
    global $user;
    if (!in_array('administrator', $user->roles)) {
      $form['field_profile_department']['#disabled'] = 1;
      $form['field_phone']['#disabled'] = 1;
      $form['field_local_address']['#disabled'] = 1;
      $form['field_address_line_1']['#disabled'] = 1;
      $form['field_faculty_on_leave']['#disabled'] = 1;
      $form['field_profile_type']['#access'] = FALSE;
      $form['field_first_name']['#access'] = FALSE;
      $form['field_last_name']['#access'] = FALSE;
      $form['field_email']['#access'] = FALSE;
      $form['field_last_name']['#access'] = FALSE;
    }

    // Remove the netid field
    if (isset($form['field_netid'])) {
      $form['field_netid']['#access'] = FALSE;
    }
  }
}

function people_profiles_field_group_build_pre_render_alter(&$element) {
  if (isset($element['#bundle'])
    && $element['#bundle'] == 'people_profile'
    && !isset($element['#form_id'])) { // If #form_id present, on edit form
    $wrapper = _people_profiles_node_wrapper($element['#node']);
    $type = $wrapper->field_profile_type->value();

    // Handle issues with use of the local address field
    _people_profiles_process_address($element);

    if ($type == 'faculty') {
      _people_profiles_process_faculty_view($element);
    } // Handle non-faculty oddities, such as missing image or content
    else {
      if (_prople_profiles_content_area_is_empty($element['group_main_content'])) {
        _people_profiles_move_sidebar_content($element);
      }
      if (!$element['group_profile_highlighted']['field_profile_image']) {
        _people_profiles_handle_missing_image($element);
      }
    }
  }
}

function _prople_profiles_content_area_is_empty($main_content_array) {
  foreach ($main_content_array as $key => $value) {
    if (strpos($key, 'field') === 0) {
      $content = $value;
    }
    if ($content) {
      return FALSE;
    }
  }
  return TRUE;
}

function _people_profiles_move_sidebar_content(&$element) {
  $element['group_profile_highlighted']['group_title_and_focus']['moved_sidebar_content'] = $element['group_profile_sidebar'];
  $element['group_profile_highlighted']['group_title_and_focus']['moved_sidebar_content']['#prefix'] = '<div class="moved-sidebar">';
  unset($element['group_profile_sidebar']);
}

function _people_profiles_handle_missing_image(&$element) {
  // Add some padding if missing an image
  $prefix = $element['group_profile_highlighted']['#prefix'];
  $new_prefix = implode(' no-image', str_split($prefix, strlen($prefix) - 2));
  $element['group_profile_highlighted']['#prefix'] = $new_prefix;
}

/**
* Implements hook_block_info().
*/
function people_profiles_block_info($delta = '') {
  $departments = _people_profiles_get_faculty_departments();

  foreach ($departments as $key => $value) {
    $blocks[$key] = array(
      'info' => "Faculty for {$value}",
    );
  }
  return $blocks;
}

/**
* Implements hook_block_view().
*/
function people_profiles_block_view($delta = '') {
  $block = array(
    'subject' => 'Faculty',
    'content' => _people_profiles_department_faculty_view($delta),
  );

  return $block;
}

/**
* Custom function to query for the faculty members
*/
function _people_profiles_department_faculty_view($delta) {
  $profile_nid_array = _people_profiles_get_faculty_by_department($delta);
  if (count($profile_nid_array) > 0) {
    $markup = "<ul class='department-faculty'>\n";
    foreach ($profile_nid_array as $node_info) {
      $profile = node_load($node_info['nid'], $node_info['vid']);
      $link = drupal_get_path_alias("node/{$node_info['nid']}");
      $markup .= "<li><a href='/{$link}'>{$profile->title}</a></li>\n";
    }
    $markup .= "</ul>\n";

    $block['content'] = array(
      '#markup' => $markup,
    );
  }
  else {
    // There are no faculty members, so don't render the block
    $block = array();
  }

  return $block;
}

function _people_profiles_get_faculty_by_department($department_key){
  $nodes_info = array();
  $query = new EntityFieldQuery();

  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'people_profile')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_profile_department', 'value', $department_key)
    ->fieldOrderBy('field_last_name', 'value', 'ASC');

  $result = $query->execute();

  if (empty($result)) {
    return $nodes_info;
  }
  else {
    foreach ($result['node'] as $node_info) {
      $nodes_info[] = array(
        'nid' => $node_info->nid,
        'vid' => $node_info->vid,
      );
    }
    return $nodes_info;
  }
}

/**
 * Handles rendering the output of Activity insight fields
 * and the preview button
 */
function _people_profiles_render_ai_tab_contents(&$form) {
  // Remove the option to use non-AI data except for admins
  global $user;
  if (!in_array('administrator', $user->roles)) {
    $form['field_use_ai_data'][LANGUAGE_NONE]['#default_value'] = 1;
    $form['field_use_ai_data']['#access'] = false;
  }

  $form['field_visibility_settings'][LANGUAGE_NONE]['#title'] = 'The following information is drawn directly from Activity Insight. (Check those sections you would like to <em>exclude</em> from public display)';

  foreach ($form as $field_name => $value) {
    if (strpos($field_name, 'field_ai') === 0 || $field_name == 'field_areas_of_expertise') {
      $content = _people_profiles_get_default_value($form[$field_name]);
      $field_hint = _people_profiles_get_description_as_help_text($form[$field_name]);

      if (array_key_exists($field_name, $form['field_visibility_settings'][LANGUAGE_NONE]['#options'])) {
        $option_text = $form['field_visibility_settings'][LANGUAGE_NONE]['#options'][$field_name];
        $form['field_visibility_settings'][LANGUAGE_NONE]['#options'][$field_name] = '<strong>' . $option_text .'</strong> '. $field_hint . ' <blockquote>' . $content . '</blockquote>';
        $form[$field_name]['#access'] = false;
      }
    }
  }

  // Add the preview button if they're not using AI
  if (!$form['field_use_ai_data']['und']['#default_value']) {
    // Set the markup on the preview button
    $preview_link = drupal_get_path_alias("node/{$form['nid']['#value']}");
    $form['preview_link'] = array(
      '#markup' => '<a class="button" href="/' . $preview_link . '?ai_preview=1" target="_blank">Preview AI Version</a>',
      '#weight' => $form['field_visibility_settings']['#weight'],
    );
    // Move the button to the Activity Insight Tab
    $form['#group_children']['preview_link'] = 'group_activity_insight';
  }
}

/**
 * Handles dumb logic for finding the default value of a field
 */
function _people_profiles_get_default_value($field) {
  $default_value = '';
  // "Filtered text" text processing
  if (isset($field[LANGUAGE_NONE][0]['#default_value'])) {
    $default_value = $field[LANGUAGE_NONE][0]['#default_value'];
  } // "Plain text" text processing
  elseif (isset($field[LANGUAGE_NONE][0]['value']['#default_value'])) {
    $default_value = $field[LANGUAGE_NONE][0]['value']['#default_value'];
  } // Taxonomy terms
  elseif (isset($field[LANGUAGE_NONE]['#default_value'])) {
    $default_value = $field[LANGUAGE_NONE]['#default_value'];
  }

  return $default_value;
}

/**
 * Handles dumb logic for creating the help text of a field
 */
function _people_profiles_get_description_as_help_text($field) {
  return  (isset($field[LANGUAGE_NONE][0]['#description']) && ! empty($field[LANGUAGE_NONE][0]['#description'])) ?
    ' <span class="field-note">('.$field[LANGUAGE_NONE][0]['#description'].')</span>' : '';
}

/**
 * Custom function to process faculty profiles
 * by handling the optional AI elements
 * and adding the sidebar thumb
 */
function _people_profiles_process_faculty_view(&$element) {
  _people_profiles_process_optional_ai_elements($element);
  _people_profiles_add_sidebar_thumb($element);
}

function _people_profiles_add_sidebar_thumb(&$element) {
  if (isset($element['field_profile_image'])) {
    $thumb = $element['field_profile_image'];
    $thumb[0]['#image_style'] = 'focussed_thumbnail';
    $element['field_generated_thumb'] = $thumb;
    $element['group_profile_sidebar']['field_generated_thumb'] = $thumb;
    $element['group_profile_sidebar']['field_generated_thumb'];
    $element['#group_children']['field_generated_thumb'] = 'group_profile_sidebar';
  }
}

/**
 * Hides faculty-only fields
 */
function _people_profiles_process_staff_form(&$form) {
  $form['field_ilrweb_vita_file']['#access'] = 0;
  $form['field_faculty_on_leave']['#access'] = 0;
  // Hide the AI fieldgroup
  field_group_hide_field_groups($form, array('group_activity_insight'));
}

/**
 * Custom function to remove the local address if there is a campus address
 * Many people erringly put a local address when they shouldn't
 * But all people without a campus address use the local address
 */
function _people_profiles_process_address(&$element) {
  if(count($element['group_profile_sidebar']['group_contact_info']['field_address_line_1']) > 0) {
    unset($element['group_profile_sidebar']['group_contact_info']['field_local_address']);
  }
}

/**
 * Custom function to return optional fields populated from AI
 * Add any AI fields here that faculty can choose to toggle on/off
 * Naming conventions map array keys to field machine name
 * Also see allowed_values_function in people_profiles.features.field_base.inc
 */
function _people_profiles_activity_insight_options_list() {
  return array(
    'field_ai_overview' => 'Overview',
    //'field_ai_outreach_activities' => '',
    'field_ai_teaching_statement' => 'Teaching Statement',
    'field_ai_research_statement' => 'Research Statement',
    'field_ai_service_statement' => 'Service Statement',
    'field_ai_outreach_statement' => 'Outreach Statement',
    'field_ai_publications' => 'Publications',
    'field_ai_professional_activities' => 'Professional Activities',
    'field_ai_honors_awards' => 'Honors and Awards',
    'field_areas_of_expertise' => 'Areas of Expertise',
    'field_ai_other_expertise' => 'Other Areas of Expertise',
    'field_ai_links' => 'Links',
  );
}

/**
 * Loops through people profile elements and checks visiblity settings
 * See _people_profiles_activity_insight_options_list for the values that are
 * output as checkboxes that can be excluded
 */
function _people_profiles_process_optional_ai_elements(&$element) {
  $wrapper = _people_profiles_node_wrapper();
  $excluded_fields = $wrapper->field_visibility_settings->value();
  foreach ($excluded_fields as $key => $field_name) {
    if (isset($element['group_main_content'][$field_name])) {
      unset($element['group_main_content'][$field_name]);
    }
    else if (isset($element['group_profile_sidebar'][$field_name])) {
      unset($element['group_profile_sidebar'][$field_name]);
    }
  }
}

/**
 * Searches for a profile with a corresponding NetID
 * @param  String $netId The NetID supplied by the saml login
 * @return Node        The node with the supplied NetID
 */
function _people_profiles_find_profile_by_netid($netId) {
  $query = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'people_profile')
    ->fieldCondition('field_netid','value',$netId)
    ->execute();
  if (count($entities) == 1) {
    return node_load(key($entities['node']));
  }
  return FALSE;
}

function _people_profiles_get_department_select_options() {
  $department_list = _people_profiles_get_department_list();
  $departments = array();
  foreach ($department_list as $name) {
    $key = _people_profiles_sanitize_department_key($name);
    $departments[$key] = $name;
  }

  return $departments;
}

function _people_profiles_get_department_list() {
  global $ILR_DEPARTMENTS;
  $departments = array();
  foreach ($ILR_DEPARTMENTS as $key => $name) {
    $departments[] = _people_profiles_sanitize_department_name($name);
  }
  return $departments;
}

function _people_profiles_get_faculty_departments() {
  $department_names = array(
    "Economics",
    "Human Resource Studies",
    "International and Comparative Labor",
    "Labor Relations, Law, and History",
    "Organizational Behavior",
    "Social Statistics",
  );

  $departments = array();

  foreach ($department_names as $name) {
    $key = _people_profiles_sanitize_department_key($name);
    $departments[$key] = $name;
  }

  return $departments;
}

function _people_profiles_node_wrapper($node=NULL) {
  $wrapper = &drupal_static(__FUNCTION__);
  if (!isset($wrapper)) {
    $wrapper = entity_metadata_wrapper('node', $node);
  }
  return $wrapper;
}

function _people_profiles_sanitize_department_name($name) {
  $strings_to_remove = array('-ILR','Ext-','ILR -','LIBR -');
  $name = str_replace($strings_to_remove, '', $name);
  $name = trim($name);
  return $name;
}

function _people_profiles_sanitize_department_key($name) {
  $name = _people_profiles_sanitize_department_name($name);
  $key = strtolower($name);
  $key = preg_replace('@[^a-z0-9_]+@','_',$key);
  if (strlen($key) > 30) {
    $key = substr($key, 0, 30);
  }
  return $key;
}
