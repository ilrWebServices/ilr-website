<?php
/**
 * @file
 * Code for the People Profiles feature.
 */

include_once 'people_profiles.features.inc';

/**
 * Implements hook_user_insert()
 * Looks for a profile with matching netID
 * If found, assigns new user as the owner
 */
function people_profiles_user_insert(&$edit, $account, $category) {
  if($account->is_new) {
    // Check to see if there is a profile page connected to this netID
    if ($profile_page = _people_profiles_find_profile_by_netid($account->name)) {
      $profile_page->uid = $account->uid;
      node_save($profile_page);
    }
  }
}

/**
 * Implements hook_preprocess_node
 *   Checks to see whether the Use AI flag has been set
 *   Removes appropriate columns based on the flag
 */
function people_profiles_preprocess_node(&$variables) {
  if($variables['type'] == 'people_profile' && $variables['view_mode'] == 'full') {
    $wrapper = _people_profiles_node_wrapper($variables['node']);
    if ($wrapper->field_profile_type->value() == 'faculty') {
      _people_profiles_process_faculty_view($variables);
    }
    _people_profiles_process_address($variables);

    // Process departments
    if (isset($variables['content']['field_academic_department']) && isset($variables['content']['field_department'])) {
      $academic_departments = _people_profiles_get_faculty_departments();
      $assigned_department = $wrapper->field_academic_department->value();
      if (array_key_exists($assigned_department, $academic_departments)) {
        unset($variables['content']['field_department']);
      } else {
        unset($variables['content']['field_academic_department']);
      }

    }
  }
}

/**
 * Implements hook_form_alter
 * Calls the appropriate form alter depending on profile type
 */
function people_profiles_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'people_profile_node_form') {
    // Check to see whether the profile is for faculty
    if (count($form['field_profile_type']['und']['#default_value']) && $form['field_profile_type']['und']['#default_value'][0] == 'faculty') {
      _people_profiles_render_ai_tab_contents($form);
    } // Remove the AI tab and other fields
    else {
      _people_profiles_process_staff_form($form);
    }

    // Remove editing the profile type except for admins
    global $user;
    if (!in_array('administrator', $user->roles)) {
      $form['field_profile_type']['#disabled'] = 1;
    }

    // Remove ability to edit netid
    if (isset($form['field_netid'])) {
      $form['field_netid']['#disabled'] = TRUE;
    }
  }
}

/**
* Implements hook_block_info().
*/
function people_profiles_block_info($delta = '') {
  $departments = _people_profiles_get_faculty_departments();

  foreach ($departments as $key => $value) {
    $blocks[$key] = array(
      'info' => "Faculty for {$value}",
    );
  }
  return $blocks;
}

/**
* Implements hook_block_view().
*/
function people_profiles_block_view($delta = '') {
  $block = array(
    'subject' => 'Faculty',
    'content' => _people_profiles_department_faculty_view($delta),
  );

  return $block;
}

/**
* Custom function to query for the faculty members
*/
function _people_profiles_department_faculty_view($delta) {
  $profile_nid_array = _people_profiles_get_faculty_by_department($delta);
  if (count($profile_nid_array) > 0) {
    $markup = "<ul class='department-faculty'>\n";
    foreach ($profile_nid_array as $node_info) {
      $profile = node_load($node_info['nid'], $node_info['vid']);
      $link = drupal_get_path_alias("node/{$node_info['nid']}");
      $markup .= "<li><a href='/{$link}'>{$profile->title}</a></li>\n";
    }
    $markup .= "</ul>\n";

    $block['content'] = array(
      '#markup' => $markup,
    );
  }
  else {
    // There are no faculty members, so don't render the block
    $block = array();
  }

  return $block;
}

function _people_profiles_get_faculty_by_department($department_key){
  $nodes_info = array();
  $query = new EntityFieldQuery();

  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'people_profile')
    ->propertyCondition('status', 1)
    ->fieldCondition('field_academic_department', 'value', $department_key)
    ->fieldOrderBy('field_last_name', 'value', 'ASC');

  $result = $query->execute();

  if (empty($result)) {
    return $nodes_info;
  }
  else {
    foreach ($result['node'] as $node_info) {
      $nodes_info[] = array(
        'nid' => $node_info->nid,
        'vid' => $node_info->vid,
      );
    }
    return $nodes_info;
  }
}

/**
 * Handles rendering the output of Activity insight fields
 * and the preview button
 */
function _people_profiles_render_ai_tab_contents(&$form) {
  // Remove the option to use non-AI data except for admins
  global $user;
  if (!in_array('administrator', $user->roles)) {
    $form['field_use_ai_data'][LANGUAGE_NONE]['#default_value'] = 1;
    $form['field_use_ai_data']['#access'] = false;
  }

  $form['field_visibility_settings'][LANGUAGE_NONE]['#title'] = 'The following information is drawn directly from Activity Insight. (Check those sections you would like to <em>exclude</em> from public display)';

  foreach ($form as $field_name => $value) {
    if (strpos($field_name, 'field_ai') === 0 || $field_name == 'field_areas_of_expertise') {
      $content = _people_profiles_get_default_value($form[$field_name]);
      $field_hint = _people_profiles_get_description_as_help_text($form[$field_name]);

      if (array_key_exists($field_name, $form['field_visibility_settings'][LANGUAGE_NONE]['#options'])) {
        $option_text = $form['field_visibility_settings'][LANGUAGE_NONE]['#options'][$field_name];
        $form['field_visibility_settings'][LANGUAGE_NONE]['#options'][$field_name] = '<strong>' . $option_text .'</strong> '. $field_hint . ' <blockquote>' . $content . '</blockquote>';
        $form[$field_name]['#access'] = false;
      }
    }
  }

  // Add the preview button if they're not using AI
  if (!$form['field_use_ai_data']['und']['#default_value']) {
    // Set the markup on the preview button
    $preview_link = drupal_get_path_alias("node/{$form['nid']['#value']}");
    $form['preview_link'] = array(
      '#markup' => '<a class="button" href="/' . $preview_link . '?ai_preview=1" target="_blank">Preview AI Version</a>',
      '#weight' => $form['field_visibility_settings']['#weight'],
    );
    // Move the button to the Activity Insight Tab
    $form['#group_children']['preview_link'] = 'group_activity_insight';
  }
}

/**
 * Handles dumb logic for finding the default value of a field
 */
function _people_profiles_get_default_value($field) {
  $default_value = '';
  // "Filtered text" text processing
  if (isset($field[LANGUAGE_NONE][0]['#default_value'])) {
    $default_value = $field[LANGUAGE_NONE][0]['#default_value'];
  } // "Plain text" text processing
  elseif (isset($field[LANGUAGE_NONE][0]['value']['#default_value'])) {
    $default_value = $field[LANGUAGE_NONE][0]['value']['#default_value'];
  } // Taxonomy terms
  elseif (isset($field[LANGUAGE_NONE]['#default_value'])) {
    $default_value = $field[LANGUAGE_NONE]['#default_value'];
  }

  return $default_value;
}

/**
 * Handles dumb logic for creating the help text of a field
 */
function _people_profiles_get_description_as_help_text($field) {
  return  (isset($field[LANGUAGE_NONE][0]['#description']) && ! empty($field[LANGUAGE_NONE][0]['#description'])) ?
    ' <span class="field-note">('.$field[LANGUAGE_NONE][0]['#description'].')</span>' : '';
}

/**
 * Custom function to process faculty profiles
 * by hiding either the ilrweb or activity insight fields
 * This only gets called if the profile is a faculty
 */
function _people_profiles_process_faculty_view(&$variables) {
  // This assumes a common naming convention for irlweb and ai fields,
  // which get set during the initial field creation process in the UI
  $preview = (isset($_GET['ai_preview'])) ? 1 : 0;
  $wrapper = _people_profiles_node_wrapper($variables['node']);
  $use_activity_insight = ($preview) ? 1 : $wrapper->field_use_ai_data->value();
  $field_name_prefix =
    ($use_activity_insight)
      ? 'field_ilrweb'
      : 'field_ai';
  if ($use_activity_insight) { // Deal with optional fields
    if (!$preview) {
      _people_profiles_process_optional_ai_elements($variables);
    }
  }
  _people_profiles_hide_fields_with_prefix($variables, $field_name_prefix);
}

/**
 * Hides faculty-only fields
 */
function _people_profiles_process_staff_form(&$form) {
  $additional_faculty_fields = array(
    'field_ilrweb_publications',
    'field_ilrweb_publications_file',
    'field_ilrweb_vita_file',
    'field_ilrweb_vita_html',
    'field_academic_department',
  );
  foreach ($form as $field_name => $value) {
    if (in_array($field_name, $additional_faculty_fields)) {
      $form[$field_name]['#access'] = 0;
    }
  }
  // Hide the AI fieldgroup
  field_group_hide_field_groups($form, array('group_activity_insight'));
}

/**
 * Custom function to remove the local address if there is a campus address
 * Many people erringly put a local address when they shouldn't
 * But all people without a campus address use the local address
 */
function _people_profiles_process_address(&$variables) {
  if(count($variables['field_address_line_1']) > 0) {
    unset($variables['content']['field_local_address']);
  }
}

function _people_profiles_hide_fields_with_prefix(&$variables, $prefix) {
  // Set up any exceptions, which are fields that should show for both ilrweb and ai versions
  $exceptions = array('field_ai_other_expertise');
  foreach ($variables as $key => $value) { // $key is the field name
    if (strpos($key, $prefix) === 0
      && !in_array($key,$exceptions)) {
      unset($variables['content'][$key]);
    }
  }
}

/**
 * Custom function to return optional fields populated from AI
 * Add any AI fields here that faculty can choose to toggle on/off
 * Naming conventions map array keys to field machine name
 * Also see allowed_values_function in people_profiles.features.field_base.inc
 */
function _people_profiles_activity_insight_options_list() {
  return array(
    'field_ai_overview' => 'Overview',
    //'field_ai_outreach_activities' => '',
    'field_ai_teaching_statement' => 'Teaching Statement',
    'field_ai_research_statement' => 'Research Statement',
    'field_ai_service_statement' => 'Service Statement',
    'field_ai_outreach_statement' => 'Outreach Statement',
    'field_ai_publications' => 'Publications',
    'field_ai_professional_activities' => 'Professional Activities',
    'field_ai_honors_awards' => 'Honors and Awards',
    'field_areas_of_expertise' => 'Areas of Expertise',
    'field_ai_other_expertise' => 'Other Areas of Expertise',
    'field_ai_links' => 'Links',
  );
}

/**
 * Loops through people profile elements and checks visiblity settings
 * See _people_profiles_activity_insight_options_list for the values that are
 * output as checkboxes that can be excluded
 */
function _people_profiles_process_optional_ai_elements(&$variables) {
  $excluded_fields = _people_profiles_get_excluded_ai_fields($variables['field_visibility_settings']);

  $optional_fields = array_keys(_people_profiles_activity_insight_options_list());
  foreach ($variables as $field_name => $value) {
    if (in_array($field_name, $optional_fields)) {
      if (in_array($field_name, $excluded_fields)) {
        unset($variables['content'][$field_name]);
      }
    }
  }
}

/**
 * Determines which checkboxes have been selected from the field_visibility_settings
 * @param  Array $field_visibility_settings
 * @return Array A single dimensional array with the fieldnames as string values
 */
function _people_profiles_get_excluded_ai_fields($field_visibility_settings) {
  $excluded_fields = array();
  $settings_array = current($field_visibility_settings);
  if (is_array($settings_array)) {
    foreach ($settings_array as $key => $value) {
      $excluded_fields[] = $value['value'];
    }
  }
  return $excluded_fields;
}

/**
 * Searches for a profile with a corresponding NetID
 * @param  String $netId The NetID supplied by the saml login
 * @return Node        The node with the supplied NetID
 */
function _people_profiles_find_profile_by_netid($netId) {
  $query = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'people_profile')
    ->fieldCondition('field_netid','value',$netId)
    ->execute();
  if (count($entities) == 1) {
    return node_load(key($entities['node']));
  }
  return FALSE;
}

function _people_profiles_get_faculty_departments() {
  $department_names = array(
    "Economics",
    "Human Resource Studies",
    "International and Comparative Labor",
    "Labor Relations, Law, and History",
    "Organizational Behavior",
    "Social Statistics",
  );

  $departments = array();

  foreach ($department_names as $name) {
    // Strip spaces, commas and "and" to get below 32 chars
    $key = str_replace(array(',',' and'), '', $name);
    $key = str_replace(',', '', $key);
    $key = strtolower(str_replace(' ', '_', $key));
    $departments[$key] = $name;
  }

  return $departments;
}

function _people_profiles_node_wrapper($node) {
  $wrapper = &drupal_static(__FUNCTION__);
  if (!isset($wrapper)) {
    $wrapper = entity_metadata_wrapper('node', $node);
  }
  return $wrapper;
}
