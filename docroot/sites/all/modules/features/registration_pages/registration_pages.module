<?php
/**
 * @file
 * Code for the registration-pages feature.
 */

include_once 'registration_pages.features.inc';

/**
 * Implements hook_preprocess_hook()
 */
function registration_pages_preprocess_node(&$variables) {
  if ($variables['type'] == 'registration_page'){
    // Create the wrapper for easier processing
    $node_wrapper = entity_metadata_wrapper('node', $variables['node']);
    // Create the event markup
    $variables['content']['event_info']['#markup'] =
      _registration_pages_get_event_markup_from_wrapper($node_wrapper);
    $variables['content']['event_info']['#weight'] = 1;

    // Confirm that the form registration dates are valid
    if (!empty($variables['node']->field_event_registration_period)) {
      _registration_pages_process_registration_period($variables);
    }

    // Set the weight on the form
    $variables['content']['field_registration_form']['#weight'] = 2;
  }
}

/**
 * Implements hook_token_info().
 */
function registration_pages_token_info() {
  $tokens['event_info'] = array(
    'name' => t('Event Info'),
    'description' => t('Includes date, time, location'),
  );

  $return_array = array(
    'tokens' => array('entityform' => $tokens),
  );
  return $return_array;
}

/**
 * Utility function to get array of tokens provide by this module.
 *
 * @param $tokens
 * @return array
 */
function _registration_pages_get_provided_tokens() {
  $tokens['event_info'] = array(
    'name' => t('Event Info'),
    'description' => t('Includes date, time, location'),
  );
  return $tokens;
}

/**
 * Implements hook_tokens().
 */
function registration_pages_tokens($type, $tokens, array $data = array(), array $options = array()) {

  $return = array();

  if ($type == 'entityform' && !empty($data['entityform'])) {
    $entityform = $data['entityform'];

    // Check that event_info exists - if so we need to assign to it
    if (isset($tokens['event_info'])) {
      if (_registrations_pages_is_reg_form($entityform)) {
        $entityform_wrapper = entity_metadata_wrapper('entityform', $entityform);
        $node = $entityform_wrapper->field_event_content->value();
        $node_wrapper = entity_metadata_wrapper('node', $node);

        $return[$tokens['event_info']] = _registration_pages_get_event_markup_from_wrapper($node_wrapper);
      }
    }
  }

  return $return;
}

/**
 * Check if a form is a registration form, i.e. if page type is registration_page
 */
function _registrations_pages_is_reg_form($entityform) {
  // Wrap entityform in an entity metadata wrapper - makes it easier to access entity values
  $entityform_wrapper = entity_metadata_wrapper('entityform', $entityform);

  // Get all info about the node; this will be empty if field_event_content doesn't exist
  if (isset($entityform_wrapper->field_event_content)) {
    $whole_node = $entityform_wrapper->field_event_content->value();

    if (! empty($whole_node) && $whole_node->type == 'registration_page') {
      return TRUE;
    }
    else {
      return FALSE;
    }
  }
  else {
    return FALSE;
  }
}


/**
 * Generate markup for the event info for an event on a registration page
 * This should only be called if we're on a registration page
 */
function _registration_pages_get_event_markup_from_wrapper($node_wrapper) {
  $event_date_save = $node_wrapper->field_event_date->value();

  $event_markup = '<p>';

  if (! empty($event_date_save)) {
    // I tried many other approaches to getting the time into the correct time zone,
    // and this was the only one that worked.
    $event_date_usable =
      _registration_pages_get_usable_datetime_from_datetime_field($event_date_save);

    $event_markup .= "<strong>Date:</strong> ";
    $event_markup .= $event_date_usable['start_date'];
    $event_markup .= "<br>";

    $event_markup .= "<strong>Time:</strong> ";
    $event_markup .= $event_date_usable['start_time'];

    // End time
    if (isset($event_date_usable['end_date'])) {
      if ($event_date_usable['start_date'] == $event_date_usable['end_date']) {
        // The expected case: start and end date are the same
        $event_markup .=  ' - ' . $event_date_usable['end_time'];
      }
      else {
        // Unlikely, but just in case the end date is different from the start date, include it
        $event_markup .= ' - ' . $event_date_usable['end_date'] . ' ' . $event_date_usable['end_time'];
      }
    }
    $event_markup .= "<br>";
  }

  if ($location_text = $node_wrapper->field_location_as_long_text->value()) {
    $event_markup .= '<strong>Location:</strong> ';
    $event_markup .= $location_text;
  }

  $event_markup .=  '</p>';

  return $event_markup;
}

function _registration_pages_process_registration_period(&$variables) {
  if (_registration_pages_form_is_inactive($variables['node'])) {
    unset($variables['content']['field_registration_form']);
    $variables['content']['field_registration_form']['#markup'] = _registration_pages_get_markup_for_inactive_form($variables['node']);
  }
}

function _registration_pages_form_is_inactive($node) {
  if (_registration_pages_form_is_not_yet_live($node) ||_registration_pages_form_deadline_has_passed($node)) {
    return TRUE;
  }
  return FALSE;
}

function _registration_pages_form_is_not_yet_live($node) {
  if (isset($node->field_event_registration_period['und'][0]['value'])) {
    $today_timestamp = time();
    $golive_timestamp = _registration_pages_get_timestamp_from_field_value($node->field_event_registration_period['und'][0]['value'], $node->field_event_registration_period['und'][0]['timezone_db']);
    if ($today_timestamp < $golive_timestamp) {
      return TRUE;
    }
  }
  return FALSE;
}

function _registration_pages_form_deadline_has_passed($node) {
  if (isset($node->field_event_registration_period['und'][0]['value2'])) {
    $today_timestamp = time();
    $deadline_timestamp = _registration_pages_get_timestamp_from_field_value($node->field_event_registration_period['und'][0]['value2'], $node->field_event_registration_period['und'][0]['timezone_db']);
    if ($today_timestamp > $deadline_timestamp) {
      return TRUE;
    }
  }
  return FALSE;
}

function _registration_pages_get_timestamp_from_field_value($value, $timezone) {
  return strtotime(
    $value .
    ' ' . $timezone);
}


function _registration_pages_get_markup_for_inactive_form($node) {
  $timezone = $node->field_event_registration_period['und'][0]['timezone_db'];
  $markup = '<p>';
  if (_registration_pages_form_is_not_yet_live($node)) {
    $custom_message_field = $node->field_event_text_before_reg_open;
    $active_date_field_value = $node->field_event_registration_period['und'][0]['value'];
    $message_intro = 'This form will be available on ';
  }
  elseif (_registration_pages_form_deadline_has_passed($node)) {
    $custom_message_field = $node->field_event_text_after_reg_close;
    $active_date_field_value = $node->field_event_registration_period['und'][0]['value2'];
    $message_intro = 'The deadline for submitting this form was ';
  }
  // Add the custom message to the markup if appropriate
  if (!empty($custom_message_field)) {
    $markup .= $custom_message_field['und'][0]['value'] . ' ';
  }

  $timestamp_value = _registration_pages_get_timestamp_from_field_value($active_date_field_value, $timezone);

  $form_date = format_date($timestamp_value, 'custom', 'l F d, Y');
  $form_time = format_date($timestamp_value, 'custom', 'g:i a');

  $markup .= $message_intro . $form_date . ' at ' . $form_time . '.';
  $markup .= '</p>';

  return $markup;
}

/* Convert datetime field to useful pieces in correct timezone */
function _registration_pages_get_usable_datetime_from_datetime_field($datetime_field) {
  $retval = array();

  // I tried many approaches to getting the time into the correct time zone,
  // and this was the only one that worked.
  $timezonedb = $datetime_field['timezone_db'];

  // Start datetime
  $start_datetime_strtotime = strtotime($datetime_field['value'] . ' ' . $timezonedb);
  $retval['start_date'] = format_date($start_datetime_strtotime, 'custom', 'l F d, Y');
  $retval['start_time'] = format_date($start_datetime_strtotime, 'custom', 'g:i a');

  // End datetime
  if (isset($datetime_field['value2'])) {
    $end_datetime_strtotime = strtotime($datetime_field['value2'] . ' ' . $timezonedb);
    $retval['end_date'] = format_date($end_datetime_strtotime, 'custom', 'l F d, Y');
    $retval['end_time'] = format_date($end_datetime_strtotime, 'custom', 'g:i a');
  }
  else {
    $retval['end_date'] = '';
    $retval['end_time'] = '';
  }

  return $retval;
}
