<?php
/**
 * @file
 * Code for the registration-pages feature.
 */

include_once 'registration_pages.features.inc';

/**
 * Implements hook_preprocess_hook()
 */
function registration_pages_preprocess_node(&$variables) {
  if ($variables['type'] == 'registration_page'){
    $variables['content']['event_info']['#markup'] =
      _registration_pages_get_event_markup($variables['node']);
    $variables['content']['event_info']['#weight'] = 1;

    // Confirm that the form registration dates are valid
    if (_registration_pages_form_is_inactive($variables['node'])) {
      _registration_pages_process_registration_period($variables);
    }

    // Set the weight on the form
    $variables['content']['field_registration_form_type']['#weight'] = 2;
  }
}

/**
 * Implements hook_token_info().
 */
function registration_pages_token_info() {
  $tokens['event_info'] = array(
    'name' => t('Event Info'),
    'description' => t('Includes date, time, location'),
  );

  $return_array = array(
    'tokens' => array('entityform' => $tokens),
  );
  return $return_array;
}

/**
 * Implements hook_tokens().
 */
function registration_pages_tokens($type, $tokens, array $data = array(), array $options = array()) {

  $return = array();

  if ($type == 'entityform' && !empty($data['entityform'])) {
    $entityform = $data['entityform'];

    // Check that event_info exists - if so we need to assign to it
    if (isset($tokens['event_info'])) {
      if (_registration_pages_is_event_registration_form($entityform)) {
        $entityform_wrapper = entity_metadata_wrapper('entityform', $entityform);
        $node = $entityform_wrapper->field_referenced_node->value();
        $return[$tokens['event_info']] = _registration_pages_get_event_markup($node);
      }
    }
  }

  return $return;
}

/**
 * Check if a form is an event registration form
 */
function _registration_pages_is_event_registration_form($entityform) {
  $entityform_wrapper = entity_metadata_wrapper('entityform', $entityform);

  if ($node = isset($entityform_wrapper->field_referenced_node)) {
    $node = $entityform_wrapper->field_referenced_node->value();
    if ($node->type == 'registration_page' && !empty($node->field_event_date)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Determines whether the form has registration dates
 */
function _registration_pages_form_is_time_sensitive($node) {
  return !empty($node->field_form_active_date_range);
}


/**
 * Generate markup for the event info for an event on a registration page
 * This should only be called if we're on a registration page
 */
function _registration_pages_get_event_markup($node) {
  // Create an entity_metadata_wrapper to access values
  $node_wrapper = entity_metadata_wrapper('node', $node);
  $event_date = $node_wrapper->field_event_date->value();

  $event_markup = '<p>';

  if (!empty($event_date)) {
    $event_markup .= "<strong>Event:</strong> ";
    $event_markup .= $node_wrapper->title->value();
    $event_markup .= "<br>";

    $event_markup .= "<strong>Date:</strong> ";
    $event_markup .= _registration_pages_display_event_date($node->field_event_date);
    $event_markup .= "<br>";

    // Display time for one-day events only
    if (! _registration_pages_is_multiday_event($node->field_event_date)) {
      $event_markup .= "<strong>Time:</strong> ";
      $event_markup .= _registration_pages_display_event_time($node->field_event_date);
      $event_markup .= "<br>";
    }
  }

  if ($location_text = $node_wrapper->field_location_as_long_text->value()) {
    $event_markup .= '<strong>Location:</strong> ';
    $event_markup .= $location_text;
  }

  $event_markup .=  '</p>';

  return $event_markup;
}


/**
 * Generate the time markup for the event info for an event on a registration page
 */
function _registration_pages_display_event_time($field) {
  //Start time
  $time_display = _registration_pages_get_formatted_time_from_field($field, 'value');

  // End time
  if (isset($field[LANGUAGE_NONE][0]['value2'])) {
    $time_display .= ' - ' .
      _registration_pages_get_formatted_time_from_field($field, 'value2');
  }

  return $time_display;
}


/**
 * Generate the date markup for the event info for an event on a registration page
 * Display is different for multi-day events
 */
function _registration_pages_display_event_date($field) {
  $date_display = _registration_pages_get_formatted_date_from_field($field, 'value');
  if (_registration_pages_is_multiday_event($field)) {
    $date_display .= ' - ' . _registration_pages_get_formatted_date_from_field($field, 'value2');
  }
  return $date_display;
}

/**
 * Replaces the registration form markup with a message if form is inactive
 */
function _registration_pages_process_registration_period(&$variables) {
  unset($variables['content']['field_registration_form_type']);
  $variables['content']['field_registration_form_type']['#markup'] = _registration_pages_get_markup_for_inactive_form($variables['node']);
}

function _registration_pages_is_multiday_event($field) {
  $start_date_timestamp = _registration_pages_get_timestamp_from_field_value(
    $field[LANGUAGE_NONE][0]['value'], $field[LANGUAGE_NONE][0]['timezone_db']);
  $end_date_timestamp = _registration_pages_get_timestamp_from_field_value(
    $field[LANGUAGE_NONE][0]['value2'], $field[LANGUAGE_NONE][0]['timezone_db']);
  $start_date = date('m/d', $start_date_timestamp);
  $end_date = date('m/d', $end_date_timestamp);
  return $start_date != $end_date;
}

/**
 * Determines whether a form is active or inactive
 */
function _registration_pages_form_is_inactive($node) {
  if (!empty($node->field_form_active_date_range)) {
    if (_registration_pages_form_is_not_yet_live($node) ||_registration_pages_form_deadline_has_passed($node)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Checks whether the form active start date is in the future
 */
function _registration_pages_form_is_not_yet_live($node) {
  if (isset($node->field_form_active_date_range[LANGUAGE_NONE][0]['value'])) {
    $today_timestamp = time();
    $golive_timestamp = _registration_pages_get_timestamp_from_field_value($node->field_form_active_date_range[LANGUAGE_NONE][0]['value'], $node->field_form_active_date_range[LANGUAGE_NONE][0]['timezone_db']);
    if ($today_timestamp < $golive_timestamp) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Checks whether the form active end date was in the past
 */
function _registration_pages_form_deadline_has_passed($node) {
  if (isset($node->field_form_active_date_range[LANGUAGE_NONE][0]['value2'])
      && $node->field_form_active_date_range[LANGUAGE_NONE][0]['value'] != $node->field_form_active_date_range[LANGUAGE_NONE][0]['value2']) { // Once a value has been set for the end date, removing it apparently sets it equal to the start date in the db
    $today_timestamp = time();
    $deadline_timestamp = _registration_pages_get_timestamp_from_field_value($node->field_form_active_date_range[LANGUAGE_NONE][0]['value2'], $node->field_form_active_date_range[LANGUAGE_NONE][0]['timezone_db']);
    if ($today_timestamp > $deadline_timestamp) {
      return TRUE;
    }
  }
  return FALSE;
}

/*
  Helper function for creating timestamps from a field value
 */
function _registration_pages_get_timestamp_from_field_value($value, $timezone) {
  return strtotime(
    $value .
    ' ' . $timezone);
}

/**
 * Generates the markup that replaces inactive registration forms
 */
function _registration_pages_get_markup_for_inactive_form($node) {
  $markup = '<p>';
  if (_registration_pages_form_is_not_yet_live($node)) {
    $custom_message_field = $node->field_message_before_form_open;
    $message_intro = 'This form will be available on ';
    $active_date_value_string = 'value';
  }
  elseif (_registration_pages_form_deadline_has_passed($node)) {
    $custom_message_field = $node->field_message_after_form_close;
    $message_intro = 'The deadline for submitting this form was ';
    $active_date_value_string = 'value2';
  }

  // Set the message to the text that the admin specified,
  // or to a default if blank; trim to deal with blanks being entered.
  $custom_message = "";
  if (!empty($custom_message_field)) {  // Form admin specified something
    $custom_message = trim($custom_message_field['und'][0]['value']);
  }

  if (!empty($custom_message)) {
    $markup .= $custom_message;
  }
  else {  //Form admin left it blank
    $form_date = _registration_pages_get_formatted_date_from_field($node->field_form_active_date_range, $active_date_value_string);
    $form_time = _registration_pages_get_formatted_time_from_field($node->field_form_active_date_range, $active_date_value_string);
    $markup .= "$message_intro $form_date at $form_time.";
  }
  $markup .= '</p>';

  return $markup;
}

function _registration_pages_get_formatted_date_from_field($field, $value_string = 'value') {
  $timezone = $field[LANGUAGE_NONE][0]['timezone_db'];
  $value = $field[LANGUAGE_NONE][0][$value_string];
  $timestamp_value = _registration_pages_get_timestamp_from_field_value($value, $timezone);
  return format_date($timestamp_value, 'custom', 'l, F j, Y');
}

function _registration_pages_get_formatted_time_from_field($field, $value_string = 'value') {
  $timezone = $field[LANGUAGE_NONE][0]['timezone_db'];
  $value = $field[LANGUAGE_NONE][0][$value_string];
  $timestamp_value = _registration_pages_get_timestamp_from_field_value($value, $timezone);
  return format_date($timestamp_value, 'custom', 'g:i a');
}
