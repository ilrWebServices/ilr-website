<?php
/**
 * @file
 * Code for the Forms feature.
 */

include_once 'forms.features.inc';
include_once 'includes/forms.kerberized.inc';
include_once 'includes/forms.statelists.inc';

define('ILRWEB_EMAIL', 'ilrweb@cornell.edu');
define('ILRWEB_BCC_EMAIL', 'ilrwebemailcc@cornell.edu');


/**
 * Implements hook_entityform_presave.
 * Saves the registration date for registration forms
 */
function forms_entityform_presave($entityform) {
  if (_forms_is_event_registration_form($entityform) && $entityform->is_new) {
    _forms_save_registration_date($entityform);
  }
}

/**
 * Implements hook_entity_insert().
 */
function forms_entityform_insert($entityform) {
  $processingFunction = '_process_' . $entityform->type;
  if (function_exists($processingFunction)) {
    $processingFunction($entityform);
  }
  else {
    _forms_process_default($entityform);
  }
}

/**
* Implements hook_admin_menu_output_build().
* Adds the entityform submissions page to the admin menu
*/
function forms_admin_menu_output_build(&$content) {
  if (isset($content['menu']) && user_access('view any entityform')) {
    $content['menu']['admin/content']['admin/content/entityform-submissions'] = array(
      '#title' => t('Entityform Submissions'),
      '#href' => 'admin/reports/entityforms',
      '#weight' => 0,
    );
  }
}

/**
 * Implements hook_admin_paths().
 * Sets the entityform submissions pages to the admin theme
 */
function forms_admin_paths() {
  $paths = array(
    'entityform-submissions/submissions/*' => TRUE,
  );
  return $paths;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter.
 */
function forms_form_entityform_edit_form_alter(&$form, &$entityform_state, $form_id) {
  // Fill in default values of kerberized forms
  if (_forms_form_is_kerberized($form['#bundle'])) {
    _forms_handle_kerberized_form($form);
  }

  // Hide hidden fields, i.e. any field where the machine name starts with "field_h_"
  foreach ($form as $key=>$value) {
    if (substr($key,0,8) == 'field_h_') {
      $form[$key]['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter.
 *   Allows specifying the admin for the form
 *   Adds checkbox to specify NetID login requirement
 */
function forms_form_entityform_type_form_alter(&$form, &$form_state, $form_id) {
  _forms_add_admin_email_field($form);
  _forms_add_checkbox_to_send_admin_email($form);
  _forms_add_checkbox_to_include_name_in_admin_subject_line($form);
  _forms_add_kerberized_checkbox($form);
}

/**
 * Add admin email field to the "edit" form for this entityform
 */
function _forms_add_admin_email_field(&$entityform) {
  $previously_set_recip = (isset($entityform->type->data['form_submission_ilr_recipient']))
    ? $entityform->type->data['form_submission_ilr_recipient']
    : '';

  $entityform->data['form_submission_ilr_recipient'] = array(
    '#type' => 'textfield',
    '#title' => t('ILR Admin email'),
    '#weight' => -1,
    '#default_value' => $previously_set_recip,
    '#description' => t('The email address - usually a special mailbox - to send the admin email to when a form is submitted. Also used as From email for user confirmation, so don\'t leave it blank.'),
  );
}

/**
 * Add checkbox to indicate whether to send the admin an email confirmation
 * for this entityform
 */
function _forms_add_checkbox_to_send_admin_email(&$entityform) {
  $send_confirmation_email_to_admin = (isset($entityform->type->data['send_confirmation_email_to_admin']))
    ? $entityform->type->data['send_confirmation_email_to_admin']
    : 0;

  $entityform->data['send_confirmation_email_to_admin'] = array(
    '#type' => 'checkbox',
    '#title' => t('Send confirmation email to admin'),
    '#weight' => 0,
    '#default_value' => $send_confirmation_email_to_admin,
  );
}

/**
 * Add checkbox to indicate whether to append the user's name to the
 * admin email subject line" to the "edit" form for this entityform
 */
function _forms_add_checkbox_to_include_name_in_admin_subject_line(&$entityform) {
  $add_user_name_to_subject_line = (isset($entityform->type->data['add_user_name_to_subject_line']))
    ? $entityform->type->data['add_user_name_to_subject_line']
    : 0;

  $entityform->data['add_user_name_to_subject_line'] = array(
    '#type' => 'checkbox',
    '#title' => t('Append user\'s name to subject line of admin email; some ILR staff appreciate having this; some do not'),
    '#weight' => 0,
    '#default_value' => $add_user_name_to_subject_line,
  );
}

/**
 * Implements hook_theme()
 */
function forms_theme() {
  // Add email templates, based on the tpl.php files in the /templates directory
  $template_array = _forms_get_theme_array_from_template_files();
  return $template_array;
}

/**
 * Generates an array of email templates from files in /templates for forms_theme
 */
function _forms_get_theme_array_from_template_files() {
  $email_template_files_path = drupal_get_path('module', 'forms') . '/templates';
  $template_files = scandir($email_template_files_path);

  // Loop through all the files, add template array elements for the tpl.php files
  foreach ($template_files as $filename) {
    // Check if the filename ends with ".tpl.php"
    if ($template_name = strstr($filename, '.tpl.php', TRUE)) {
      $template_as_key = str_replace('-', '_', $template_name);
      $template_array[$template_as_key] = array(
        'path' => $email_template_files_path,
        'template' => $template_name,
      );
    }
  }
  return $template_array;
}

/**
 * Generates the appropriate submit handler for entityforms
 */
function _forms_get_submit_handler($bundle) {

}

/**
 * Generates the appropriate email template for entityforms
 * Note that the email template contains underscores, but the actual filename contains hyphens.
 */
function _forms_get_tplphp_file($entityform) {
  $tplphp_file = str_replace('_', '-', $entityform->type);
  $tplphp_file_full_path = drupal_get_path('module', 'forms') . '/templates/' . $tplphp_file . '.tpl.php';

  if (file_exists($tplphp_file_full_path)) {
    return $entityform->type;
  }
  elseif (_forms_is_event_registration_form($entityform)) {
    return 'default_registration_confirmation';
  }
  return 'default_mail';
}

/**
 * Default processing for forms
 */
function _forms_process_default(&$entityform) {
  $admin_email = _forms_get_admin_email($entityform);
  _forms_send_emails($entityform, $admin_email);
}

/**
 * Process Library contact form
 */
function _process_library_contact_form(&$entityform) {
  $admin_email = trim($entityform->field_library_how_to_direct['und']['value']) . '@cornell.edu';
  _forms_send_emails($entityform, $admin_email);
}

function _forms_library_contact_options() {
  return array(
    'ilrlib' => 'General Information',
    'ilrcirc' => 'Circulation',
    'kheel_center' => 'Kheel Center',
    'ilrref' => 'Research',
  );
}

/**
 * Process Career Services contact form
 */
function _process_career_services_contact_form(&$entityform) {
  // The email value has three chars appended to ensure uniqueness, so they
  // need to be stripped off.  See comments in
  // _forms_career_services_contact_options for more info.
  $email_value_stripped = substr(
    trim($entityform->field_career_services_how_to_dir['und'][0]['value']), 0, -3);
  $admin_email = $email_value_stripped . '@cornell.edu';
  $subject = trim($entityform->field_subject_line['und'][0]['value']['value']);
  _forms_send_emails($entityform, 'aaronf@cornell.edu', $subject);
}

function _forms_career_services_contact_options() {
  // We need duplicate email addresses (keys in this array; values in the radio buttons)
  // in this list, and Drupal doesn't permit that, so I'm getting around it by appending
  // three characters to each in order to make them unique.  Those three chars will later
  // be stripped out.  Any chars can be used, as long as everything is unique.
  return array(
    'ilrcareers-01' => 'Office of Career Services (General Inquiries)',
    'ilrcareerrecruiting-01' => 'ILR On-Campus Recruiting - student inquiries',
    'djc5-01' => 'ILR On-Campus Recruiting - employer inquiries',
    'djc5-02' => 'ILR Career Fair',
    'mlh15-01' => 'Social Justice Career Fair',
    'jap7-01' => 'CAHRS Executive Roundtable',
    'mlh15-02' => 'Labor Roundtable',
    'mlh15-03' => 'FEX (Freshman Externship Program) / WISP (Winter Internship Program)',
    'ilrab-01' => 'ILR Alumni Bulletin',
    'bk30-01' => 'ILR Credit Internship Program',
    'rmd5-01' => 'Regina M. Duffey Moravek, Director of ILR Career Services',
  );
}

function _forms_full_names_states_and_provinces() {
  $full_names=TRUE;
  $include_other=TRUE;
  $include_states=TRUE;
  $include_provinces=TRUE;
  $include_territories=FALSE;

  return _forms_statelist_options(
    $full_names, $include_other, $include_states, $include_provinces, $include_territories);
}

/**
 * Class year in the Labor Roundtable registration form starts with current year and goes six years out
 */
function _year_as_list_text_options($field, $instance = NULL, $entity_type = NULL, $entity = NULL) {
  if ($entity->type == 'labor_roundtable_student_registr') {
    // Class year in the Labor Roundtable registration form starts with current year and goes six years out
    return _forms_year_relative_options(0,6);
  }
}

/**
 * Generate a list for a select or radio form element with a list of sequential numbers
 * e.g. absolute years
 */
function _forms_number_absolute_options($first, $last) {
  $num = array();
  if ($first <= $last) {
    for ($num=$first; $num<=$last; $num++) {
      $numList["$num"] = $num;
    }
  }
  else {
    for ($num=$first; $num>=$last; $num--) {
      $numList['$num'] = $num;
    }
  }
  return $numList;
}

/**
 * Generate a list for a select or radio form element with a list of years relative to current year
 * e.g. if $firstOffset = -8 and $lastOffset = 6, this will run from 8 years ago through 6 years from now.
 * If $firstOffset > $lastOffset the years will show up in descending order.
 */
function _forms_year_relative_options($firstOffset, $lastOffset) {
  $currYear = date('Y');
  $first = $currYear + $firstOffset;
  $last = $currYear + $lastOffset;
  return _forms_number_absolute_options($first, $last);
}

/**
 * Generate the options for graduation dates for the graduate student and undergrad
 * Application to Graduate forms.
 * If current date is before Sept. 1st, use current year, otherwise use next year.
 */
function _forms_application_to_graduate_graduation_dates() {
  $grad_year_display = date('Y');
  $today_timestamp = time();

  $switch_date = $grad_year_display . '-09-01';
  $switch_date_timestamp = strtotime($switch_date);

  if ($today_timestamp > $switch_date_timestamp) {
    $grad_year_display++;
  }

  return array(
    'January$grad_year_display' => 'January ' . $grad_year_display,
    'May$grad_year_display' => 'May ' . $grad_year_display,
    'August$grad_year_display' => 'August ' . $grad_year_display,
  );
}

/**
 * Send user and admin emails
 */
function _forms_send_emails($entityform, $admin_email, $subject='') {
  $form_title = _forms_get_form_title($entityform);
  $user_name = _forms_construct_user_name($entityform);
  $email_template = _forms_get_tplphp_file($entityform);
  $event_info_for_email = '';

  if (_forms_is_event_registration_form($entityform)) {
    $entityform_wrapper = entity_metadata_wrapper('entityform', $entityform);
    $node = $entityform_wrapper->field_referenced_node->value();
    $event_info_for_email = _registration_pages_get_event_markup($node);
  }

  // User email
  if (!empty($entityform->field_email['und'][0]['email']['value'])) {
    $salutation = _form_salutation($user_name);

    $body = theme($email_template, array(
      'salutation'            => $salutation,
      'form_data'             => _entity_display_form_data($entityform),
      'admin_email'           => $admin_email,
      'form_title'            => $form_title,
      'event_info_for_email'  => $event_info_for_email,
    ));

    $to = _get_string_or_default($entityform->field_email['und'][0]['email']['value'], $admin_email);
    $from = $admin_email;
    $subject_user = $form_title . ' confirmation';
    _send_email_for_entity_form($to, $from, $subject_user, $body);
  }

  // Admin email
  if (_forms_admin_receives_confirmation_email($entityform)) {
    $to = $admin_email;
    $from = _get_string_or_default($entityform->field_email['und'][0]['email']['value'], $admin_email);
    if (empty($subject)) {
      $subject = $form_title . ' submitted';
    }
    if (_forms_admin_subject_line_includes_user_name($entityform)) {
      $subject .= " - $user_name";
    }
    $body =  _entity_display_form_data($entityform);
    _send_email_for_entity_form($to, $from, $subject, $body);
  }
}

/**
 * Get the title of the form
 */
function _forms_get_form_title($entityform) {
  return entity_label('entityform_type', entityform_type_load($entityform->type));
}

/**
 * Get the email address of the form admin, i.e. the person or special mailbox
 * in ILR who needs to get an email when the form is subitted, also this is the
 * "from" address in the confirmation email to the user.
 * If admin recipient isn't supplied in the form, return ILRWEB address
 */
function _forms_get_admin_email($entityform) {
  $entityform_type = entityform_type_load($entityform->type);
  $admin_email = empty($entityform_type->data['form_submission_ilr_recipient'])
        ? ILRWEB_EMAIL : $entityform_type->data['form_submission_ilr_recipient'];
  return $admin_email;
}

/**
 * Checks whether the user name should be appended to the admin subject line
 */
function _forms_admin_subject_line_includes_user_name($entityform) {
  $entityform_type = entityform_type_load($entityform->type);
  $admin_subject_line_includes_user_name = empty($entityform_type->data['add_user_name_to_subject_line'])
    ? FALSE
    : $entityform_type->data['add_user_name_to_subject_line'];
  return $admin_subject_line_includes_user_name;
}

/**
 * Checks whether the admin should receive a confirmation email
 */
function _forms_admin_receives_confirmation_email($entityform) {
  $entityform_type = entityform_type_load($entityform->type);
  $admin_receives_confirmation_email = empty($entityform_type->data['send_confirmation_email_to_admin'])
    ? FALSE
    : $entityform_type->data['send_confirmation_email_to_admin'];
  return $admin_receives_confirmation_email;
}

/**
 * Display form data using entityform and entity2text code from Ted Bowman
 */
function _entity_display_form_data($entityform) {
  // Set display of form fields for email and anything else
  $entityform_id = $entityform->entityform_id;
  $entityform = entityform_load($entityform_id);
  $controller = entity_get_controller('entityform');
  $content = $controller->view(array($entityform->entityform_id => $entityform), 'confirmation', NULL, TRUE);
  return drupal_render($content);
}

/**
 * Returns the value of a passed string or a default explicit value if the string is empty
 */
function _get_string_or_default($string, $default='Not specified'){
  return !empty($string) ? $string : $default;
}

/**
 * Formats a non-empty value for a person's name as a salutation
 */
function _form_salutation($name){
  return !empty($name) ? "Dear " . $name . ",\n\n" : "";
}

/**
 * Construct name for salutation, based on form fields (a) full_name or (b) firstname and lastname
 */
function _forms_construct_user_name($entityform){
  $name_for_salutation = '';
  if (array_key_exists('field_full_name', $entityform)) {
    $name_for_salutation = trim($entityform->field_full_name['und'][0]['value']['value']);
  }
  elseif (array_key_exists('field_first_name', $entityform)) {
    $name_for_salutation = trim($entityform->field_first_name['und'][0]['value']['value']);
    if (array_key_exists('field_last_name', $entityform)) {
      $name_for_salutation .= ' ';
      $name_for_salutation .= trim($entityform->field_last_name['und'][0]['value']['value']);
    }
  }
  return $name_for_salutation;
}

/**
 * Set up and send email
 */
function _send_email_for_entity_form($recip, $from, $subject, $body) {
    $params = array(
      'subject' => $subject,
      'content' => $body,
      );

    drupal_mail(
        'forms_std_confirmation',
        'email_confirmation',
        $recip,
        LANGUAGE_NONE,
        $params,
        $from
      );
}

/**
 * Implements hook_mail().
 * This is the email sent to the user
 */
function forms_std_confirmation_mail($key, &$message, $params) {
  $sitename = variable_get('site_name', 'Drupal');

  $message['headers']['MIME-Version'] = '1.0';
  $message['headers']['Content-Type'] = 'text/plain;charset=utf-8';
  $message['headers']['Bcc'] = ILRWEB_BCC_EMAIL;
  $message['subject'] = $params['subject'];
  $message['body'][] = $params['content'];
  $message['body'][] = "\n--\r";
  $message['body'][] = t("This is an automatic e-mail from $sitename.");
}

/**
 * Determines whether the form being saved is a registration form
 * @todo Consider refactoring, since "field_referenced_node" shouldn't probably
 * be the defining characteristic of a registration form
 */
function _forms_is_event_registration_form($entityform) {
  if (isset($entityform->field_referenced_node)
      && module_exists('registration_pages')
      && _registration_pages_is_event_registration_form($entityform)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Saves the date of the event to the hidden field on the entityform
 */
function _forms_save_registration_date($entityform) {
  $entityform_wrapper = entity_metadata_wrapper('entityform', $entityform);
  //'default_value_function' => 'entityreference_current_field_default_value',
  $event_date_save = $entityform_wrapper->field_referenced_node->field_event_date->value();
  if (!empty($event_date_save)) {
    $entityform_wrapper->field_h_event_date->set($event_date_save);
  }
}
