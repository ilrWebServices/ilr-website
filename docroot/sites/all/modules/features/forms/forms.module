<?php
/**
 * @file
 * Code for the Forms feature.
 */

include_once 'forms.features.inc';

define('ILRWEB_EMAIL', 'ilrweb@cornell.edu');
define('ILRWEB_BCC_EMAIL', 'ilrwebemailcc@cornell.edu');
define('STRING_TO_DISPLAY_FOR_OMITTED_FIELDS', 'Not specified');

/**
 * Implements hook_form_alter
 */
function forms_form_alter(&$form, &$form_state, $form_id) {
  if (array_key_exists('entityform', $form_state)) {
    // Process an ILR entityform with a custom function or a default
    $processingFunction = '_process_' . str_replace('_entityform_edit_form', '', $form_id);
    if (function_exists($processingFunction)) {
      $form['actions']['submit']['#submit'][] = $processingFunction;
    }
    else {
      $form['actions']['submit']['#submit'][] = '_forms_process_default';
    }
  }
  elseif ($form_id == 'entityform_type_form') {
    // Add admin email field to the "edit" form for this entityform
    $previously_set_recip =
      (isset($form['#entityform_type']->data['form_submission_ilr_recipient']))
        ? $form['#entityform_type']->data['form_submission_ilr_recipient']
        : '';

    $form['data']['form_submission_ilr_recipient'] = array(
      '#type' => 'textfield',
      '#title' => t('ILR Admin email'),
      '#weight' => -1,
      '#default_value' => $previously_set_recip,
      '#description' => t('The email address - usually a special mailbox - to send the admin email to when a form is submitted.  Leave blank if no admin email is to be sent (rarely the case).'),
    );
  }
}


/**
 * Implement hook_theme().
 */
function forms_theme() {
  // This code is patterned after code in views_theme() in views.module
  // line 60 as of 4/2014
  $base = array(
    'path' => drupal_get_path('module', 'forms') . '/templates',
  );

  return array(
    'default_mail' => $base + array(
      'template' => 'default-mail',
    ),
  );
}

 /**
 * Default processing for forms
 */
function _forms_process_default(&$form) {
  $admin_email = _forms_get_admin_email($form);
  _forms_send_emails($form, $admin_email);
}

/**
 * Process Career Services contact form
 */
function _process_career_services_contact_form(&$form) {
  $admin_email = trim($form['field_career_services_how_to_dir']['und']['#value']) . '@cornell.edu';
  $subject = trim($form['field_subject_line']['und'][0]['value']['#value']);
  _forms_send_emails($form, $admin_email, $subject);
}

/**
 * Send user and admin emails
 */
function _forms_send_emails($form, $admin_email, $subject='', $email_template='default_mail') {
  // User email
  if (!empty($form['field_email']['und'][0]['email']['#value'])) {
    $salutation = _form_salutation(_forms_construct_name_for_salutation($form));
    $body = theme($email_template, array(
      'salutation'      => $salutation,
      'form_data'       => _entity_display_form_data($form),
      'admin_email'     => $admin_email,
      'form_title'      => _forms_get_form_title($form),
    ));

    $to = _get_string_or_default($form['field_email']['und'][0]['email']['#value'], $admin_email);
    $from = $admin_email;
    $subject_user = _forms_create_subjectline($form, 'confirmation');
    _send_email_for_entity_form($to, $from, $subject_user, $body);
  }

  // Admin email
  $to = $admin_email;
  $from = _get_string_or_default($form['field_email']['und'][0]['email']['#value'], $admin_email);
  if (empty($subject)) {
    $subject = _forms_create_subjectline($form);
  }
  $body =  _entity_display_form_data($form);
  _send_email_for_entity_form($to, $from, $subject, $body);
}


/**
 * Send confirmation email to the user
 */
// function _forms_user_email($form, $admin_email, $default_template='default_mail') {
//   $salutation = _form_salutation(_forms_construct_name_for_salutation($form));
//   $body = theme($default_template, array(
//     'salutation'      => $salutation,
//     'form_data'       => _entity_display_form_data($form),
//     'admin_email'     => $admin_email,
//     'form_title'      => _forms_get_form_title($form),
//   ));
//   _send_email_for_entity_form(
//     _get_string_or_default($form['field_email']['und'][0]['email']['#value'], $admin_email),
//     $admin_email,
//     _forms_create_subjectline($form, 'confirmation'),
//     $body);
// }   // Ends _forms_user_email


/**
 * Send admin email
 */
// function _forms_admin_email($form, $admin_email) {
//   _send_email_for_entity_form(
//       $admin_email,
//       _get_string_or_default(
//         $form['field_email']['und'][0]['email']['#value'],
//         $admin_email),
//       _forms_create_subjectline($form),
//       _entity_display_form_data($form));
// }


/**
 * Get the title of the form
 */
function _forms_get_form_title($form) {
  return entity_label('entityform_type', entityform_type_load($form['#entity']->type));
}   // Ends _forms_get_form_title


/**
 * Get the email address of the form admin, i.e. the person or special mailbox
 * in ILR who needs to get an email when the form is subitted
 * If admin recipient isn't supplied in the form, use ILRWEB_EMAIL
 */
function _forms_get_admin_email($form) {
  $entityform_type = entityform_type_load($form['#entity']->type);
  $admin_email = empty($entityform_type->data['form_submission_ilr_recipient'])
        ? ILRWEB_EMAIL : $entityform_type->data['form_submission_ilr_recipient'];
  return $admin_email;
}   // Ends _forms_get_admin_email



/**
 * Create subject line for email (admin and user)
 */
function _forms_create_subjectline($form, $description='submitted') {
  return _forms_get_form_title($form) . ' ' . $description;
}  // Ends _forms_create_subjectline


/**
 * Display form data using entityform and entity2text code from Ted Bowman
 */
function _entity_display_form_data($form) {
  // Set display of form fields for email and anything else
  $entityform_id = $form['#entity']->entityform_id;
  $entityform = entityform_load($entityform_id);
  $controller = entity_get_controller('entityform');
  $content = $controller->view(array($entityform->entityform_id => $entityform), 'confirmation', NULL, TRUE);
  return entity2text_renderarray_to_text($content);
}

/**
 * Returns the value of a passed string or a default explicit value if the string is empty
 */
function _get_string_or_default($string, $default=STRING_TO_DISPLAY_FOR_OMITTED_FIELDS){
  return !empty($string) ? $string : $default;
}

/**
 * Formats a non-empty value for a person's name as a salutation
 */
function _form_salutation($name){
  return !empty($name) ? "Dear " . $name . ",\n\n" : "";
}

/**
 * Construct name for salutation, based on form fields (a) full_name or (b) firstname and lastname
 */
function _forms_construct_name_for_salutation($form){
  $name_for_salutation = '';
  if (array_key_exists('field_full_name', $form)) {
    $name_for_salutation = trim($form['field_full_name']['und'][0]['value']['#value']);
  }
  elseif (array_key_exists('field_firstname', $form)) {
    $name_for_salutation = trim($form['field_firstname']['und'][0]['value']['#value']);
    if (array_key_exists('field_lastname', $form)) {
      $name_for_salutation .= ' ';
      $name_for_salutation .= trim($form['field_lastname']['und'][0]['value']['#value']);
    }
  }
  return $name_for_salutation;
}

/**
 * Set up and send email
 */
function _send_email_for_entity_form($recip, $from, $subject, $body) {
    $params = array(
      'subject' => $subject,
      'content' => $body,
      );

    drupal_mail(
        'forms_std_confirmation',
        'email_confirmation',
        $recip,
        LANGUAGE_NONE,
        $params,
        $from
      );
}  // Ends _send_email_for_entity_form

/**
 * Implements hook_mail().
 * This is the email sent to the user
 */
function forms_std_confirmation_mail($key, &$message, $params) {
  $sitename = variable_get('site_name', 'Drupal');

  $message['headers']['MIME-Version'] = '1.0';
  $message['headers']['Content-Type'] = 'text/plain;charset=utf-8';
  $message['headers']['Bcc'] = ILRWEB_BCC_EMAIL;
  $message['subject'] = $params['subject'];
  $message['body'][] = $params['content'];
  $message['body'][] = "\n--\r";
  $message['body'][] = t("This is an automatic e-mail from $sitename.");
}
