<?php
/**
 * @file
 * Code for the Forms feature.
 */

include_once 'forms.features.inc';
include_once 'includes/forms.kerberized.inc';

define('ILRWEB_EMAIL', 'ilrweb@cornell.edu');
define('ILRWEB_BCC_EMAIL', 'ilrwebemailcc@cornell.edu');

/**
 * Implements hook_form_alter
 */
function forms_form_alter(&$form, &$form_state, $form_id) {
  // Check to see if an entityform is being rendered
  if (array_key_exists('entityform', $form_state)) {
    // Generate appropriate submit handler
    $form['actions']['submit']['#submit'][] = _forms_get_submit_handler($form['#bundle']);

    // Fill in default values of kerberized forms
    if (_forms_form_is_kerberized($form['#bundle'])) {
      _forms_handle_kerberized_form($form);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter
 *   Allows specifying the admin for the form
 *   Adds checkbox to specify NetID login requirement
 */
function forms_form_entityform_type_form_alter(&$form, &$form_state, $form_id) {
  _forms_add_admin_email_field($form);
  _forms_add_checkbox_to_include_name_in_admin_subject_line($form);
  _forms_add_kerberized_checkbox($form);
}

/**
 * Add admin email field to the "edit" form for this entityform
 */
function _forms_add_admin_email_field(&$form) {
  $previously_set_recip = (isset($form['#entityform_type']->data['form_submission_ilr_recipient']))
    ? $form['#entityform_type']->data['form_submission_ilr_recipient']
    : '';

  $form['data']['form_submission_ilr_recipient'] = array(
    '#type' => 'textfield',
    '#title' => t('ILR Admin email'),
    '#weight' => -1,
    '#default_value' => $previously_set_recip,
    '#description' => t('The email address - usually a special mailbox - to send the admin email to when a form is submitted.  Leave blank if no admin email is to be sent (rarely the case).'),
  );
}

/**
 * Add checkbox to "indicate whether to append the user's name to the
 * admin email subject line" to the "edit" form for this entityform
 */
function _forms_add_checkbox_to_include_name_in_admin_subject_line(&$form) {
  $add_user_name_to_subject_line = (isset($form['#entityform_type']->data['add_user_name_to_subject_line']))
    ? $form['#entityform_type']->data['add_user_name_to_subject_line']
    : 0;

  $form['data']['add_user_name_to_subject_line'] = array(
    '#type' => 'checkbox',
    '#title' => t('Append user\'s name to subject line of admin email; some ILR staff appreciate having this; some do not'),
    '#weight' => 0,
    '#default_value' => $add_user_name_to_subject_line,
  );
}

/**
 * Implement hook_theme().
 */
function forms_theme() {
  // This code is patterned after code in views_theme() in views.module
  // line 60 as of 4/2014
  // The array of templates is created on the fly, based on the tpl.php files in the /templates directory

  $base = array(
    'path' => drupal_get_path('module', 'forms') . '/templates',
  );

  // Array of all files in the directory
  $tplphpfiles = scandir($base['path']);

  // Loop through all the files, add template array elements for the tpl.php files
  foreach ($tplphpfiles as $filename) {
    // Check if the filename ends with ".tpl.php" by reversing the string ($filename) and
    // seeing if the reversed $filename now begins with "php.lpt." which is ".tpl.php" backwards.
    if (stripos(strrev($filename), "php.lpt.") === 0) {
      $template_name_len = strpos($filename, ".");
      $template_name = substr($filename, 0, $template_name_len);
      $template_as_key = str_replace('-', '_', $template_name);
      $template_array[$template_as_key] = $base + array('template' => $template_name);
    }
  }
  return $template_array;
}

/**
 * Generates the appropriate submit handler for entityforms
 */
function _forms_get_submit_handler($bundle) {
  $processingFunction = '_process_' . $bundle;
  if (function_exists($processingFunction)) {
    return $processingFunction;
  }
  return '_forms_process_default';
}

/**
 * Generates the appropriate email template for entityforms
 * Note that the email template contains underscores, but the actual filename contains hyphens.
 */
function _forms_get_tplphp_file($bundle) {
  $tplphp_file = str_replace('_', '-', $bundle);
  $tplphp_file_full_path = drupal_get_path('module', 'forms') . '/templates/' . $tplphp_file . '.tpl.php';
  if (file_exists($tplphp_file_full_path)) {
    return $bundle;
  }
  return 'default_mail';
}

/**
 * Default processing for forms
 */
function _forms_process_default(&$form) {
  $admin_email = _forms_get_admin_email($form);
  _forms_send_emails($form, $admin_email);
}


/**
 * Process Career Services contact form
 */
function _process_career_services_contact_form(&$form) {
  // The email value has three chars appended to ensure uniqueness, so they
  // need to be stripped off.  See comments in
  // _forms_career_services_contact_options for more info.
  $email_value_stripped = substr(
    trim($form['field_career_services_how_to_dir']['und']['#value']), 0, -3);
  $admin_email = $email_value_stripped . '@cornell.edu';
  $subject = trim($form['field_subject_line']['und'][0]['value']['#value']);
  _forms_send_emails($form, $admin_email, $subject);
}

function _forms_career_services_contact_options() {
  // We need duplicate email addresses (keys in this array; values in the radio buttons)
  // in this list, and Drupal doesn't permit that, so I'm getting around it by appending
  // three characters to each in order to make them unique.  Those three chars will later
  // be stripped out.  Any chars can be used, as long as everything is unique.
  return array(
    'ilrcareers-01' => 'Office of Career Services (General Inquiries)',
    'ilrcareerrecruiting-01' => 'ILR On-Campus Recruiting - student inquiries',
    'djc5-01' => 'ILR On-Campus Recruiting - employer inquiries',
    'djc5-02' => 'ILR Career Fair',
    'mlh15-01' => 'Social Justice Career Fair',
    'jap7-01' => 'CAHRS Executive Roundtable',
    'mlh15-02' => 'Labor Roundtable',
    'mlh15-03' => 'FEX (Freshman Externship Program) / WISP (Winter Internship Program)',
    'ilrab-01' => 'ILR Alumni Bulletin',
    'bk30-01' => 'ILR Credit Internship Program',
    'rmd5-01' => 'Regina M. Duffey Moravek, Director of ILR Career Services',
  );
}

/**
 * Send user and admin emails
 */
function _forms_send_emails($form, $admin_email, $subject='') {
  $form_title = _forms_get_form_title($form);
  $user_name = _forms_construct_user_name($form);
  $email_template = _forms_get_tplphp_file($form['#bundle']);

  // User email
  if (!empty($form['field_email']['und'][0]['email']['#value'])) {
    $salutation = _form_salutation($user_name);
    $body = theme($email_template, array(
      'salutation'      => $salutation,
      'form_data'       => _entity_display_form_data($form),
      'admin_email'     => $admin_email,
      'form_title'      => $form_title,
    ));

    $to = _get_string_or_default($form['field_email']['und'][0]['email']['#value'], $admin_email);
    $from = $admin_email;
    $subject_user = $form_title . ' confirmation';
    _send_email_for_entity_form($to, $from, $subject_user, $body);
  }

  // Admin email
  $to = $admin_email;
  $from = _get_string_or_default($form['field_email']['und'][0]['email']['#value'], $admin_email);
  if (empty($subject)) {
    $subject = $form_title . ' submitted';
  }
  if (_forms_admin_subject_line_includes_user_name($form)) {
    $subject .= " - $user_name";
  }
  $body =  _entity_display_form_data($form);
  _send_email_for_entity_form($to, $from, $subject, $body);
}


/**
 * Get the title of the form
 */
function _forms_get_form_title($form) {
  return entity_label('entityform_type', entityform_type_load($form['#entity']->type));
}


/**
 * Get the email address of the form admin, i.e. the person or special mailbox
 * in ILR who needs to get an email when the form is subitted
 * If admin recipient isn't supplied in the form, use ILRWEB_EMAIL
 */
function _forms_get_admin_email($form) {
  $entityform_type = entityform_type_load($form['#entity']->type);
  $admin_email = empty($entityform_type->data['form_submission_ilr_recipient'])
        ? ILRWEB_EMAIL : $entityform_type->data['form_submission_ilr_recipient'];
  return $admin_email;
}


/**
 * Checks whether a the user name should be appended to the admin subject line
 */
function _forms_admin_subject_line_includes_user_name($form) {
  $entityform_type = entityform_type_load($form['#entity']->type);
  $admin_subject_line_includes_user_name = empty($entityform_type->data['add_user_name_to_subject_line'])
    ? FALSE
    : $entityform_type->data['add_user_name_to_subject_line'];
  return $admin_subject_line_includes_user_name;
}


/**
 * Display form data using entityform and entity2text code from Ted Bowman
 */
function _entity_display_form_data($form) {
  // Set display of form fields for email and anything else
  $entityform_id = $form['#entity']->entityform_id;
  $entityform = entityform_load($entityform_id);
  $controller = entity_get_controller('entityform');
  $content = $controller->view(array($entityform->entityform_id => $entityform), 'confirmation', NULL, TRUE);
  return entity2text_renderarray_to_text($content);
}

/**
 * Returns the value of a passed string or a default explicit value if the string is empty
 */
function _get_string_or_default($string, $default='Not specified'){
  return !empty($string) ? $string : $default;
}

/**
 * Formats a non-empty value for a person's name as a salutation
 */
function _form_salutation($name){
  return !empty($name) ? "Dear " . $name . ",\n\n" : "";
}

/**
 * Construct name for salutation, based on form fields (a) full_name or (b) firstname and lastname
 */
function _forms_construct_user_name($form){
  $name_for_salutation = '';
  if (array_key_exists('field_full_name', $form)) {
    $name_for_salutation = trim($form['field_full_name']['und'][0]['value']['#value']);
  }
  elseif (array_key_exists('field_first_name', $form)) {
    $name_for_salutation = trim($form['field_first_name']['und'][0]['value']['#value']);
    if (array_key_exists('field_last_name', $form)) {
      $name_for_salutation .= ' ';
      $name_for_salutation .= trim($form['field_last_name']['und'][0]['value']['#value']);
    }
  }
  return $name_for_salutation;
}

/**
 * Set up and send email
 */
function _send_email_for_entity_form($recip, $from, $subject, $body) {
    $params = array(
      'subject' => $subject,
      'content' => $body,
      );

    drupal_mail(
        'forms_std_confirmation',
        'email_confirmation',
        $recip,
        LANGUAGE_NONE,
        $params,
        $from
      );
}

/**
 * Implements hook_mail().
 * This is the email sent to the user
 */
function forms_std_confirmation_mail($key, &$message, $params) {
  $sitename = variable_get('site_name', 'Drupal');

  $message['headers']['MIME-Version'] = '1.0';
  $message['headers']['Content-Type'] = 'text/plain;charset=utf-8';
  $message['headers']['Bcc'] = ILRWEB_BCC_EMAIL;
  $message['subject'] = $params['subject'];
  $message['body'][] = $params['content'];
  $message['body'][] = "\n--\r";
  $message['body'][] = t("This is an automatic e-mail from $sitename.");
}
