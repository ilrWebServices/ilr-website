<?php
/**
 * @file
 * Code for the Forms feature.
 */

include_once 'forms.features.inc';
include_once 'includes/forms.kerberized.inc';
include_once 'includes/forms.statelists.inc';

require_once DRUPAL_ROOT . '/../config/get_secrets.php';

define('ILRWEB_EMAIL', 'ilrweb@cornell.edu');
define('ILRWEB_BCC_EMAIL', 'ilrwebemailcc@cornell.edu');

/**
 * Implements hook_menu().
 */
function forms_menu() {
  $items['admin/structure/entityform_types/usage'] = array(
    'title' => 'Forms in Use',
    'page callback' => '_forms_usage_page',
    'access arguments' => array('administer entityform types'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_entityform_presave.
 * Sets the registration date for registration forms
 * Sets the job postdate for alumni job postings
 */
function forms_entityform_presave($entityform) {
  if (_forms_is_event_registration_form($entityform) && $entityform->is_new) {
    _forms_set_registration_date($entityform);
  }
  if ($entityform->type == 'job_postings_for_ilr_alumni') {
    _forms_set_alumni_job_postdate($entityform);
  }
}


/**
 * Implements hook_entityform_view_alter
 */
 function forms_entityform_view_alter(&$render_array) {
  if ($render_array['#entity']->uid == 0) {
    $render_array['info']['user']['#markup'] = 'Submitted on ' .
      format_date($render_array['#entity']->created);
  }
 }

/**
 * Implements hook_form_FORM_ID_alter().
 * Sets maxlengths on Alumni job postings form
 */
function forms_form_job_postings_for_ilr_alumni_entityform_edit_form_alter(&$form, &$form_state) {
  $maxlengths = array(
    'field_duties'            => 800,
    'field_qualifications'    => 500,
    'field_instructions'      => 200,
  );
  foreach ($maxlengths as $field => $length) {
    $form[$field][LANGUAGE_NONE][0]['value']['#attributes']['maxlength'] = $length;
  }
}

 /**
 * Implements hook_mail_alter
 * These changes modify the html version of the email to be something that converts
 * to a better text version (using the standard mail.inc code).  If I could find a
 * way to change a few lines of mail.inc, this is what I'd change, in the
 * function drupal_html_to_text:
 *        case 'h3':
 *         $indent[] = '
 *';
 *         break;
 *       case '/h3':
 *         array_pop($indent);
 *         break;
 */
 function forms_mail_alter(&$message) {
    $message['body'][0] = str_replace(
      "<h3 class=\"field-label\">",
      "&nbsp;<h5 style=\"font-size: 16px;\" class=\"field-label\">",
      $message['body'][0]);
    $message['body'][0] = str_replace(
      "</h3>", ":</h5>", $message['body'][0]);
    // Uncomment this to indent the value and add an extra blank line after the label.
    // $message['body'][0] = str_replace(
    //    "<div class=\"field", "&nbsp;<div class=\"field", $message['body'][0]);
 }


/**
 * Set Alumni Bulletin job posting date based on datetime of submission
 * Note that setting this in presave has the side effect of saving them to the db
 * and then being able to use it in the email.
 */
function _forms_set_alumni_job_postdate($entityform) {
  $unix_seconds = $entityform->created;
  $submission_datetime_array = getdate($unix_seconds);
  $submission_dayofweek = $submission_datetime_array['wday'];
  $submission_datetime = date_create();
  date_timestamp_set($submission_datetime, $unix_seconds);

  // Post date is the coming Friday if submission day is Saturday, Sunday, or Monday before 3:00pm
  // Otherwise it's the Friday after that
  switch ($submission_dayofweek) {
    case '0':   // Sunday
      $postdateobj = $submission_datetime->add(new DateInterval('P5D'));
      break;
    case '1':   // Monday
      if ($submission_datetime_array['hours'] < 15) {
        $postdateobj = $submission_datetime->add(new DateInterval('P4D'));
      }
      else {
        $postdateobj = $submission_datetime->add(new DateInterval('P11D'));
      }
      break;
    default:   // Tuesday - Saturday
      $addon = 12 - $submission_dayofweek;
      $date_interval_string = 'P' . $addon . 'D';
      $postdateobj = $submission_datetime->add(new DateInterval($date_interval_string));
      break;
  }

  // Strip off the time, only want the date, and put it in the format Dottie needs m/d/yyyy
  $postdate_ts = $postdateobj->getTimestamp();

  // Save the postdate to the hidden field h_postdate on the entityform
  $entityform_wrapper = _forms_entityform_wrapper($entityform);
  $entityform_wrapper->field_h_post_date->set($postdate_ts);

}


/**
 * Implements hook_entity_insert().
 */
function forms_entityform_insert($entityform) {
  if (!$entityform->draft) {
    _forms_process_entityform($entityform);
  }
}

/**
 * Processing function that can be called independently
 * from forms_entityform_insert()
 * @see _elavon_process_entityform() as an example
 */
function _forms_process_entityform($entityform) {
  $processingFunction = '_process_' . $entityform->type;
  if (function_exists($processingFunction)) {
    $processingFunction($entityform);
  }
  else {
    _forms_process_default($entityform);
  }
}

/**
* Implements hook_admin_menu_output_build().
* Adds the entityform submissions page to the admin menu
*/
function forms_admin_menu_output_build(&$content) {
  if (isset($content['menu']) && user_access('view any entityform')) {
    $content['menu']['admin/content']['admin/content/entityform-submissions'] = array(
      '#title' => t('Entityform Submissions'),
      '#href' => 'admin/reports/entityforms',
      '#weight' => 0,
    );
  }
}

/**
 * Implements hook_admin_paths().
 * Sets the entityform submissions pages to the admin theme
 */
function forms_admin_paths() {
  $paths = array(
    'entityform-submissions/submissions/*' => TRUE,
  );
  return $paths;
}

/**
 * Implements hook_form_BASE_FORM_ID_alter.
 * entityform_edit_form is the BASE_FORM_ID for the forms that
 * the user will be filling out
 */
function forms_form_entityform_edit_form_alter(&$form, &$entityform_state, $form_id) {
  // Fill in default values of kerberized forms
  if (_forms_form_is_kerberized($form['#bundle'])) {
    _forms_handle_kerberized_form($form);
  }

  // Hide hidden fields, i.e. any field where the machine name starts with "field_h_"
  foreach ($form as $key=>$value) {
    if (substr($key,0,8) == 'field_h_') {
      $form[$key]['#access'] = FALSE;
    }
  }
  // Special processing of specific forms
  switch ($form_id) {
    case 'check_your_eligibility_entityform_edit_form': // Requested by Erin Sutzko 5/2015
      unset($form['field_years_full_time_work_exp'][LANGUAGE_NONE]['#options']['1-5 years']);
      unset($form['field_years_full_time_hr'][LANGUAGE_NONE]['#options']['No experience']);
      break;
    case 'collective_bargaining_videos_entityform_edit_form':
      if (isset($_COOKIE['Drupal_visitor_cbvideoinfo'])) {
        _forms_collective_bargaining_videos_redirect();
      }
      break;
    case 'fex_student_application_entityform_edit_form': // Hide options that are not applicable
      unset($form['field_year_fr_soph_jr_sr_milr'][LANGUAGE_NONE]['#options']['Sophomore']);
      unset($form['field_year_fr_soph_jr_sr_milr'][LANGUAGE_NONE]['#options']['Junior']);
      unset($form['field_year_fr_soph_jr_sr_milr'][LANGUAGE_NONE]['#options']['Senior']);
      unset($form['field_year_fr_soph_jr_sr_milr'][LANGUAGE_NONE]['#options']['First-year MILR']);
      unset($form['field_year_fr_soph_jr_sr_milr'][LANGUAGE_NONE]['#options']['MILR']);
      break;
    case 'wisp_student_application_entityform_edit_form': // Hide options that are not applicable
      unset($form['field_year_fr_soph_jr_sr_milr'][LANGUAGE_NONE]['#options']['Freshman']);
      unset($form['field_year_fr_soph_jr_sr_milr'][LANGUAGE_NONE]['#options']['MILR']);
      break;
  }
}

/**
 * Adds the custom parameters needed by the marketing team for the grad programs form
 */
function _forms_grad_form_add_custom_params($entityform) {
  $wrapper = _forms_entityform_wrapper($entityform);
  $confirmation_url = _entityform_type_get_confirm_url($wrapper->type->value()->type);
  $remove = array(' ','.','/');
  $degree = strtolower(str_replace($remove, '', $wrapper->field_degree_all_grad_options->value()));
  $params = array(
    'query' => array(
      'entityform_id' => $entityform->entityform_id,
      'degree' => $degree,
    ),
  );
  // Keep entityform from denying access
  $_SESSION['entityform_submission'] = $entityform->entityform_id;
  drupal_goto($confirmation_url, $params);
}


/**
 * Collective Bargaining videos redirect
 * The URL to redirect to will get set in the db via drush using the variable "cb_videos_url"
 * What's in the code is a default.
 */
function _forms_collective_bargaining_videos_redirect() {
  $cb_videos_redirect = variable_get('cb_videos_url', 'http://www.ilr.cornell.edu/worker-institute/education-and-training/collective-bargaining-training-videos/video');
  drupal_goto($cb_videos_redirect);
}

/**
 * Implements hook_form_FORM_ID_alter.
 *   Allows specifying the admin for the form
 *   Adds checkbox to specify NetID login requirement
 */
function forms_form_entityform_type_form_alter(&$form, &$form_state, $form_id) {
  _forms_add_data_attribute_checkbox($form,'send_confirmation_email_to_user');
  _forms_add_data_attribute_checkbox($form,'send_confirmation_email_to_admin');
  _forms_add_data_attribute_checkbox($form,'add_user_name_to_subject_line', 'Append user\'s name to subject line of admin email; some ILR staff appreciate having this; some do not');
  _forms_add_data_attribute_checkbox($form, 'kerberized', 'This form requires NetID authentication');
  _forms_add_data_attribute_checkbox($form, 'add_payment_processing', 'This form is used to process payments');
  _forms_add_admin_email_field($form);
}

/**
 * Add a checkbox for a data attribute to the form
 */
function _forms_add_data_attribute_checkbox(&$form, $key, $description=NULL) {
  if (!$description) {
    $description = ucfirst(str_replace('_', ' ', $key));
  }

  $default = (isset($form['#entityform_type']->data[$key]))
    ? $form['#entityform_type']->data[$key]
    : 0;

  $form['data'][$key] = array(
    '#type' => 'checkbox',
    '#title' => t($description),
    '#weight' => 0,
    '#default_value' => $default,
  );
}

/**
 * Add admin email field to the "edit" form for this entityform
 */
function _forms_add_admin_email_field(&$form) {
  $previously_set_recip = (isset($form['#entityform_type']->data['form_submission_ilr_recipient']))
    ? $form['#entityform_type']->data['form_submission_ilr_recipient']
    : '';
  $form['data']['form_submission_ilr_recipient'] = array(
    '#type' => 'textfield',
    '#title' => t('ILR Admin email'),
    '#weight' => 0,
    '#default_value' => $previously_set_recip,
    '#description' => t('The email address - usually a special mailbox - to send the admin email to when a form is submitted. Also used as From email for user confirmation, so don\'t leave it blank.'),
  );
}

/**
 * Implements hook_theme()
 */
function forms_theme() {
  // Add email templates, based on the tpl.php files in the /templates directory
  $template_array = _forms_get_theme_array_from_template_files();
  return $template_array;
}

/**
 * Generates an array of email templates from files in /templates for forms_theme
 */
function _forms_get_theme_array_from_template_files() {
  $email_template_files_path = drupal_get_path('module', 'forms') . '/templates';
  $template_files = scandir($email_template_files_path);

  // Loop through all the files, add template array elements for the tpl.php files
  foreach ($template_files as $filename) {
    // Check if the filename ends with ".tpl.php"
    if ($template_name = strstr($filename, '.tpl.php', TRUE)) {
      $template_as_key = str_replace('-', '_', $template_name);
      $template_array[$template_as_key] = array(
        'path' => $email_template_files_path,
        'template' => $template_name,
      );
    }
  }
  return $template_array;
}

function _forms_get_template_path_for_entityform($entityform) {
  $folder_path = drupal_get_path('module', 'forms') . '/templates/';
  return $folder_path . str_replace('_', '-', $entityform->type);
}


/**
 * Generates the appropriate email template for entityforms
 * Note that the email template contains underscores, but the actual filename
 * contains hyphens.
 */
function _forms_get_tplphp_file($entityform, $email_type = '') {
  $append_string = ($email_type == 'admin') ? '-admin' : '';
  $template_path = _forms_get_template_path_for_entityform($entityform);

  $tplphp_file_full_path = $template_path . $append_string . '.tpl.php';
  if (file_exists($tplphp_file_full_path)) {
    return $entityform->type . str_replace('-', '_', $append_string);
  }
  elseif (_forms_is_event_registration_form($entityform)) {
    return 'default_registration_confirmation' . str_replace('-', '_', $append_string);
  }
  $retval = ($append_string == '') ? 'default_mail' : FALSE;
  return $retval;
}


/**
 * Default processing for forms
 */
function _forms_process_default(&$entityform) {
  $admin_email = _forms_get_admin_email($entityform);
  _forms_send_emails($entityform, $admin_email);
}

/**
 * Process Collective Bargaining Videos tracking - set cookie, then do normal processing, then
 * redirect to the list of videos.
 */
function _process_collective_bargaining_videos(&$entityform) {
  user_cookie_save(array ('cbvideoinfo' => 'yes'));
  _forms_process_default($entityform);
  _forms_collective_bargaining_videos_redirect();
}

/**
 * Process eMediation Competition registration form (Scheinman)
 * If there's a second participant, send her an email, too.
 */
function _process_emediation_competition_reg(&$entityform) {
  // Regular email
  $admin_email = _forms_get_admin_email($entityform);
  _forms_send_emails($entityform, $admin_email);

  // Email to second team member if it's a two-person team
  if (!empty($entityform->field_email_additional['und'])) {
    _forms_send_emediation_teammate_email($entityform);
  }
}

/**
 * Send email to second eMediation Competetion teammate
 */
function _forms_send_emediation_teammate_email(&$entityform) {
  $admin_email = _forms_get_admin_email($entityform);
  $entityform_wrapper = _forms_entityform_wrapper($entityform);

  $subm_fullname = $entityform_wrapper->field_first_name->value()
    . ' ' . $entityform_wrapper->field_last_name->value();
  $teammate_fullname = $entityform_wrapper->field_first_name_additional->value()
    . ' ' . $entityform_wrapper->field_last_name_additional->value();
  $teammate_email = $entityform_wrapper->field_email_additional->value();
  $email_template = 'emediation_teammate_confirmation';

  $params = array(
    'form_data'   => _entity_display_form_data($entityform),
    'subm_fullname'   => $subm_fullname,
    'teammate_fullname'   => $teammate_fullname,
  );

  $body = theme($email_template,
    _forms_generate_template_parameters($entityform, $params));

  $to = $teammate_email;
  $from = $admin_email;
  $subject = 'eMediation Competition - 2nd participant confirmation';
  _send_email_for_entity_form($to, $from, $subject, $body);
}

/**
 * Process MPS NYC contact form to specify subject line
 */
function _process_mps_nyc_have_more_questions(&$entityform) {
  $user_subject = "Cornell MPS/ILR program in NYC";
  $admin_subject = "Form subm (mps/nyc contact)";
  $admin_email = _forms_get_admin_email($entityform);
  _forms_send_emails($entityform, $admin_email, $admin_subject, $user_subject);
}

/**
 * Process Course request forms to notify the correct email address
 * Check the course first, then the sponsor, with the form admin email as default
 */
function _process_course_request(&$entityform) {
  $admin_emails = array();
  $entityform_wrapper = _forms_entityform_wrapper($entityform);
  $course = $entityform_wrapper->field_course->value();
  $course_wrapper = ilr_get_node_wrapper($course);
  if ($email = $course_wrapper->field_email->value()) {
    $admin_emails[] = $email;
  } else {
    foreach ($course_wrapper->field_course_sponsor_reference->getIterator() as $delta => $term_wrapper) {
      if ($email = $term_wrapper->field_email->value()) {
        $admin_emails[] = $email;
      }
    }
  }

  $admin_email = (count($admin_emails))
    ? implode(",", $admin_emails)
    : _forms_get_admin_email($entityform);

  _forms_send_emails($entityform, $admin_email);
}

/**
 * Process FEX student form
 */
function _process_fex_student_application(&$entityform) {
  _forms_fexwisp_student_email_processing($entityform, 'FEX');
}

/**
 * Process WISP student form
 */
function _process_wisp_student_application(&$entityform) {
  _forms_fexwisp_student_email_processing($entityform, 'WISP');
}

/**
 * Actual processing for fex and wisp student forms
 */
function _forms_fexwisp_student_email_processing(&$entityform, $program) {
  $entityform_wrapper = _forms_entityform_wrapper($entityform);
  $program_year = $entityform_wrapper->field_h_school_year->value();
  $user_subject = $program . " " . $program_year . " application";
  $admin_subject = $program . " " . $program_year . " student application";
  $admin_email = _forms_get_admin_email($entityform);
  _forms_send_emails($entityform, $admin_email, $admin_subject, $user_subject);
}

/**
 * Process FEX/WISP sponsor form - set subject line and admin email based on program
 */
function _process_fex_wisp_sponsor_registration(&$entityform) {
  $entityform_wrapper = _forms_entityform_wrapper($entityform);
  // The entityform_wrapper doesn't contain exactly what I need for the program
  // (field_fex_wisp_opportunity_type), which is a checkbox field. I'm getting
  // the word "Array" instead of any of the contents if I just use
  // $program = $entityform_wrapper->field_fex_wisp_opportunity_type->value();
  $program = $entityform_wrapper->field_fex_wisp_opportunity_type->value();
  if (sizeof($program) == 2) {
    $program = 'FEX/WISP';
  }
  else {
    $program = strtoupper($program[0]);
  }

  $program_year = $entityform_wrapper->field_h_school_year->value();
  $org = $entityform_wrapper->field_organization->value();

  $user_subject = $program . " " . $program_year . " sponsor registration confirmation";
  $admin_subject = "Online " . $program . " " . $program_year . " sponsor registration - " . $org;

  $admin_email = (strpos($program, '/') > 0) //FEX/WISP
    ? "ilrfex@cornell.edu, ilrwisp@cornell.edu"
    : 'ilr' . strtolower($program) . '@cornell.edu';

  $admin_email .= ', mlh15@cornell.edu';
  _forms_send_emails($entityform, $admin_email, $admin_subject, $user_subject);
}

/**
 * Process WIT email list subscribe / unsubscribe: one email to lyris, one to the user
 */
function _process_wit_email_list_subscribe(&$entityform) {
  $from = 'catherwoodWIT@cornell.edu';
  $email_list = 'wit-l';
  _forms_send_lyris_email($entityform, $from, $email_list);

  $admin_email = _forms_get_admin_email($entityform);
  _forms_send_emails($entityform, $admin_email);
}

function _process_alumni_eNews_subscribe(&$entityform) {
  $from = 'jlw85@cornell.edu';
  $email_list = 'ilr_alumni-l';
  _forms_send_lyris_email($entityform, $from, $email_list);
}

function _process_graduate_programs_inquiry(&$entityform) {
  $admin_email = _forms_get_admin_email($entityform);
  _forms_send_emails($entityform, $admin_email);
  _forms_grad_form_add_custom_params($entityform);
}

function _forms_send_lyris_email(&$entityform, $from, $email_list) {
  global $ILR_SECRETS;
  $pw = $ILR_SECRETS[$email_list];
  $user_name = _forms_construct_user_name($entityform);
  $entityform_wrapper = _forms_entityform_wrapper($entityform);
  $user_email = $entityform_wrapper->field_email->value();

  $action = $entityform->field_subscribe_or_unsubscribe['und'][0]['value'];
  $email_template = ($action == 'add') ? 'lyris_subscribe' : 'lyris_unsubscribe';
  $subject_lyris = ($action == 'add') ? 's u b s c r i b e  ' : 'u n s u b s c r i b e  ';
  $subject_lyris .= 'via webpage: list ' . $email_list . ', user ' . $user_name;

  $body = theme($email_template, array(
      'list_password'         => $pw,
      'list_name'             => $email_list,
      'user_email'            => $user_email,
      'user_name'             => $user_name,
    ));

  $to = 'lyris@cornell.edu';
  _send_email_for_entity_form($to, $from, $subject_lyris, nl2br($body));
}

/**
 * Process Web Services request form
 * sends to remedy and to selected Web Team staff who want to see an email
 */
function _process_web_services_request_form(&$entityform) {
  // Email to remedy
  // Construct subject line with first word of request option, subject user specified, and user's name
  $request_words = str_word_count($entityform->field_web_request_options['und'][0]['value'], 1);
  $short_request_option = trim($request_words[0]);
  $user_name = _forms_construct_user_name($entityform);
  $subject_remedy =
    $short_request_option . ' - ' .
    trim($entityform->field_subject_line['und'][0]['value']) . ' - ' . $user_name;
  $remedy_email = 'ilrwebrequest@cornell.edu';
  _forms_send_remedy_email($entityform, $remedy_email, $subject_remedy);

  // Email to people in the Web group who want an email each time the form is submitted
  $recipients = 'cgh2@cornell.edu, tls245@cornell.edu, fjp2@cornell.edu';
  $subject_web = 'Webreq - ' . $subject_remedy;
  _forms_send_emails($entityform, $recipients, $subject_web);
}


/**
 * Process Tech Services Desktop Support form
 */
function _process_desktop_support_request(&$entityform) {
  $subject = trim($entityform->field_subject_line['und'][0]['value']);
  _forms_process_standard_tech_services_requests($entityform, $subject);
}

/**
 * Process Tech Services Classroom Technologies request form
 */
function _process_classroom_technologies_request(&$entityform) {
  $subject = trim($entityform->field_course_number['und'][0]['value']) . ' - Classroom Tech Req';
  _forms_process_standard_tech_services_requests($entityform, $subject);
}

/**
 * Standard processing for Tech Services forms to send to Remedy
 */
function _forms_process_standard_tech_services_requests(&$entityform, $subject) {
  // This sends to Remedy ticket system, but not to admin at ILR or to user.
  $remedy_email = 'ilrtsrequests@cornell.edu';
  _forms_send_remedy_email($entityform, $remedy_email, $subject);
}


/**
 * Send email to Remedy
 */
function _forms_send_remedy_email(&$entityform, $remedy_email, $subject='Email to remedy') {
  $form_title = _forms_get_form_title($entityform);
  $user_name = _forms_construct_user_name($entityform);
  $entityform_wrapper = _forms_entityform_wrapper($entityform);
  $user_email = $entityform_wrapper->field_email->value();
  $email_template = 'remedy_email';

  $body = theme($email_template, array(
    'form_title'  => $form_title,
    'form_data'   => _entity_display_form_data($entityform),
  ));

  $to = $remedy_email;
  $from = $user_email;
  _send_email_for_entity_form($to, $from, $subject, $body);
}



/**
 * Process Library contact form
 */
function _process_library_contact_form(&$entityform) {
  $wrapper = _forms_entityform_wrapper($entityform);
  $admin_email = $wrapper->field_library_how_to_direct->value() . '@cornell.edu';
  _forms_send_emails($entityform, $admin_email);
}

function _forms_library_contact_options() {
  return array(
    'ilrlib' => 'General Information',
    'ilrcirc' => 'Circulation',
    'kheel_center' => 'Kheel Center',
    'ilrref' => 'Research',
  );
}

/**
 * Process Career Services contact form
 */
function _process_career_services_contact_form(&$entityform) {
  // The email value has three chars appended to ensure uniqueness, so they
  // need to be stripped off.  See comments in
  // _forms_career_services_contact_options for more info.
  $email_value_stripped = substr(
    trim($entityform->field_career_services_how_to_dir['und'][0]['value']), 0, -3);
  $admin_email = $email_value_stripped . '@cornell.edu';
  $subject = trim($entityform->field_subject_line['und'][0]['value']);
  _forms_send_emails($entityform, $admin_email, $subject);
}

function _forms_career_services_contact_options() {
  // We need duplicate email addresses (keys in this array; values in the radio buttons)
  // in this list, and Drupal doesn't permit that, so I'm getting around it by appending
  // three characters to each in order to make them unique.  Those three chars will later
  // be stripped out.  Any chars can be used, as long as everything is unique.
  return array(
    'ilrcareers-01' => 'Office of Career Services (General Inquiries)',
    'ilrcareerrecruiting-01' => 'ILR On-Campus Recruiting - student inquiries',
    'djc5-01' => 'ILR On-Campus Recruiting - employer inquiries',
    'djc5-02' => 'ILR Career Fair',
    'mlh15-01' => 'Social Justice Career Fair',
    'jap7-01' => 'CAHRS Executive Roundtable',
    'acs5-01' => 'Labor Roundtable',
    'mlh15-02' => 'FEX (Freshman Externship Program) / WISP (Winter Internship Program)',
    'ilrab-01' => 'ILR Alumni Bulletin',
    'bk30-01' => 'ILR Credit Internship Program',
    'rmd5-01' => 'Regina M. Duffey Moravek, Director of ILR Career Services',
  );
}

/**
 * Generate options list for year_as_list_text field, based on which form it is
 */
function _year_as_list_text_options($field, $instance = NULL, $entity_type = NULL, $entity = NULL) {
  $options = FALSE;
  if (!$entity) {
    // Field edit form doesn't contain $entity; form on the site does.
    // This means we can't set a default value, but that's not a problem.
    return FALSE;
  }

  switch ($entity->type) {
    case 'career_and_networking_panels':
      $options = _forms_year_relative_options(0,7);
      break;
    case 'check_your_eligibility_milr':
      $options = _forms_year_relative_options(4,-70);
      break;
    case 'contact_ilr_admissions':
      $options = _forms_year_relative_options(-5,5);
      $options[] = 'other';
      break;
    case 'fex_wisp_sponsor_registration':
      $options = _forms_year_relative_options(0,-70);
      break;
    case 'graduate_programs_inquiry':
      // Switch year if it's May 1 or later
      $options = date('n') < 5 ? _forms_year_relative_options(0,4) : _forms_year_relative_options(1,4);
      break;
    case 'ilr_information_session_sign_in':
      $options = date('n') < 4 ? _forms_year_relative_options(0,6) : _forms_year_relative_options(1,6);
      break;
    case 'reflection':
      $options = range(1948, date('Y') + 3);
      break;
    default:
      $options = _forms_year_relative_options(0,6);
      break;
  }
  return $options;
}

/**
 * Second function to generate options list for years, based on which form it is
 * I need this, because of forms that have more than one field for a set of years
 */
function _forms_year_as_list_text_options2($field, $instance = NULL, $entity_type = NULL, $entity = NULL) {
  switch ($entity->type) {
    case 'fex_wisp_sponsor_registration':
      $options = _forms_year_relative_options(0,-70);
      break;
    case 'contact_ilr_admissions':
      // Anticipated entry year at Cornell for Admissions Contact form
      // If it's before April: start with current year and go out 6 years
      // April or later: start with the following year and go out 6 years
      $options = (date('n') < 4)
        ? _forms_year_relative_options(0,6)
        : _forms_year_relative_options(1,6);
      break;
    default:
      $options = _forms_year_relative_options(0,6);
      break;
  }
  return $options;
}

/**
 * Set the hidden field h_school_year to the current year.
 * Note that it's a text field, not numeric, since it sometimes has other values.
 */
function _forms_set_hidden_school_year_to_current($entityform) {
  $entityform_wrapper = _forms_entityform_wrapper($entityform);
  $currYear = date('Y');
  $entityform_wrapper->field_h_school_year->set($currYear);
}

/**
 * Generate a list for a select or radio form element with a list of sequential numbers
 * e.g. absolute years
 */
function _forms_number_absolute_options($first, $last) {
  $num = array();
  if ($first <= $last) {
    for ($num=$first; $num<=$last; $num++) {
      $numList["$num"] = $num;
    }
  }
  else {
    for ($num=$first; $num>=$last; $num--) {
      $numList["$num"] = $num;
    }
  }
  return $numList;
}

/**
 * Generate a list for a select or radio form element with a list of years relative to current year
 * e.g. if $firstOffset = -8 and $lastOffset = 6, this will run from 8 years ago through 6 years from now.
 * If $firstOffset > $lastOffset the years will show up in descending order.
 */
function _forms_year_relative_options($firstOffset, $lastOffset) {
  $currYear = date('Y');
  $first = $currYear + $firstOffset;
  $last = $currYear + $lastOffset;
  return _forms_number_absolute_options($first, $last);
}


/**
 * Generate the options for graduation dates for the graduate student and undergrad
 * Application to Graduate forms.
 * If current date is before Sept. 1st, use current year, otherwise use next year.
 */
function _forms_application_to_graduate_graduation_dates() {
  $grad_year_display = date('Y');
  $today_timestamp = time();

  $switch_date = $grad_year_display . '-09-01';
  $switch_date_timestamp = strtotime($switch_date);

  if ($today_timestamp > $switch_date_timestamp) {
    $grad_year_display++;
  }

  return array(
    'January$grad_year_display' => 'January ' . $grad_year_display,
    'May$grad_year_display' => 'May ' . $grad_year_display,
    'August$grad_year_display' => 'August ' . $grad_year_display,
  );
}

function _forms_full_names_states_and_provinces() {
  $full_names=TRUE;
  $include_other=TRUE;
  $include_states=TRUE;
  $include_provinces=TRUE;
  $include_territories=FALSE;

  return _forms_statelist_options(
    $full_names, $include_other, $include_states, $include_provinces, $include_territories);
}


/**
 * Send user and admin emails
 */
function _forms_send_emails($entityform, $admin_email, $subject='',
  $subject_user='', $custom_params=array()) {
  $form_title = _forms_get_form_title($entityform);
  $user_name = _forms_construct_user_name($entityform);
  $email_template = _forms_get_tplphp_file($entityform);
  $entityform_wrapper = _forms_entityform_wrapper($entityform);
  if (isset($entityform_wrapper->field_email)) {
    $user_email = $entityform_wrapper->field_email->value();
  }
  elseif (isset($entityform_wrapper->field_netid)) {
    $user_email = $entityform_wrapper->field_netid->value() . "@cornell.edu";
  }
  // User email
  if (isset($user_email) &&
    _forms_user_receives_confirmation_email($entityform)) {
    $params = array(
      'salutation' => _form_salutation($user_name),
      'admin_email' => $admin_email,
    );
    $body = theme($email_template, _forms_generate_template_parameters(
      $entityform, $params, $custom_params));
    $to = $user_email;

    // Sometimes the admin email goes to two addresses; in that case, set the
    // "from" email for the user's confirmation to the first one.
    $comma_position = strpos($admin_email, ",");
    if ($comma_position > 0) {   // The comma wouldn't be the 1st char
      $from = substr($admin_email, 0, $comma_position);
    }
    else{
      $from = $admin_email;
    }
    if (empty($subject_user)) {
      $subject_user = $form_title . ' confirmation';
    }
    _send_email_for_entity_form($to, $from, $subject_user, $body);
  }

  // Admin email
  if (_forms_admin_receives_confirmation_email($entityform)) {
    $to = $admin_email;
    $from = (isset($user_email))
      ? $user_email
      : $admin_email;
    if (empty($subject)) {
      $subject = $form_title . ' submitted';
    }
    if (_forms_admin_subject_line_includes_user_name($entityform)) {
      $subject .= " - $user_name";
    }

    if ($admin_email_template = _forms_get_tplphp_file($entityform, 'admin')) {
      $params = array(
        'salutation' => 'Dear Admin for the form ' . $form_title . ',',
        'admin_email' => $admin_email,
      );
      $body = theme($admin_email_template, _forms_generate_template_parameters($entityform, $params, $custom_params));
    }
    else {
      // No default template for admin email, just construct the basic body
      $body =  _entity_display_form_data($entityform);
    }
    _send_email_for_entity_form($to, $from, $subject, $body);
  }
}

function _forms_generate_template_parameters($entityform, $params=array(), $custom_params=array()) {
  $defaults = array(
    'form_data'             => _entity_display_form_data($entityform),
    'form_title'            => _forms_get_form_title($entityform),
    'event_info_for_email'  => _forms_get_event_info_for_email($entityform),
    'event_payment_details' => _forms_get_payment_details_for_email($entityform),
    'postdate'              => _forms_get_postdate_for_email($entityform),
    'sitename'              => variable_get('site_name', 'Drupal'),
  );

  return array_merge($defaults, $params, $custom_params);
}

/**
 * Get the title of the form
 */
function _forms_get_form_title($entityform) {
  return entity_label('entityform_type', entityform_type_load($entityform->type));
}

/**
 * Get the email address of the form admin, i.e. the person or special mailbox
 * in ILR who needs to get an email when the form is subitted, also this is the
 * "from" address in the confirmation email to the user.
 * If admin recipient isn't supplied in the form, return ILRWEB address
 */
function _forms_get_admin_email($entityform) {
  $entityform_type = entityform_type_load($entityform->type);
  $admin_email = empty($entityform_type->data['form_submission_ilr_recipient'])
        ? ILRWEB_EMAIL : $entityform_type->data['form_submission_ilr_recipient'];
  return $admin_email;
}

/**
 * Checks whether the user name should be appended to the admin subject line
 */
function _forms_admin_subject_line_includes_user_name($entityform) {
  $entityform_type = entityform_type_load($entityform->type);
  $admin_subject_line_includes_user_name = empty($entityform_type->data['add_user_name_to_subject_line'])
    ? FALSE
    : $entityform_type->data['add_user_name_to_subject_line'];
  return $admin_subject_line_includes_user_name;
}

/**
 * Checks whether the USER should receive a confirmation email
 */
function _forms_user_receives_confirmation_email($entityform) {
  $entityform_type = entityform_type_load($entityform->type);
  $user_receives_confirmation_email = empty($entityform_type->data['send_confirmation_email_to_user'])
    ? FALSE
    : $entityform_type->data['send_confirmation_email_to_user'];
  return $user_receives_confirmation_email;
}

/**
 * Checks whether the admin should receive a confirmation email
 */
function _forms_admin_receives_confirmation_email($entityform) {
  $entityform_type = entityform_type_load($entityform->type);
  $admin_receives_confirmation_email = empty($entityform_type->data['send_confirmation_email_to_admin'])
    ? FALSE
    : $entityform_type->data['send_confirmation_email_to_admin'];
  return $admin_receives_confirmation_email;
}

/**
 * Display form data using entityform and entity2text code from Ted Bowman
 */
function _entity_display_form_data($entityform) {
  // Set display of form fields for email and anything else
  $entityform_id = $entityform->entityform_id;
  $entityform = entityform_load($entityform_id);
  $controller = entity_get_controller('entityform');
  $content = $controller->view(array($entityform->entityform_id => $entityform), 'email', NULL, TRUE);
  return drupal_render($content);
}

/**
 * Returns the value of a passed string or a default explicit value if the string is empty
 */
function _get_string_or_default($string, $default='Not specified'){
  return !empty($string) ? $string : $default;
}

/**
 * Formats a non-empty value for a person's name as a salutation
 */
function _form_salutation($name){
  return !empty($name) ? "Dear " . $name . ",\n\n" : "";
}

/**
 * Construct name for salutation, based on form fields (a) full_name or (b) firstname and lastname
 */
function _forms_construct_user_name($entityform){
  $name_for_salutation = '';
  $wrapper = _forms_entityform_wrapper($entityform);
  if (!empty($wrapper->field_full_name)) {
    $name_for_salutation = trim($wrapper->field_full_name->value());
  }
  elseif (!empty($wrapper->field_first_name)) {
    $name_for_salutation = trim($wrapper->field_first_name->value());
    if (!empty($wrapper->field_last_name)) {
      $name_for_salutation .= ' ';
      $name_for_salutation .= trim($wrapper->field_last_name->value());
    }
  }
  return $name_for_salutation;
}

/**
 * Set up and send email
 */
function _send_email_for_entity_form($recip, $from, $subject, $body) {
    $params = array(
      'subject' => $subject,
      'content' => $body,
      );

    drupal_mail(
        'forms_std_confirmation',
        'email_confirmation',
        $recip,
        LANGUAGE_NONE,
        $params,
        $from
      );
}

/**
 * Implements hook_mail().
 * This is the email sent to the user
 */
function forms_std_confirmation_mail($key, &$message, $params) {
  $message['headers']['MIME-Version'] = '1.0';
  $message['headers']['Content-Type'] = 'text/plain;charset=utf-8';
  $message['headers']['Bcc'] = ILRWEB_BCC_EMAIL;
  $message['subject'] = $params['subject'];
  $message['body'][] = $params['content'];
}

/**
 * Determines whether the form being saved is a registration form
 * @todo Consider refactoring, since "field_referenced_node" shouldn't probably
 * be the defining characteristic of a registration form
 */
function _forms_is_event_registration_form($entityform) {
  if (isset($entityform->field_referenced_node)) {
    if (module_exists('registration_pages')
        && _registration_pages_is_event_registration_form($entityform)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Get the postdate for forms email
 */
function _forms_get_postdate_for_email($entityform) {
  if ($entityform->type == 'job_postings_for_ilr_alumni') {
    $entityform_wrapper = _forms_entityform_wrapper($entityform);
    return date('F j, Y', $entityform_wrapper->field_h_post_date->value());
  }
  else {
    return '';
  }
}

/**
 * Wrapper function for _registration_pages_get_event_markup()
 */
function _forms_get_event_info_for_email($entityform) {
  if (_forms_is_event_registration_form($entityform)) {
    module_load_include('module', 'registration_pages');
    $entityform_wrapper = _forms_entityform_wrapper($entityform);
    $node = $entityform_wrapper->field_referenced_node->value();
    return _registration_pages_get_event_markup($node);
  }
  return '';
}

/**
 * Wrapper function for _elavon_get_payment_details_for_email()
 */
function _forms_get_payment_details_for_email($entityform) {
  if (module_exists('elavon') && _elavon_entityform_is_payment_form($entityform)) {
    return _elavon_get_payment_details_for_email($entityform);
  }
  return '';
}

/**
 * Saves the date of the event to the hidden field on the entityform
 */
function _forms_set_registration_date($entityform) {
  $entityform_wrapper = _forms_entityform_wrapper($entityform);
  $event_date_save = $entityform_wrapper->field_referenced_node->field_event_date->value();
  if (!empty($event_date_save)) {
    $entityform_wrapper->field_h_event_date->set($event_date_save);
  }
}

/**
 * Creates or retrieves an entitymetadata wrapper for the form
 */
function _forms_entityform_wrapper($entityform) {
  $wrapper = &drupal_static(__FUNCTION__ . $entityform->entityform_id);
  if (!isset($wrapper)) {
    $wrapper = entity_metadata_wrapper('entityform', $entityform);
  }
  return $wrapper;
}

function _forms_usage_page() {
  $content = "<p>The following forms are in use on the respective pages:</p>";
  $content .= "<ol>\n";

  // Query for all bid's that have an entityform block
  $result = db_select('block', 'b')->fields('b', array(
        'bid',
        'delta',
      ))->condition('module', 'entityform_block')->execute();

  // Query the usage for the results
  foreach ($result as $key => $block) {
    $usage_results = _ilr_get_block_usage($block->bid);
    if (count($usage_results)) {
      $nid = $usage_results[0];
      $alias = drupal_get_path_alias("node/$nid");
      $content .= "<li><a href='/admin/structure/entityform_types/manage/$block->delta'>$block->delta</a>: <a href='/$alias'><strong>$alias</strong></a></li>\n";
    }
  }

  $content .= "</ol>\n";

  return $content;
}

/**
 * Implements hook_post_features_revert().
 *
 * Explicitly set Submission for View.
 * This is not being set correctly on Features revert for some reason.
 * @todo Test this more to see why it is happening. It should be be necessary.
 */
function forms_post_features_revert($component) {
  watchdog('forms', $component);
  if ($component == 'entityform_type') {
    entityform_type_cache_reset();
    $entityform_type = entityform_get_types('job_postings_for_ilr_alumni');
    if ($entityform_type) {
      $entityform_type->data['submissions_view'] = 'submissions_alumni_postings';
      entityform_type_save($entityform_type);
    }
    else {
      watchdog('forms', 'Entityform type job_postings_for_ilr_alumni could not be loaded. Views setting cannot be set.', array(), WATCHDOG_ERROR);
    }

  }
}
/**
 * Implements hook_flush_caches().
 *
 * Set forms to be honeypot enabled when caches are about to be cleared.
 * Honeypot module will read variables next time it builds its cache.
 * @see honeypot_get_protected_forms().
 */
function forms_flush_caches() {
  if (module_exists('honeypot')) {
    $entityform_types = entityform_get_types();
    foreach ($entityform_types as $entityform_type) {
      $var_name = "honeypot_form_{$entityform_type->type}_entityform_edit_form";
      if (empty($entityform_type->data['kerberized'])) {
        // Set variable. Honeypot will query this.
        variable_set($var_name, 1);
      }
      else {
        // Delete incase forms switch settings
        variable_del($var_name);
      }
    }
  }
  return array();
}
