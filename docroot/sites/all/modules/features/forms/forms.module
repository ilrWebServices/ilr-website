<?php
/**
 * @file
 * Code for the Forms feature.
 */

include_once 'forms.features.inc';

define('ILRWEB_EMAIL', 'ilrweb@cornell.edu');
define('ILRWEB_BCC_EMAIL', 'ilrwebemailcc@cornell.edu');

$_forms_user_account = NULL;

/**
 * Implements hook_form_alter
 */
function forms_form_alter(&$form, &$form_state, $form_id) {
  // Check to see if an entityform is being rendered
  if (array_key_exists('entityform', $form_state)) {
    // Generate appropriate submit handler
    $form['actions']['submit']['#submit'][] = _forms_get_submit_handler($form_id);

    // Fill in default values of kerberized forms
    if (_forms_form_is_kerberized($form['#bundle'])) {
      _forms_set_kerberized_values($form);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter
 * Allows specifying the admin for the form
 * As well as whether it requires NetID login
 */
function forms_form_entityform_type_form_alter(&$form, &$form_state, $form_id) {
  $kerberized = (isset($form['#entityform_type']->data['kerberized']))
    ? $form['#entityform_type']->data['kerberized']
    : 0;

  $form['data']['kerberized'] = array(
    '#type' => 'checkbox',
    '#title' => t('Does this form require NetID authentication?'),
    '#weight' => -1,
    '#default_value' => $kerberized,
  );

  // Add admin email field to the "edit" form for this entityform
  $previously_set_recip = (isset($form['#entityform_type']->data['form_submission_ilr_recipient']))
    ? $form['#entityform_type']->data['form_submission_ilr_recipient']
    : '';

  $form['data']['form_submission_ilr_recipient'] = array(
    '#type' => 'textfield',
    '#title' => t('ILR Admin email'),
    '#weight' => -1,
    '#default_value' => $previously_set_recip,
    '#description' => t('The email address - usually a special mailbox - to send the admin email to when a form is submitted.  Leave blank if no admin email is to be sent (rarely the case).'),
  );
}

/**
 * Implements hook_form_FORM_ID_alter
 * Adds a kerberized checkbox for
 * field instances on kerberized forms
 */
function forms_form_field_ui_field_edit_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['#instance']['entity_type'])
    && $form['#instance']['entity_type']  == 'entityform') {
    if (_forms_form_is_kerberized($form['#instance']['bundle'])
      && _forms_field_is_kerberizable($form['#instance']['field_name'])) {
      $kerberized = isset($form['#instance']['settings']['kerberized']) ? $form['#instance']['settings']['kerberized'] : 0;
      $editable = isset($form['#instance']['settings']['editable']) ? $form['#instance']['settings']['editable'] : 0;
      $form['instance']['settings']['kerberized'] = array(
        '#type' => 'checkbox',
        '#title' => t('Display user account info as default value for this field?'),
        '#weight' => -1,
        '#default_value' => $kerberized,
      );
      $form['instance']['settings']['editable'] = array(
        '#type' => 'checkbox',
        '#title' => t('Remove user\'s ability to edit the value?'),
        '#weight' => -1,
        '#default_value' => $editable,
      );
    }
  }
}

/**
 * Implement hook_theme().
 */
function forms_theme() {
  // This code is patterned after code in views_theme() in views.module
  // line 60 as of 4/2014
  $base = array(
    'path' => drupal_get_path('module', 'forms') . '/templates',
  );

  return array(
    'default_mail' => $base + array(
      'template' => 'default-mail',
    ),
  );
}

/**
 * Swaps kerberized forms with netID login button
 */
function forms_block_view_alter(&$data, $block) {
  if (_forms_kerberized_form_present($data['content'])
    && !_forms_user_logged_in_with_netid()) {
      $data['content'] = drupal_get_form('forms_login_form');
  }
}

/**
 * Returns a simple login button for NetID logins
 */
function forms_login_form($form, &$form_state) {
  $form['netid'] = array(
    '#markup' => '<p>You must log in with your NetID to view this form.<br /><br /> <a class="button" href="/saml_login">NetID Login</a></p>',
    '#weight' => -10,
  );
  return $form;
}

/**
 * Generates the appropriate submit handler for entityforms
 */
function _forms_get_submit_handler($form_id) {
  $processingFunction = '_process_' . str_replace('_entityform_edit_form', '', $form_id);
  if (function_exists($processingFunction)) {
    return $processingFunction;
  }
  return '_forms_process_default';
}

/**
 * Gets all the kerberized fields and sets their default value
 * Disables kerberized fields which admin has specified are not user editable
 */
function _forms_set_kerberized_values(&$form) {
  $instances = field_info_instances('entityform', $form['#bundle']);
  foreach ($instances as $field_name => $value) {
    if (_forms_field_is_kerberized($instances[$field_name])) {
      // Email #default_value is different
      if (strpos($field_name, 'email') > 0) {
        $form[$field_name][LANGUAGE_NONE][0]['email']['#default_value'] = _forms_map_user_attribute_to_field($field_name);
      } // Default pattern
      else {
        $form[$field_name][LANGUAGE_NONE][0]['value']['#default_value'] = _forms_map_user_attribute_to_field($field_name);
      }
      // Figure out if user can edit the field
      if (isset($instances[$field_name]['settings']['editable'])) {
        $form[$field_name]['#disabled'] = $instances[$field_name]['settings']['editable'];
      }
    }
  }
}

/**
 * Connects the kerberizable_fields to the correct user account attributes
 */
function _forms_map_user_attribute_to_field($field_name) {
  global $_forms_user_account;
  if (!$_forms_user_account) {
    $_forms_user_account = _forms_get_user_account_info();
  }
  switch ($field_name) {
    case 'field_full_name':
      return $_forms_user_account->name;
      break;
    case 'field_email':
      return $_forms_user_account->mail;
      break;
    case 'field_first_name':
      return $_forms_user_account->field_first_name[LANGUAGE_NONE][0]['safe_value'];
      break;
    case 'field_last_name':
      return $_forms_user_account->field_last_name[LANGUAGE_NONE][0]['safe_value'];
      break;
  }
  return '';
}

/**
 * Loads the user object and all its attributes
 * Since additional fields added to accounts are not available
 * in the global $user object
 */
function _forms_get_user_account_info() {
  global $user;
  return user_load($user->uid);
}

 /**
 * Default processing for forms
 */
function _forms_process_default(&$form) {
  $admin_email = _forms_get_admin_email($form);
  _forms_send_emails($form, $admin_email);
}

/**
 * Process Career Services contact form
 */
function _process_career_services_contact_form(&$form) {
  // The email value has three chars appended to ensure uniqueness, so they
  // need to be stripped off.  See comments in
  // _forms_career_services_contact_options for more info.
  $email_value_stripped = substr(
    trim($form['field_career_services_how_to_dir']['und']['#value']), 0, -3);
  $admin_email = $email_value_stripped . '@cornell.edu';
  $subject = trim($form['field_subject_line']['und'][0]['value']['#value']);
  _forms_send_emails($form, $admin_email, $subject);
}


function _forms_career_services_contact_options() {
  // We need duplicate email addresses (keys in this array; values in the radio buttons)
  // in this list, and Drupal doesn't permit that, so I'm getting around it by appending
  // three characters to each in order to make them unique.  Those three chars will later
  // be stripped out.  Any chars can be used, as long as everything is unique.
  return array(
    'ilrcareers-01' => 'Office of Career Services (General Inquiries)',
    'ilrcareerrecruiting-01' => 'ILR On-Campus Recruiting - student inquiries',
    'djc5-01' => 'ILR On-Campus Recruiting - employer inquiries',
    'djc5-02' => 'ILR Career Fair',
    'mlh15-01' => 'Social Justice Career Fair',
    'jap7-01' => 'CAHRS Executive Roundtable',
    'mlh15-02' => 'Labor Roundtable',
    'mlh15-03' => 'FEX (Freshman Externship Program) / WISP (Winter Internship Program)',
    'ilrab-01' => 'ILR Alumni Bulletin',
    'bk30-01' => 'ILR Credit Internship Program',
    'rmd5-01' => 'Regina M. Duffey Moravek, Director of ILR Career Services',
  );
}

/**
 * Send user and admin emails
 */
function _forms_send_emails($form, $admin_email, $subject='', $email_template='default_mail') {
  $form_title = _forms_get_form_title($form);
  // User email
  if (!empty($form['field_email']['und'][0]['email']['#value'])) {
    $salutation = _form_salutation(_forms_construct_user_name($form));
    $body = theme($email_template, array(
      'salutation'      => $salutation,
      'form_data'       => _entity_display_form_data($form),
      'admin_email'     => $admin_email,
      'form_title'      => $form_title,
    ));

    $to = _get_string_or_default($form['field_email']['und'][0]['email']['#value'], $admin_email);
    $from = $admin_email;
    $subject_user = $form_title . ' confirmation';
    _send_email_for_entity_form($to, $from, $subject_user, $body);
  }

  // Admin email
  $to = $admin_email;
  $from = _get_string_or_default($form['field_email']['und'][0]['email']['#value'], $admin_email);
  if (empty($subject)) {
    $subject = $form_title . ' submitted';
  }
  $body =  _entity_display_form_data($form);
  _send_email_for_entity_form($to, $from, $subject, $body);
}


/**
 * Get the title of the form
 */
function _forms_get_form_title($form) {
  return entity_label('entityform_type', entityform_type_load($form['#entity']->type));
}


/**
 * Get the email address of the form admin, i.e. the person or special mailbox
 * in ILR who needs to get an email when the form is subitted
 * If admin recipient isn't supplied in the form, use ILRWEB_EMAIL
 */
function _forms_get_admin_email($form) {
  $entityform_type = entityform_type_load($form['#entity']->type);
  $admin_email = empty($entityform_type->data['form_submission_ilr_recipient'])
        ? ILRWEB_EMAIL : $entityform_type->data['form_submission_ilr_recipient'];
  return $admin_email;
}

/**
 * Checks the init value created by simplesamlphp_auth
 * with the value of the user's email before the '@' symbol
 */
function _forms_user_logged_in_with_netid() {
  global $user;
  if ($user->uid) { // the user is logged in
    return $user->init == strstr($user->mail, '@', true);
  }
  return FALSE;
}

/**
 * Checks to see whether the block being rendered is a kerberized entityform
 * See forms_block_view_alter()
 */
function _forms_kerberized_form_present($form) {
  if (isset($form['#entity']) && get_class($form['#entity']) == 'Entityform') {
    return _forms_form_is_kerberized($form['#entity']->type);
  }
  return FALSE;
}

/**
 * Checks whether a specific entityform bundle requires NetID authentication
 */
function _forms_form_is_kerberized($bundle) {
  $entityform_type = entityform_type_load($bundle);
  $kerberized = empty($entityform_type->data['kerberized'])
    ? FALSE
    : $entityform_type->data['kerberized'];
  return $kerberized;
}

/**
 * Checks whether the field can be kerberized
 * Based on information saved in the user account object
 */
function _forms_field_is_kerberizable($field_name) {
  $kerberizable_fields = array(
    'field_full_name',
    'field_email',
    'field_first_name',
    'field_last_name',
  );
  return in_array($field_name, $kerberizable_fields);
}

/**
 * Checks whether a specific field instance has been kerberized
 */
function _forms_field_is_kerberized($field_instance) {
  if (isset($field_instance['settings']['kerberized'])) {
    return $field_instance['settings']['kerberized'];
  }
  return FALSE;
}

/**
 * Display form data using entityform and entity2text code from Ted Bowman
 */
function _entity_display_form_data($form) {
  // Set display of form fields for email and anything else
  $entityform_id = $form['#entity']->entityform_id;
  $entityform = entityform_load($entityform_id);
  $controller = entity_get_controller('entityform');
  $content = $controller->view(array($entityform->entityform_id => $entityform), 'confirmation', NULL, TRUE);
  return entity2text_renderarray_to_text($content);
}

/**
 * Returns the value of a passed string or a default explicit value if the string is empty
 */
function _get_string_or_default($string, $default='Not specified'){
  return !empty($string) ? $string : $default;
}

/**
 * Formats a non-empty value for a person's name as a salutation
 */
function _form_salutation($name){
  return !empty($name) ? "Dear " . $name . ",\n\n" : "";
}

/**
 * Construct name for salutation, based on form fields (a) full_name or (b) firstname and lastname
 */
function _forms_construct_user_name($form){
  $name_for_salutation = '';
  if (array_key_exists('field_full_name', $form)) {
    $name_for_salutation = trim($form['field_full_name']['und'][0]['value']['#value']);
  }
  elseif (array_key_exists('field_firstname', $form)) {
    $name_for_salutation = trim($form['field_firstname']['und'][0]['value']['#value']);
    if (array_key_exists('field_lastname', $form)) {
      $name_for_salutation .= ' ';
      $name_for_salutation .= trim($form['field_lastname']['und'][0]['value']['#value']);
    }
  }
  return $name_for_salutation;
}

/**
 * Set up and send email
 */
function _send_email_for_entity_form($recip, $from, $subject, $body) {
    $params = array(
      'subject' => $subject,
      'content' => $body,
      );

    drupal_mail(
        'forms_std_confirmation',
        'email_confirmation',
        $recip,
        LANGUAGE_NONE,
        $params,
        $from
      );
}

/**
 * Implements hook_mail().
 * This is the email sent to the user
 */
function forms_std_confirmation_mail($key, &$message, $params) {
  $sitename = variable_get('site_name', 'Drupal');

  $message['headers']['MIME-Version'] = '1.0';
  $message['headers']['Content-Type'] = 'text/plain;charset=utf-8';
  $message['headers']['Bcc'] = ILRWEB_BCC_EMAIL;
  $message['subject'] = $params['subject'];
  $message['body'][] = $params['content'];
  $message['body'][] = "\n--\r";
  $message['body'][] = t("This is an automatic e-mail from $sitename.");
}
